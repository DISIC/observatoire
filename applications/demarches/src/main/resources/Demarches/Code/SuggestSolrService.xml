<?xml version="1.1" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.3" reference="Demarches.Code.SuggestSolrService" locale="">
  <web>Demarches.Code</web>
  <name>SuggestSolrService</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <creationDate>1528904998000</creationDate>
  <parent>wikidemarches:Demarches.Code.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <date>1528926900000</date>
  <contentUpdateDate>1528926900000</contentUpdateDate>
  <version>1.1</version>
  <title>Solr Suggestion Service</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{include reference="XWiki.SuggestSolrMacros" /}}

{{velocity output="false"}}
## Customize this macro here to add url filtering to the suggest
#macro (createSearchSuggestQuery $queryString $input $query)
  #parseSearchSuggestParameters($queryString $params)
  #setDefaultSearchSuggestParameters($params)
  ## Custom part, search in URLs
  ## 1. prepare some extra query, for searching in the urls as well, based on the user query string
  ## only search the string in URLs if it's longer than 5 characters
  #if ($input.length() &gt; 5)
    ## TODO: use a dismax query escape function here, don't do it manually, but for now it's ok
    #set($userFilledText = $input.replaceAll(':', '\\:').replaceAll('/', '\\/').replaceAll('"', ''))
    #set($extraQueryURL = "property.Demarches.Code.DemarchesClass.urlDemarche:(*${userFilledText}*) property.Demarches.Code.DemarchesClass.urlInfos:(*${userFilledText}*) property.Demarches.Code.DemarchesClass.urlFiche:(*${userFilledText}*)")
  #end
  ## 2. do some cleanup of special characters in the user searched text, for some special cases: replace :// in the url address. 
  ## TODO: I think &amp; and ? should also be escaped if the query string is an URL
  ## escape user search text, for the case when :// appear together (as part of an URL, escape them). In all other cases, let special syntax be used
  #set($searchedText = "$input.replaceAll('://', '\\:\\/\\/')")
  #set ($queryStatement = $params.remove('q').replace('__INPUT__', $searchedText))
  ## and append the extraQueryURL
  #set($queryStatement = "$queryStatement $!extraQueryURL")
  ## End custom part
  #set ($return = $services.query.createQuery($queryStatement, 'solr'))
  #foreach ($entry in $params.entrySet())
    #set ($discard = $return.bindValue($entry.key, $entry.value))
  #end
  #set ($query = $NULL)
  #setVariable("$query" $return)
#end
##
#macro (serializeResultsAsXML $results)
  #set ($discard = $response.setContentType('text/xml'))
  &lt;?xml version="1.0" encoding="UTF-8"?&gt;
  &lt;results&gt;
    #foreach ($result in $results)
      #set ($resultReference = $services.solr.resolve($result))
      #set ($id = $escapetool.xml($services.model.serialize($resultReference, 'default')))
      #set ($type = $escapetool.xml($resultReference.type.toString().toLowerCase()))
      #set ($url = $escapetool.xml($xwiki.getURL($resultReference)))
      #set ($title = $resultReference.name)
      #if ($resultReference.type == 'DOCUMENT')
        #set ($title = $result.title_)
        #if ($resultReference.locale)
          ## Display the document locale after the title.
          #set ($title = "$title ($resultReference.locale)")
        #end
      #end
      #set ($title = $escapetool.xml($title))
      #set ($options = {
        'excludeSelf': true,
        'limit': 4
      })
      &lt;rs id="$!id" type="$!type" url="$!url" info=""&gt;$!title&lt;/rs&gt;
    #end
  &lt;/results&gt;
#end
{{/velocity}}

{{velocity wiki="false"}}
#if ("$!request.query" != '' &amp;&amp; "$!request.input" != '')
  #getSearchSuggestResults($results)
  #if ($request.media == 'json' || $request.getHeader('Accept') == 'application/json')
    #set ($discard = $response.setContentType('application/json'))
    $jsontool.serialize($results)
  #else
    #serializeResultsAsXML($results)
  #end
#end
{{/velocity}}

{{velocity}}
#if ("$!request.query" == '' || "$!request.input" == '')
  {{info}}
    This service provides search results for the search suggest UI component.
    Examples:
    * [[$doc.getExternalURL('get', 'outputSyntax=plain&amp;query=__INPUT__*&amp;input=test')]]
  {{/info}}
#end
{{/velocity}}</content>
</xwikidoc>
