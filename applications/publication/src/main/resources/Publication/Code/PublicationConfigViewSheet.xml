<?xml version="1.1" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.3" reference="Publication.Code.PublicationConfigViewSheet" locale="">
  <web>Publication.Code</web>
  <name>PublicationConfigViewSheet</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <creationDate>1527086156000</creationDate>
  <parent>wikidemat:Publication.Code.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <date>1527105612000</date>
  <contentUpdateDate>1527105612000</contentUpdateDate>
  <version>1.1</version>
  <title/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{velocity}}
(%class='box'%)(((
= $services.localization.render('publication.view.config') =
#set($class = $doc.getObject('Publication.Code.PublicationConfigClass').xWikiClass)
#foreach($prop in $class.properties)
  ; $doc.displayPrettyName($prop.name)
  : $doc.display($prop.getName())
#end
)))
##
#set($dopreview = "$!request.previewdocs" == 'true')
##
#if ($dopreview)
  = $services.localization.render('publication.view.preview') =
  #set($filter = "$!doc.getObject('Publication.Code.PublicationConfigClass').getProperty('filter').value")
  #set($targetwiki = "$!doc.getObject('Publication.Code.PublicationConfigClass').getProperty('targetwiki').value")
  #if ($filter != '' &amp;&amp; $targetwiki != '')
    ## build the skip list from the excludeFields parameter
    #set($skipList = {})
    #set($excludes = "$!doc.getObject('Publication.Code.PublicationConfigClass').getProperty('excludeFields').value")
    #if ($excludes != '')
      #foreach($e in $excludes.split("\n"))
        #set($e = $e.trim())
        #set($ePair = $e.split(':'))
        #if ($ePair.size() == 2 &amp;&amp; $ePair[0].trim().length() &gt; 0 &amp;&amp; $ePair[1].trim().length() &gt; 0)
          #set($classSkips = $skipList.get($ePair[0].trim()))
          #if ($classSkips == $NULL)
            #set($classSkips = [])
            #set($discard = $skipList.put($ePair[0], $classSkips))
          #end
          #set($discard = $classSkips.add($ePair[1].trim()))
        #end
      #end
    #end
    ## display documents that will be copied
    #set($results = $services.query.xwql($filter).execute())
    #if ($results.size() &gt; 0)
      $!services.localization.render('publication.view.preview.exclude.explanation')

      #foreach($sPair in $skipList.entrySet())
        #set($excludeClass = $xwiki.getDocument($sPair.key).getxWikiClass())
        * $sPair.key #if ($excludeClass != $NULL)(%style="color: #0a0"%)$services.icon.render('check')(%%)#{else}(%style="color: #f00"%)$services.icon.render('delete')(%%)#end

        #foreach ($sField in $sPair.value)
          ** $sField #if ($excludeClass.get($sField) != $NULL)(%style="color: #0a0"%)$services.icon.render('check')(%%)#{else}(%style="color: #f00"%)$services.icon.render('delete')(%%)#end

        #end
      #end

      $!services.localization.render('publication.view.preview.documents.explanation')
      |=$services.localization.render('publication.view.preview.nb')|=$services.localization.render('publication.view.preview.docsource')|=$services.localization.render('publication.view.preview.doctarget')
      #foreach($r in $results)
        |$velocityCount|[[$r&gt;&gt;$r]]|[[${targetwiki}:${r}&gt;&gt;${targetwiki}:${r}]]
      #end
    #else
    #end
  #end
#end
##
= $services.localization.render('publication.view.run') =

{{html}}
#if ("$!request.confirm" != 'true')
  #if (!$dopreview)
    &lt;form class="xform" action="" method="POST" onsubmit="return window.confirm('$services.localization.render('publication.view.preview.button.confirm');"&gt;
      &lt;input type="hidden" name="previewdocs" value="true" /&gt;
      &lt;div class="buttonwrapper"&gt;
        &lt;button type="submit" class="button"&gt;$services.localization.render('publication.view.preview.button')&lt;/button&gt;
      &lt;/div&gt;
    &lt;/form&gt;
  #end
  &lt;form class="xform" action="" method="POST" onsubmit="return window.confirm('$escapetool.javascript($services.localization.render('publication.view.run.button.confirm'))');"&gt;
    &lt;input type="hidden" name="confirm" value="true" /&gt;
    &lt;div class="buttonwrapper"&gt;
      &lt;button type="submit" class="button"&gt;$services.localization.render('publication.view.run.button')&lt;/button&gt;
    &lt;/div&gt;
  &lt;/form&gt;
#end
{{/html}}
{{/velocity}}

{{job id="publishJob/{{velocity}}$xcontext.database/$doc.name/$datetool.get('yyyy-MM-dd/HH:mm:ss'){{/velocity}}" grouppath="{{velocity}}publishJob/$xcontext.database/$doc.name{{/velocity}}" start="{{velocity}}$request.confirm{{/velocity}}"}}
  {{velocity}}
  $services.logging.setLevel($doc.fullName, 'info')
  #set($logger = $services.logging.getLogger($doc.fullName))
  #set($progress = $services.progress)
  $progress.startStep('Read input')
  #set($filter = "$!doc.getObject('Publication.Code.PublicationConfigClass').getProperty('filter').value")
  #set($targetwiki = "$!doc.getObject('Publication.Code.PublicationConfigClass').getProperty('targetwiki').value")
  #if ($filter != '' &amp;&amp; $targetwiki != '')
    ## build the skip list from the excludeFields parameter
    #set($skipList = {})
    #set($excludes = "$!doc.getObject('Publication.Code.PublicationConfigClass').getProperty('excludeFields').value")
    #if ($excludes != '')
      #foreach($e in $excludes.split("\n"))
        #set($e = $e.trim())
        #set($ePair = $e.split(':'))
        #if ($ePair.size() == 2 &amp;&amp; $ePair[0].trim().length() &gt; 0 &amp;&amp; $ePair[1].trim().length() &gt; 0)
          #set($classSkips = $skipList.get($ePair[0].trim()))
          #if ($classSkips == $NULL)
            #set($classSkips = [])
            #set($discard = $skipList.put($ePair[0], $classSkips))
          #end
          #set($discard = $classSkips.add($ePair[1].trim()))
        #end
      #end
    #end
    $logger.info("Starting publication of documents answering query {} to {}, with the following skipList: {} ", $filter, $targetwiki, $skipList)
    ## copy documents one by one
    $progress.endStep()
    #set($results = $services.query.xwql($filter).execute())
    #if ($results.size() &gt; 0)
      $progress.pushLevel($results.size())
      #foreach($r in $results)
        $progress.startStep()
        #set($sourceReference = $services.model.resolveDocument($r, 'current'))
        #set($sourceDoc = $xwiki.getDocument($sourceReference))
        #set($targetReference = $services.model.resolveDocument($r, $services.model.createWikiReference($targetwiki)))
        $logger.info('Publishing document {} to {}', $sourceReference, $targetReference)
        #set($targetDoc = $xwiki.getDocument($targetReference))
        #if ($targetDoc != $NULL &amp;&amp; $sourceDoc != $NULL)
          #try()
            ## copy the title and the content of the source document to the target document
            #set($discard = $targetDoc.setTitle($sourceDoc.getTitle()))
            #set($discard = $targetDoc.setContent($sourceDoc.getContent()))
            ## 
            ## Set default language of the target document: this must absolutely be done here and nowhere else (after having set stuff on the document, so that the clone of the document is already created before we call .getDocument() and this acts on the clone)
            ## 
            #set($discard = $targetDoc.getDocument().setDefaultLocale($sourceDoc.getDefaultLocale()))
            ## copy the objects of this document, paying attention to the skip list
            ## TODO: this script does not handle non-contiguous objects, it always adds them contiguous, so if there is a hole in the objects of the source document and it's published twice, this will create as many objects in the target documents as there are holes in the source document.
            ## I'm not handling this case now because it's overcomplicated
            #foreach($objsByClass in $sourceDoc.getxWikiObjects().entrySet())
              #set($classToCopy = $objsByClass.key)
              $logger.info('Copying all objects of class {}', $classToCopy)
              #set($classToCopyExcludes = $skipList.get($classToCopy))
              #foreach($objToCopy in $objsByClass.value)
                #if ($objToCopy != $NULL)
                  #set($targetObj = $targetDoc.getObject($classToCopy, $objToCopy.number))
                  #if ($targetObj == $NULL)
                    #set($targetObj = $targetDoc.newObject($classToCopy))
                  #end
                  ## copy all properties except for the skips
                  #foreach ($p in $objToCopy.properties)
                    #if ($classToCopyExcludes == $NULL || !$classToCopyExcludes.contains($p.name))
                      #set($discard = $targetObj.set($p.name, $p.value))
                    #end
                  #end
                #else
                  ## do nothing
                  ## FIXME: normally I should create a hole in the target document as well, but I don't know how
                #end
              #end
            #end
            ##
            ## TODO: copy attachments!!!!
            ## 
            ## Done, save the target document
            #set($discard = $targetDoc.save())
            $logger.info('Document {} was saved!', $targetDoc.documentReference)
          #end
          #if($exception)
            $logger.error('Exception during publishing of document {} {}', $sourceReference, $exception)
          #end
        #else
          $logger.warn('Could not get source document for {} or target document for {}, which means current user does not have the right to view one of them, cannot proceed with copying this document', $sourceReference, $targetReference)
        #end
        $progress.endStep()
      #end
      $progress.popLevel()
    #else
      $logger.warn('No results on the current wiki for the given filter, nothing to copy!')
    #end
  #else
    $logger.warn('No filter or target wiki found, cannot proceed with publication')
  #end
  {{/velocity}}
{{/job}}</content>
  <object>
    <name>Publication.Code.PublicationConfigViewSheet</name>
    <number>0</number>
    <className>XWiki.SheetDescriptorClass</className>
    <guid>e8cc577e-a0ea-4ac9-9cd7-31cd578d9633</guid>
    <class>
      <name>XWiki.SheetDescriptorClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <action>
        <customDisplay/>
        <disabled>0</disabled>
        <name>action</name>
        <number>1</number>
        <picker>0</picker>
        <prettyName>Action</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <validationMessage/>
        <validationRegExp/>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </action>
    </class>
    <property>
      <action>view</action>
    </property>
  </object>
</xwikidoc>
