<?xml version="1.1" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.3" reference="Avis.Code.DemarcheAvisLivetableResultsAsync" locale="">
  <web>Avis.Code</web>
  <name>DemarcheAvisLivetableResultsAsync</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <creationDate>1544396400000</creationDate>
  <parent>xwiki:Avis.Code.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <date>1544396400000</date>
  <contentUpdateDate>1544396400000</contentUpdateDate>
  <version>1.1</version>
  <title/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{velocity output="false"}}
## We are generating a jobId but it should not include the request number otherwise it will be a different ID all the time. The objective is to get the same jobId for the same livetable request parameters
#set ($hashCode = $request.getQueryString().replaceAll("filename=.*?&amp;","").replaceAll("reqNo=[0-9]+?&amp;","").hashCode())
#if ($hashCode&lt;0)
 #set ($hashCode = 0 - $hashCode)
#end
#set ($jobId = "livetableexport/$hashCode")
{{/velocity}}

{{job id="{{velocity}}$!jobId{{/velocity}}" start="true"}}
{{velocity output="false"}}
  ## This is important to know exactly how many steps we have
  $services.progress.pushLevel(100)
  ## This allows to consider all steps performed by the XWiki core as the first step of the total 100 steps
  $services.progress.pushLevel(1)
  #set($discard = $services.localization.use('document', 'Macros.LivetableExporterMacroLabels'))
{{/velocity}}
  
{{include reference="XWiki.LiveTableResultsMacros" /}}

{{include reference="Macros.LivetableExporterResultsMacros" /}}

{{include reference="Demarches.Code.DemarchesMacros" /}}

{{include reference="Avis.Code.DemarcheAvisLivetableResultsMacros" /}}

{{velocity output="false"}}
  ## same rights verification and macros inclusions as Avis.Code.DemarcheAvisLivetableResults
  #set ($log = $services.logging.getLogger($doc.fullName))
  ## Customization: make demarche owner check before exporting the results.
  #set ($demarcheId = "$!request.demarche")
  #set ($demarchePage = $xwiki.getDocument($demarcheId))
  #isDemarcheOwner($demarchePage)
  ## check the groups of the current user to see if the user is an administrateur ministeriel and in the direction of this demarche
  #set ($userGroups = $services.user.group.getGroupsFromMemberWiki($xcontext.userReference))
  #set ($adMinRef = $services.model.resolveDocument('XWiki.AdministrateursMinisteriels'))
  #set ($demarcheDirection = $demarchePage.getObject('Demarches.Code.DemarchesClass').getProperty('direction').value)
  #set ($dirGrRef = $services.model.resolveDocument("XWiki.Groups.${demarcheDirection}"))
  #if ($xwiki.hasAccessLevel('admin') || ($userGroups != $NULL &amp;&amp; $userGroups.contains($adMinRef) &amp;&amp; $userGroups.contains($dirGrRef)) || $isDemarcheOwner)
    #try()
      #prepareGridResultsParamsFromRequest()
      #set($extension = "xls")
      #if($request.outputSyntaxType=="csv")
        #set($extension = "csv")
      #elseif($request.outputSyntaxType=="json")
        #set($extension = "json")
      #end
      #set ($fileName = "${jobId[1]}.${extension}")
      #gridresultwithfilterexport("$!request.classname" $request.collist.split(',') '' "${extra}" $params $request.outputSyntaxType true $fileName)
    #end
    #if ("$!exception" != '')
      $log.error($exception)
    #end
  #else
    TODO: use translations
    $log.error("Access denied to avis export for user $xcontext.userReference to avis of demarche $demarchePage")
  #end
  ## End of the 100 steps
  $services.progress.popLevel()
{{/velocity}}
{{/job}}

</content>
</xwikidoc>
