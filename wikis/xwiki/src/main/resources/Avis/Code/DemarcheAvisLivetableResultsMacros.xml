<?xml version="1.1" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.3" reference="Avis.Code.DemarcheAvisLivetableResultsMacros" locale="">
  <web>Avis.Code</web>
  <name>DemarcheAvisLivetableResultsMacros</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <creationDate>1544396400000</creationDate>
  <parent>Main.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <date>1544396400000</date>
  <contentUpdateDate>1544396400000</contentUpdateDate>
  <version>1.1</version>
  <title/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{velocity output="false"}}
##
## Maps of avis values, as global variables, so that we can reuse them in macros to produce display value results without calling the expensive display function every time.
##
#set($avisPropertyValues = {})
#set($avisClass = $xwiki.getDocument('Avis.Code.AvisClass').getxWikiClass())
#foreach($avisNumberProp in ['score', 'facile', 'comprehensible'])
  #set($avisNumberPropValues = {})
  #foreach($v in [1..3])
    #set($discard = $avisNumberPropValues.put($v, $services.localization.render("Avis.Code.AvisClass_${avisNumberProp}_${v}")))
  #end
  #set($discard = $avisPropertyValues.put($avisNumberProp, $avisNumberPropValues))
#end
#foreach($avisStaticListProp in ['difficultes', 'aide'])
  #set($avisStaticListPropValues = {})
  #foreach($lv in $avisClass.get($avisStaticListProp).listValues)
    #set($discard = $avisStaticListPropValues.put($lv, $services.localization.render("Avis.Code.AvisClass_${avisStaticListProp}_${lv}")))
  #end
  #set($discard = $avisPropertyValues.put($avisStaticListProp, $avisStaticListPropValues))
#end
## Overrides XWiki.LiveTableResultsMacros#gridresult_buildRowJSON in order to give access to Avis pages by bypassing XWiki rights, for
## users who have specic roles with respect to a démarche, i.e.: they are owner of the démarche.
## Changes brought:
## - the property 'doc_viewable' is set to 'true'
## - each page is retrieved via 'getDocumentAsAuthor' to bypass the rights
#macro(gridresult_buildRowJSON $item $rows)
  #set($avis = $item)
  #set($docReference = $services.model.createDocumentReference($xcontext.database, "Avis", "$avis.avisId"))
  ##'doc_viewable': $services.security.authorization.hasAccess('view', $docReference),
  #set ($row = {
    'doc_viewable': true,
    'doc_fullName': $services.model.serialize($docReference, 'local'),
    'doc_space': $services.model.serialize($docReference.parent, 'local'),
    'doc_location': "",
    'doc_url': $xwiki.getURL($docReference),
    'doc_space_url': $xwiki.getURL($docReference.parent),
    'doc_wiki': $docReference.wikiReference.name,
    'doc_wiki_url': $xwiki.getURL($docReference.wikiReference),
    'doc_hasadmin': true,
    'doc_hasedit': true,
    'doc_hasdelete': true,
    'doc_edit_url': $xwiki.getURL($docReference, 'edit'),
    'doc_copy_url': $xwiki.getURL($docReference, 'view', 'xpage=copy'),
    'doc_delete_url': $xwiki.getURL($docReference, 'delete'),
    'doc_rename_url': $xwiki.getURL($docReference, 'view', 'xpage=rename&amp;step=1')
  })
  #set ($isTranslation = "$!docLanguage" != '' &amp;&amp; $xwiki.getLanguagePreference() != $docLanguage)
  ## Display the language after the document name so that not all translated documents have the same name displayed.
  #set ($row.doc_name = "$docReference.name#if ($isTranslation) ($docLanguage)#end")
  #set ($row.doc_hascopy = $row.doc_viewable)
  #set ($row.doc_hasrename = $row.doc_hasdelete)
  #set ($row.doc_hasrights = $row.doc_hasedit &amp;&amp; $isAdvancedUser)
  #set ($row.doc_rights_url = $xwiki.getURL($docReference, 'edit', 'editor=rights'))
  #if ($row.doc_viewable)
    #set($author = "XWiki.Admin")
    #set($authorName = $xwiki.getPlainUserName($author))
    #set($discard = $row.put('doc_author_url', $xwiki.getURL($author)))
    #set($discard = $row.put('doc_date', $xwiki.formatDate($avis.date)))
    #set($discard = $row.put('doc_title', $avis.avisId))
    #set($discard = $row.put('doc_author', $authorName))
    #set($discard = $row.put('doc_creationDate', $avis.date))
    #set($discard = $row.put('doc_creator', $authorName))
    #foreach($colname in $collist)
      #gridresult_buildColumnJSON($colname $row)
    #end
  #end
  #set($discard = $rows.add($row))
#end

## Overrides XWiki.LiveTableResultsMacros#gridresult_buildColumnJSON in order to generate the values to display for avis
## based on the global value maps built on top of this document, avoiding to call the custom displayers which are
## a bomb in terms of velocity context memory consumption, especially bothering for the export (where all lines need
## to be evaluated).
#macro(gridresult_buildColumnJSON $colname $row)
  #if($colname.startsWith('doc.'))
  #elseif($colname == '_action')
    #set($discard = $row.put($colname, $services.localization.render("${request.transprefix}actiontext")))
  #elseif($colname == '_attachments')
    #livetable_getAttachmentsList($translatedDoc)
    #set($discard = $row.put($colname, $attachlist))
  #else
    ##
    ## Custom livetable for avis: get the display values from the cached map or other sources, just avoid calling displayers here, to save performance (custom displayers are a bomb)
    ##
    #if($avis.containsKey($colname))
      #set($fieldValue = $avis.get($colname))
      #if ($fieldValue == $NULL)
        #set($fieldValue = "")
      #end
      #set($fieldRawValue = $fieldValue)
      ## property class and colname  $propClass.name $colname $fieldValue $fieldRawValue.getClass().getName()
      ## initialize with the raw value...
      #set($fieldDisplayValue = "$!fieldRawValue")
      ## ... and then try to find it in the cached map
      ## check first if it's a list of values
      #if ($colname == 'demarche')
        ## if the column is the 'demarche' column, cheat and get the name of the document from the $demarchePage param, that is loaded by the caller (in DemarcheAvisLivetableResultsAsync and DemarcheAvisLivetableResults to check the rights)
        #set($fieldDisplayValue = "$!demarchePage.title")
        #if($fieldDisplayValue == '')
          #set($fieldDisplayValue = $fieldValue)
        #end
      #elseif($fieldRawValue.getClass().getName().endsWith('List'))
        #set($fieldDisplayValue = '')
        #foreach($fv in $fieldRawValue)
          #if($foreach.index &gt; 0)
            #set($fieldDisplayValue = "${fieldDisplayValue} ; ")
          #end
          #if($avisPropertyValues.get($colname).get($fv))
            #set($fieldDisplayValue = "${fieldDisplayValue}${avisPropertyValues.get($colname).get($fv)}")
          #else
            #set($fieldDisplayValue = "${fieldDisplayValue}${fv}")
          #end
        #end
      #else
        ## is not a list and not the demarche, just try to find it in the cached values map and replace the raw value if found
        #if($avisPropertyValues.get($colname).get($fieldRawValue))
          #set($fieldDisplayValue = $avisPropertyValues.get($colname).get($fieldRawValue))
        #end
      #end
      #if($fieldDisplayValue == '')
        #set($fieldDisplayValue = '-')
      #end
    #end
    #set($fieldUrl = '')
    #if($colname == "demarche")
      #set($fieldUrl = $xwiki.getURL($fieldValue))
      #if($fieldUrl == $xwiki.getURL($services.model.resolveDocument('', 'default', $doc.documentReference.extractReference('WIKI'))))
        #set($fieldUrl = '')
      #end
    #end
    #if("$!fieldDisplayValue" == '[]')
      #set($fieldDisplayValue = '')
    #end
    #set($discard = $row.put($colname, $fieldDisplayValue.replaceFirst($regextool.quote('{{html clean="false" wiki="false"}}'), '').replaceAll("$regextool.quote('{{/html}}')$", '')))
    #set($discard = $row.put("${colname}_value", "$!fieldValue"))
    #set($discard = $row.put("${colname}_url", $fieldUrl))
    ## Reset to the default class
    #set($discard = $itemDoc.use($className))
  #end
#end

#macro(gridresultwithfilter_buildQuery $className $collist $filterfrom $filterwhere $filterParams)
  #set($fromSql = "Avis.Code.AvisClass avis")
  #set($whereSql = "1=1")
  #set($whereParams = [])

  ## From the original gridresultwithfilter_buildQuery
  #if($request.tag)
    #set($fromSql = "${fromSql}, BaseObject as tobject, DBStringListProperty as tagprop")
    #set($whereSql = "${whereSql} and tobject.className='XWiki.TagClass' and tobject.name=doc.fullName and tobject.id=tagprop.id.id and tagprop.id.name='tags' and (")
    #foreach($tag in $request.getParameterValues('tag'))
      #if($velocityCount &gt; 1) #set($whereSql = "${whereSql} and ") #end
      ## Tags are case insensitive but they are stored unchanged which means we have to normalize them when performing
      ## a query. Unfortunately there's no simple way to match multiple tags (AND operator). If we join the list of
      ## tags in the FROM clause then we match at least one of the tags (OR operator). The only remaining option is to
      ## check that the list of tags contains each of the desired tags. HQL doesn't help us to lower-case the entire
      ## list of tags so we use an inner select for this.
      #set($whereSql = "${whereSql} lower(?) in (select lower(tag) from tagprop.list tag)")
      #set($discard = $whereParams.add("${tag}"))
    #end
    #set($whereSql = "${whereSql})")
  #end
  #macro(setOrderClause $fieldName $direction $useRawValue)
    #if ($useRawValue)
      #set($orderSql = " order by ${fieldName} ${direction}")
    #else
      #set($orderSql = " order by lower(${fieldName}) ${direction}, ${fieldName} ${direction}")
    #end
  #end
  #set($order = "$!request.sort")
  #if ($order == 'doc.location')
    #set ($order = 'doc.fullName')
  #end
  #set ($orderSql = '')
  #if($order != '')
    #set($orderDirection = "$!{request.get('dir').toLowerCase()}")
    #if("$!orderDirection" != '' &amp;&amp; "$!orderDirection" != 'asc')
      #set($orderDirection = 'desc')
    #end
    #if($order.startsWith('doc.'))
      ## The column is a document field.
      ##
      ## These document fields need to be ordered as raw values and not as strings.
      #set($rawDocumentFields = ['translation', 'date', 'contentUpdateDate', 'creationDate', 'elements', 'minorEdit1', 'hidden'])
      #set($saveDocumentField = $stringtool.removeStart($order, 'doc.').replaceAll('\W', ''))
      #setOrderClause("doc.$saveDocumentField", $orderDirection,  $rawDocumentFields.contains($saveDocumentField))
    #else
      #set($safeOrderField = $order.replaceAll('\W', ''))
      #set($rawProperties = ['id', 'score', 'facile', 'comprehensible', 'aide', 'date'])
      #set($isRaw = $rawProperties.contains($safeOrderField))
      #if ($safeOrderField == 'aide' || $safeOrderField == 'difficultes')
        #set($safeOrderField = "${safeOrderField}[0]")
      #end
      #setOrderClause("avis.$safeOrderField", $orderDirection, $isRaw)
    #end
  #end
  #foreach ($colName in $collist)
    #if($colName.startsWith("doc."))
      ## NOTE: In XWiki 9, livetable_addColumnToQuery uses $colname
      ## even though its parameter is named $colName
      ## it works when the macro is called from livetable_filterProperty
      ## because this one uses the $colname variable
      ## we need to define it ourselves
      ## By looking at the code, this issue is fixed in later versions of XWiki.
      #set($colname = $colName)
      #livetable_addColumnToQuery($colName)
    #else
      ## avis column
      #set($colName = $colName.replaceAll('\W', ''))
      #set ($filterValue = "$!request.getParameter($colName)")
      #if ("$!filterValue" != '')
        #if ($colName == "difficultes" || $colName == "aide")
          ## these columns are lists, stored in other tables
          #foreach ($v in $request.getParameterValues($colName))
            #set($whereSql = "${whereSql} and avis.id in (select avis.id from Avis.Code.AvisClass avis join avis.$colName $colName where $colName = ?)")
            #set($discard = $whereParams.add($v))
          #end
          #set($colMatch = "${colName}_match")
          #if ("$!request.getParameterValue($colMatch)" == "exact")
            #set($w = "1=1")
            #foreach ($v in $request.getParameterValues($colName))
              #set($w = "$w and $colName != ?")
              #set($discard = $whereParams.add($v))
            #end
            #set($whereSql = "${whereSql} and avis.id not in (select avis.id from Avis.Code.AvisClass avis join avis.$colName $colName where $w)")
          #end
        #elseif ($colName == "id" || $colName == "score" || $colName == "facile" || $colName == "comprehensible")
          ## these columns are integers
          #set($whereSql = "${whereSql} and (")
          #foreach ($v in $request.getParameterValues($colName))
            #set($vInt = $mathtool.toInteger($v))
            #if(!$foreach.first)
              #set($whereSql = "$whereSql or ")
            #end
            #set($whereSql = "${whereSql}avis.$colName = ?")
            #set($discard = $whereParams.add($vInt))
          #end
          #set($whereSql = "${whereSql})")
        #elseif ($colName == "demarche")
            #set($whereSql = "${whereSql} and avis.demarche = ?")
            #set($discard = $whereParams.add($filterValue))
        #elseif ($colName == "date")
          #set ($dateProperty = "avis.date")
          ## Copied and adapted from livetable_filterDateProperty
          #set ($timestamps = $filterValue.split('-'))
          #if ($timestamps.size() == 2)
            #set ($whereSql = "${whereSql} and $dateProperty &gt;= ? and $dateProperty &lt;= ?")
            #set ($discard = $whereParams.add($datetool.toDate($numbertool.toNumber($timestamps[0]))))
            #set ($discard = $whereParams.add($datetool.toDate($numbertool.toNumber($timestamps[1]))))
          #else
            ## Fall back to the older string matching
            #set ($whereSql = "${whereSql} and upper(str($dateProperty)) like upper(?)")
            #set ($discard = $whereParams.add("%$filterValue%"))
          #end
        #else
          #set($whereSql = "${whereSql} and (")
          #foreach ($v in $request.getParameterValues($colName))
            #if(!$foreach.first)
              #set($whereSql = "$whereSql or ")
            #end
            #set($whereSql = "${whereSql}avis.$colName like ?")
            #set($discard = $whereParams.add("%$v%"))
          #end
          #set($whereSql = "${whereSql})")
        #end
      #end
    #end
  #end
  ##
  ##
  ## Compute the final queries
  ##
  #set($sqlParams = [])
  #set($tagsMatchingParams = [])
  #set($allMatchingParams = [])
  #set($sql = "select avis from $fromSql $!filterfrom where $!whereSql $!filterwhere")
  #set($sqlCount = "select count(avis.avisId) from $fromSql $!filterfrom where $!whereSql $!filterwhere")
  #set($discard = $sqlParams.addAll($whereParams))
  ##
  #set($tagsMatchingFiltersFrom = ", $!fromSql $!filterfrom")
  #set($tagsMatchingFiltersWhere = "$!whereSql $!filterwhere")
  #set($discard = $tagsMatchingParams.addAll($whereParams))
  ##
  #set($allMatchingTagsFrom = "$!filterfrom")
  #set($allMatchingTagsWhere = "1=1 $!filterwhere")
  ##
  #if($filterParams)
    #set($discard = $sqlParams.addAll($filterParams))
    #set($discard = $tagsMatchingParams.addAll($filterParams))
    #set($discard = $allMatchingParams.addAll($filterParams))
  #end
  #if($orderSql != '')
    #set($sql = "$sql $!{orderSql}")
  #end
#end

#**
 * Customization of this livetable API for two purposes:
 * - to add progress when exporting in async mode
 * - limit Excel exports to 65000 rows
 * - to make count work with the custom avis query.
 *   query.count() is defined in xwiki-platform's CountDocumentFilter.java file
 *   and only counts documents. Since we don't want to join documents to make queries faster,
 *   we have to make our own count query.
 * Adds information about each live table row to the JSON returned by a live table data call.
 * NOTE: This macro uses Velocity variables defined by gridresultwithfilter_buildQuery.
 *
 * @param $map stores the JSON in memory so that it can be adjusted before serialization
 *#
#macro(gridresult_buildRowsJSON $map)
  #set($offset = $mathtool.toInteger($request.get('offset')))
  ## Offset starts from 0 in velocity and 1 in javascript
  #set($offset = $offset - 1)
  #if(!$offset || $offset &lt; 0)
    #set($offset = 0)
  #end
  #set($limit = $mathtool.toInteger($request.get('limit')))
  #if(!$limit)
    #set ($limit = 15)
  #end
  #if ($extension == 'xls' &amp;&amp; ($limit == 0 || $limit &gt; 65000))
    #set($limit = 65000)
  #end
  #set($query = $services.query.hql($sql))
  ## Apply query filters if defined. Otherwise use default.
  #foreach ($queryFilter in $stringtool.split($!request.queryFilters, ', '))
    #set ($query = $query.addFilter($queryFilter))
  #end
  #set ($query = $query.setLimit($limit).setOffset($offset).bindValues($sqlParams))
  ## CUSTOMIZATION Log launch of query
  #set($ok = $log.warn($services.localization.render("xwiki.macro.livetableExporter.async.runningquery")))
  #set($items = $query.execute())
  #set($totalrows = $services.query.hql($sqlCount).bindValues($sqlParams).execute()[0])
  #set($discard = $map.put('totalrows', $totalrows))
  #if ((($limit == 0) || ($limit &gt;= $totalrows)) &amp;&amp; $offset == 0)
    #set($returnedrows = $totalrows)
  #else
    #set($returnedrows = $mathtool.min($items.size(), $limit))
  #end
  #set($discard = $map.put('returnedrows', $returnedrows))
  #set($discard = $map.put('offset', $mathtool.add($offset, 1)))
  #set($rows = [])
  ## CUSTOMIZATION Prepare steps for progress
  #set($itemsPerStep = $returnedrows / 99.0)
  #if($itemsPerStep == 0)
   #set($itemsPerStep = 1)
  #end
  #set($ok = $log.debug("Items per step: ${itemsPerStep}"))
  #set($lastStep = 1)
  #set($ok = $services.progress.popLevel())
  #set($ok = $services.progress.startStep())
  ## CUSTOMIZATION End Prepare steps for progress
  #foreach($item in $items)
    ## CUSTOMIZATION steps for progress
    #set($currentStep = $velocityCount / $itemsPerStep)
    #set($ok = $log.debug("Status: ${currentStep} ${lastStep}"))
    #if($currentStep &gt; $lastStep)
      #foreach($steps in [$lastStep..$currentStep])
       #set($ok = $services.progress.endStep())
       #set($ok = $services.progress.startStep())
      #end
      #set($lastStep = $mathtool.ceil($currentStep))
      #set($ok = $log.warn($services.localization.render("xwiki.macro.livetableExporter.async.exporting", [$velocityCount, $items.size()])))
    #end
    ## CUSTOMIZATION end steps for progress
    #gridresult_buildRowJSON($item $rows)
  #end
  ## CUSTOMIZATION Final step for progress
  #set($ok = $services.progress.endStep())
  #set($discard = $map.put('rows', $rows))
#end
{{/velocity}}</content>
</xwikidoc>
