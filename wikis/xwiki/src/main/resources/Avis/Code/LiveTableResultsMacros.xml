<?xml version="1.1" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.3" reference="Avis.Code.LiveTableResultsMacros" locale="">
  <web>Avis.Code</web>
  <name>LiveTableResultsMacros</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <creationDate>1533289820000</creationDate>
  <parent>Avis.Code.LiveTableResults</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <date>1533311379000</date>
  <contentUpdateDate>1533311379000</contentUpdateDate>
  <version>1.1</version>
  <title>LiveTableResultsMacros</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>false</hidden>
  <content>{{velocity output="false"}}

## Copied from XWiki.LiveTableResultsMacros. Bypasses the security model to give access to specific fields of the AvisClass.
#macro(gridresult_buildRowJSON $item $rows)
  ## Handle both the case where the "language" filter is used and thus languages are returned too and the case where
  ## only the document name is returned. When more than the document name is returned the $item variable is a list.
  #if($item.size())
    ## Extract doc name and doc language from $item
    #set($docName = $item[0])
    #set($docLanguage = $item[1])
  #else
    #set($docName = $item)
    #set($docLanguage = '')
  #end
  #set ($docReference = $services.model.resolveDocument($docName))
  #set ($row = {
    'doc_viewable': $services.security.authorization.hasAccess('view', $docReference),
    'doc_fullName': $services.model.serialize($docReference, 'local'),
    'doc_space': $services.model.serialize($docReference.parent, 'local'),
    'doc_location': "#hierarchy($docReference, {'limit': 5, 'plain': false, 'local': true, 'displayTitle': false})",
    'doc_url': $xwiki.getURL($docReference),
    'doc_space_url': $xwiki.getURL($docReference.parent),
    'doc_wiki': $docReference.wikiReference.name,
    'doc_wiki_url': $xwiki.getURL($docReference.wikiReference),
    'doc_hasadmin': $xwiki.hasAdminRights(),
    'doc_hasedit': $services.security.authorization.hasAccess('edit', $docReference),
    'doc_hasdelete': $services.security.authorization.hasAccess('delete', $docReference),
    'doc_edit_url': $xwiki.getURL($docReference, 'edit'),
    'doc_copy_url': $xwiki.getURL($docReference, 'view', 'xpage=copy'),
    'doc_delete_url': $xwiki.getURL($docReference, 'delete'),
    'doc_rename_url': $xwiki.getURL($docReference, 'view', 'xpage=rename&amp;step=1')
  })
  #set ($isTranslation = "$!docLanguage" != '' &amp;&amp; $xwiki.getLanguagePreference() != $docLanguage)
  ## Display the language after the document name so that not all translated documents have the same name displayed.
  #set ($row.doc_name = "$docReference.name#if ($isTranslation) ($docLanguage)#end")
  #set ($row.doc_hascopy = $row.doc_viewable)
  #set ($row.doc_hasrename = $row.doc_hasdelete)
  #set ($row.doc_hasrights = $row.doc_hasedit &amp;&amp; $isAdvancedUser)
  #if ($docReference.name == 'WebHome')
    ## For nested pages, use the page administration.
    #set ($webPreferencesReference = $services.model.createDocumentReference('WebPreferences', $docReference.lastSpaceReference))
    #set ($row.doc_rights_url = $xwiki.getURL($webPreferencesReference, 'admin', 'editor=spaceadmin&amp;section=PageRights'))
  #else
    ## For terminal pages, use the old rights editor.
    ## TODO: We should create a page administration for terminal pages too.
    #set ($row.doc_rights_url = $xwiki.getURL($docReference, 'edit', 'editor=rights'))
  #end
  #if ("$!{request.classname}" == 'Avis.Code.AvisClass')
    #set ($itemDoc = $xwiki.getDocumentAsAuthor($docReference))
    ## Handle translations. We need to make sure we display the data associated to the correct document if the returned
    ## result is a translation.
    #if ($isTranslation)
      #set ($translatedDoc = $itemDoc.getTranslatedDocument($docLanguage))
    #else
      #set ($translatedDoc = $itemDoc.translatedDocument)
    #end
    #set($discard = $itemDoc.use($className))
    #set($discard = $row.put('doc_edit_url', $itemDoc.getURL($itemDoc.defaultEditMode)))
    #set($discard = $row.put('doc_author_url', $xwiki.getURL($translatedDoc.author)))
    #set($discard = $row.put('doc_date', $xwiki.formatDate($translatedDoc.date)))
    #set($discard = $row.put('doc_title', $translatedDoc.plainTitle))
    #set($discard = $row.put('doc_author', $xwiki.getPlainUserName($translatedDoc.authorReference)))
    #set($discard = $row.put('doc_creationDate', $xwiki.formatDate($translatedDoc.creationDate)))
    #set($discard = $row.put('doc_creator', $xwiki.getPlainUserName($translatedDoc.creatorReference)))
    #foreach($colname in $collist)
      #gridresult_buildColumnJSON($colname $row)
    #end
  #end
  #set($discard = $rows.add($row))
#end

#**
 * Adds information about the given column to the JSON returned by a live table data call.
 * NOTE: This macro uses Velocity variables available in gridresult_buildRowJSON.
 *
 * @param $colname the name of the live table column for which to retrieve information
 * @param $row stores the JSON in memory so that it can be adjusted before serialization
 *#
#macro(gridresult_buildColumnJSON $colname $row)
  #if($colname.startsWith('doc.'))
  #elseif($colname == '_action')
    #set($discard = $row.put($colname, $services.localization.render("${request.transprefix}actiontext")))
  #elseif($colname == '_attachments')
    #livetable_getAttachmentsList($translatedDoc)
    #set($discard = $row.put($colname, $attachlist))
  #elseif($colname == '_avatar')
    #livetable_getAvatar($itemDoc)
    #set($discard = $row.put($colname, $avatar))
  #elseif($colname == '_images')
    #livetable_getImagesList($itemDoc)
    #set($discard = $row.put($colname, $imagesList))
  #elseif($colname == 'ministeres' || $colname == 'direction')
    #set($demarcheId = $itemDoc.getValue('demarche'))
    #set($demarche = $xwiki.getDocument($demarcheId))
    #set($fieldValue = "$!demarche.getValue($colname)")
    #set($fieldDisplayValue = $!demarche.display($colname, 'view').trim())
    #set($discard = $row.put("${colname}_value", $fieldValue))
    #*
    ##display the title of the ministeres
    #if($colname=='ministeres')
      #set($demarche = $demarche.getObject('Demarches.Code.DemarchesClass'))
      #set($value = $demarche.getProperty('ministeres').getValue())
      #set($str = '')
      #foreach($val in $value)
        #if($velocityCount&gt;1)
          #set($str = "$str, " + $xwiki.getDocument($val).get('nom'))
        #else
          #set($str = $xwiki.getDocument($val).get('nom'))
        #end
      #end
      #set($fieldDisplayValue = $str)
    #end
    *#
    #if($fieldValue &amp;&amp; $fieldValue.length() &gt; 0)
      #set($discard = $row.put("$colname", $fieldDisplayValue))
    #else
      #set($discard = $row.put("$colname", ""))
    #end
  #else
    #livetable_getPropertyClassAndType($colname)
    #if(!$propClass.equals($class))
      #set($discard = $itemDoc.use($propClassName))
    #end
    #set($fieldValue = "$!itemDoc.getValue($colname)")
    #set($fieldDisplayValue = "$!itemDoc.display($colname, 'view')")
    #if($fieldDisplayValue == '')
      #set($fieldDisplayValue = $services.localization.render("${request.transprefix}emptyvalue"))
    #end
    #set($fieldUrl = '')
    ## Only retrieve an URL for a DBListClass item
    #if($propType == 'DBListClass' &amp;&amp; $propClass.get($colname).getProperty('multiSelect').value != 1)
      #set($fieldUrl = $xwiki.getURL($fieldValue))
      #if($fieldUrl == $xwiki.getURL($services.model.resolveDocument('', 'default', $doc.documentReference.extractReference('WIKI'))))
        #set($fieldUrl = '')
      #end
    #end
    #set($discard = $row.put($colname, $fieldDisplayValue.replaceFirst($regextool.quote('{{html clean="false" wiki="false"}}'), '').replaceAll("$regextool.quote('{{/html}}')$", '')))
    #set($discard = $row.put("${colname}_value", $fieldValue))
    #set($discard = $row.put("${colname}_url", $fieldUrl))
    ## Reset to the default class
    #set($discard = $itemDoc.use($className))
  #end
#end

## If the clause for joining with the Demarche table is not present, add it.
#macro(addDemarcheJoinClause)
  #if($whereSql.indexOf('Demarches.Code.DemarchesClass') &lt; 0)
    #set($fromSql = "${fromSql}, StringProperty demarcheProperty, BaseObject demarche")
    #set($whereSql = "${whereSql} and obj.id=demarcheProperty.id.id and demarcheProperty.id.name='demarche' and demarcheProperty.value=demarche.name and demarche.className='Demarches.Code.DemarchesClass'")
  #end
#end

#**
 * Computes the query used to retrieve the results of a live table data call.
 * NOTE: This macro is not fully encapsulated because it defines a few Velocity variables that are used in subsequent macros.
 *#
#macro(gridresultwithfilter_buildQuery $className $collist $filterfrom $filterwhere $filterParams)
  ## Additional columns; should *not* contain raw parameters, all added column names must be filtered
  #set($fromSql = '')
  ## Parametrized filter part of the query
  #set($whereSql = '')
  ## List of values to use with $whereSql
  #set($whereParams = [])
  #set($class = $xwiki.getDocument($className).getxWikiClass())
  ##
  ## Add the columns needed for the actual data
  ##
  #set($tablelist = [])
  #foreach($colname in $collist)
    #livetable_addColumnToQuery($colname)
  #end
  ##
  ## Tag filtering
  ##
  #if($request.tag)
    #set($fromSql = "${fromSql} , BaseObject as tobject, DBStringListProperty as tagprop")
    #set($whereSql = "${whereSql} and tobject.className='XWiki.TagClass' and tobject.name=doc.fullName and tobject.id=tagprop.id.id and tagprop.id.name='tags' and (")
    #foreach($tag in $request.getParameterValues('tag'))
      #if($velocityCount &gt; 1) #set($whereSql = "${whereSql} and ") #end
      ## Tags are case insensitive but they are stored unchanged which means we have to normalize them when performing
      ## a query. Unfortunately there's no simple way to match multiple tags (AND operator). If we join the list of
      ## tags in the FROM clause then we match at least one of the tags (OR operator). The only remaining option is to
      ## check that the list of tags contains each of the desired tags. HQL doesn't help us to lower-case the entire
      ## list of tags so we use an inner select for this.
      #set($whereSql = "${whereSql} lower(?) in (select lower(tag) from tagprop.list tag)")
      #set($discard = $whereParams.add("${tag}"))
    #end
    #set($whereSql = "${whereSql})")
  #end
  ##
  ##
  ## Order
  ##
  ## if the object for the classname of the order column is not already in the from sql, put it
  #macro(addObjectClause $objectAlias)
    #if($fromSql.indexOf($objectAlias) &lt; 0)
      #set($fromSql = "${fromSql}, BaseObject $objectAlias")
      #set($whereSql = "${whereSql} and ${objectAlias}.name = doc.fullName and ${objectAlias}.className = ?")
      #set($discard = $whereParams.add($propClassName))
    #end
  #end
  
  ## Set the order clause for a field. We first ignore the case using the lower function (so that e.g. 'aaa' equals 'AAA')
  ## but then consider it only for equal values (so that e.g. 'AAA' comes before 'aaa').
  #macro(setOrderClause $fieldName $direction $useRawValue)
    #if ($useRawValue)
      #set($orderSql = " order by ${fieldName} ${direction}")
    #else
      #set($orderSql = " order by lower(${fieldName}) ${direction}, ${fieldName} ${direction}")
    #end
  #end
  #set($order = "$!request.sort")
  #if ($order == 'doc.location')
    #set ($order = 'doc.fullName')
  #end
  #set ($orderSql = '')
  #if($order != '')
    #set($orderDirection = "$!{request.get('dir').toLowerCase()}")
    #if("$!orderDirection" != '' &amp;&amp; "$!orderDirection" != 'asc')
      #set($orderDirection = 'desc')
    #end
    #if($order=='direction')
      #addDemarcheJoinClause()
      #if ($fromSql.indexOf('directionProperty') &lt; 0)
        #set($fromSql = "${fromSql}, StringProperty directionProperty")
      #end
      #set($whereSql = "${whereSql} and demarche.id=directionProperty.id.id and directionProperty.id.name='direction'")
      #set($orderSql = " order by directionProperty.value ${orderDirection}")
    #elseif($order=='ministeres')
      #addDemarcheJoinClause()
      #if ($fromSql.indexOf('ministeresProperty') &lt; 0)
       #set($fromSql = "${fromSql}, DBStringListProperty ministeresProperty join ministeresProperty.list list")
      #end
      #set($whereSql = "${whereSql} and demarche.id=ministeresProperty.id.id and ministeresProperty.id.name='ministeres'")
      #set($orderSql = " order by list ${orderDirection}")
    #else
      #livetable_getTableAlias($order)
      #if($order.startsWith('doc.'))
        ## The column is a document field.
        ##
        ## These document fields need to be ordered as raw values and not as strings.
        #set($rawDocumentFields = ['translation', 'date', 'contentUpdateDate', 'creationDate', 'elements', 'minorEdit1', 'hidden'])
        #set($documentField = $stringtool.removeStart($order, 'doc.'))
        #setOrderClause(${safe_tableAlias.replace('_','.')}, ${orderDirection},  $rawDocumentFields.contains($documentField))
      #else
        ## The column is an object property.
        ##
        ## Resolve the property.
        #livetable_getPropertyClassAndType($order)
        #set ($multiselect = "$!{propClass.get($order).getProperty('multiSelect').getValue()}")
        ## We can only handle single values, not multiselect ones.
        #if ($multiselect != '1')
          ## Some property types do not need lowercasing since they have unique values by design, so we use the raw values to order.
          #set($rawPropertyTypes = ['NumberClass', 'BooleanClass', 'DateClass', 'LevelsClass'])
          ## If the order column is also a filer column, this means that it was already added to the query and all we need to do is to add it to the order clause.
          #if(!$tablelist.contains($order))
            ## The order column is not also a filter column, so not yet defined in the query.
            ## We need to first define it (to the from and where clauses) before we can add it to the order clause.
            ##
            ## Resolve the table name of the property to be used in the from clause below.
            #livetable_getTableName($order)
            ## If the sort column has a _class specified, join that object in
            #set($orderObjectAlias = 'obj')
            #if($propClassName != '' &amp;&amp; "$!propClass" != '')
              ## prepare the alias of the BaseObject table that corresponds to the class of this column
              #set($orderObjectAlias = "$!{propClassName.replaceAll('[^a-zA-Z0-9_]', '')}_obj")
              #addObjectClause($orderObjectAlias)
            #end
            #set($fromSql = "${fromSql}, ${tableName} ${safe_tableAlias}")
            ## FIXME: Check if this is indeed a property of the class. Hint: $propType can be used.
            ## Conditions are put on the object coresponding to the column of the order ($orderObjectAlias), which depends on which is the class of the $order
            #set($whereSql = "${whereSql} and ${orderObjectAlias}.id=${safe_tableAlias}.id.id and ${safe_tableAlias}.name = ?")
            #set($discard = $whereParams.add("${order}"))
          #end
          ## Add the column to the order clause.
          #setOrderClause("${safe_tableAlias}.value", ${orderDirection}, $rawPropertyTypes.contains($propType))
        #end
      #end
    #end
  #end
  ##
  ##
  ## Compute the final queries
  ##
  #set($sqlParams = [])
  #set($tagsMatchingParams = [])
  #set($allMatchingParams = [])
  #if("$!className" != '')
    ## Class query
    #set($sql = ", BaseObject as obj $!fromSql $!filterfrom where obj.name=doc.fullName and obj.className = ? and doc.fullName not in (?, ?) $!whereSql $!filterwhere")
    #set($discard = $sqlParams.addAll(["${className}", "${className}Template", ${className.replaceAll('Class$', 'Template')}]))
    #set($discard = $sqlParams.addAll($whereParams))
    ##
    #set($tagsMatchingFiltersFrom = ", BaseObject as obj $!fromSql $!filterfrom")
    #set($tagsMatchingFiltersWhere = "obj.name=doc.fullName and obj.className = ? and doc.fullName not in (?, ?) $!whereSql $!filterwhere")
    #set($discard = $tagsMatchingParams.addAll(["${className}", "${className}Template", ${className.replaceAll('Class$', 'Template')}]))
    #set($discard = $tagsMatchingParams.addAll($whereParams))
    ##
    #set($allMatchingTagsFrom = ", BaseObject as obj $!filterfrom")
    #set($allMatchingTagsWhere = "obj.name=doc.fullName and obj.className = ? and doc.fullName not in (?, ?) $!filterwhere")
    #set($discard = $allMatchingParams.addAll(["${className}", "${className}Template", ${className.replaceAll('Class$', 'Template')}]))
    ##
    #if($filterParams)
      #set($discard = $sqlParams.addAll($filterParams))
      #set($discard = $tagsMatchingParams.addAll($filterParams))
      #set($discard = $allMatchingParams.addAll($filterParams))
    #end
  #else
    ## Document query
    #set($sql = "$!fromSql $!filterfrom where 1=1 $!whereSql $!filterwhere")
    #set($discard = $sqlParams.addAll($whereParams))
    ##
    #set($tagsMatchingFiltersFrom = "$!fromSql $!filterfrom")
    #set($tagsMatchingFiltersWhere = "1=1 $!whereSql $!filterwhere")
    #set($discard = $tagsMatchingParams.addAll($whereParams))
    ##
    #set($allMatchingTagsFrom = "$!filterfrom")
    #set($allMatchingTagsWhere = "1=1 $!filterwhere")
    ##
    #if($filterParams)
      #set($discard = $sqlParams.addAll($filterParams))
      #set($discard = $tagsMatchingParams.addAll($filterParams))
      #set($discard = $allMatchingParams.addAll($filterParams))
    #end
  #end
  #if($orderSql != '')
    #set($sql = "$sql $!{orderSql}")
  #end
#end

#**
 * Macro to extend the query to select the properties for the livetable columns.
 * NOTE $colname is filtered (all characters but [a-zA-Z0-9_.] are removed) before use
 *#
#macro (livetable_addColumnToQuery $colName)
  ## Safe because / is not allowed in property names
  ## The $joinModeMarker is used in #livetable_filterDBStringListProperty.
  #set ($joinModeMarker = "/join_mode")
  #if (!$colName.endsWith($joinModeMarker))
    #set ($filterValue = "$!request.getParameter($colName)")
    #if ("$!filterValue" != '')
      #if ($colName == 'direction')
        #addDemarcheJoinClause()
        #if ($fromSql.indexOf('directionProperty') &lt; 0)
          #set($fromSql = "${fromSql}, StringProperty directionProperty")
        #end
        #set($whereSql = "${whereSql} and demarche.id=directionProperty.id.id and directionProperty.id.name='direction' and directionProperty.value = ?")
        #set ($discard = $whereParams.add("$filterValue"))
      #elseif ($colName == 'ministeres')
        #addDemarcheJoinClause()
        #if ($fromSql.indexOf('ministeresProperty') &lt; 0)
          #set($fromSql = "${fromSql}, DBStringListProperty ministeresProperty join ministeresProperty.list list")
        #end
        #set($whereSql = "${whereSql} and demarche.id=ministeresProperty.id.id and ministeresProperty.id.name='ministeres' and ? in elements (list)")
        #set ($discard = $whereParams.add("$filterValue"))
      #else
        #set ($discard = $tablelist.add($colName))
        #if ($colName.startsWith('doc.'))
          #if ($colName == 'doc.location')
            ## Location is a special case, that we need to handle separatly.
            ## It is actually not a real field, but a special request on doc.fullName, more user-friendly.
            #set ($safeColName = 'doc.fullName')
            #set ($matchNestedDocument = "(doc.name = 'WebHome' and upper(doc.space) like upper(?) escape '!')")
            #set ($matchTerminalDocument = "(doc.name &lt;&gt; 'WebHome' and upper(doc.fullName) like upper(?) escape '!')")
            #set ($whereSql = "${whereSql} and ($matchNestedDocument or $matchTerminalDocument)")
            ## Note: the "_", "[", and the "%" characters have special meanings in standard SQL servers (they behave as wildcards).
            ## However, it is not what the user expects (e.g. https://jira.xwiki.org/browse/XWIKI-12608).
            ## As a consequence, we must escape these characters.
            ## See http://www.jguru.com/faq/view.jsp?EID=8881 to understand why we use the special clause 'escape' above.
            ## Since we use '!' for the escaping, we also double existing ones.
            #set ($locationFilterValue = $filterValue.replaceAll('([\[%_!])', '!$1'))
            ## Because the user might filter with "/" as separator we replace that by "%", because it could be "." 
            ## (the space separator) or "/" (as it is in the document name).
            ## In addition, using "%" (any sequence of character) instead of "_" (any single character) gives the ability
            ## to filter on different levels:
            ##   e.g. filtering on "Blog/Intro" will return "Blog.BlogIntroduction".
            ##        On the other hand, it will also returns: "BlogForIntrospection", which might be unexpected.
            #set ($locationFilterValue = $locationFilterValue.replaceAll('/', '%'))
            #set ($discard = $whereParams.add("%${locationFilterValue}%"))
            ## We add the parameter twice because we use it twice in the WHERE clause (it's not a named parameter).
            #set ($discard = $whereParams.add("%${locationFilterValue}%"))
          #elseif ($colName == 'doc.date' || $colName == 'doc.creationDate' || $colName == 'doc.contentUpdateDate')
            #livetable_getTableAlias($colname)
            #livetable_filterDateProperty()
          #else
            #set ($safeColName = $colName.replaceAll('[^a-zA-Z0-9_.]', '').replace('_', '.'))
            #set ($whereSql = "${whereSql} and upper(str($safeColName)) like upper(?)")
            #set ($discard = $whereParams.add("%$filterValue%"))
          #end
        #else
          #set ($filterValues = $request.getParameterValues($colname))
          #set ($valueCount = $filterValues.size())
          #livetable_filterProperty($colName $filterValue $valueCount)
        #end
      #end
    #end
  #end
#end


{{/velocity}}</content>
</xwikidoc>
