<?xml version="1.1" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.3" reference="Avis.Admin.Statistiques.Comptages.ComputeEvolutions" locale="">
  <web>Avis.Admin.Statistiques.Comptages</web>
  <name>ComputeEvolutions</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <creationDate>1544396400000</creationDate>
  <parent>xwiki:Avis.Admin.Statistiques.Comptages.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <date>1544396400000</date>
  <contentUpdateDate>1544396400000</contentUpdateDate>
  <version>1.1</version>
  <title>Calcul des évolutions des avis utilisateurs pour une année</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>false</hidden>
  <content>{{velocity output='false'}}
##
## Prepares the list of months to display the data history for,
## from the min date and the max date,
## with proper coordinates to be able to access data and labels, in the proper order for display.
##
#macro(prepareCalendarForCharts $from $to)
  #set($chartsCalendar = [])
  #set($currentDateTime = $to)
  #set($yearFormatter = $xwiki.jodatime.getDateTimeFormatterForPattern('yyyy'))
  #set($monthFormatter = $xwiki.jodatime.getDateTimeFormatterForPattern('M'))
  #set($chartNameFormatter = $xwiki.jodatime.getDateTimeFormatterForPattern('MMM yyyy').withLocale($services.localization.currentLocale))
  ## max 2 years between minDate and maxDate
  #foreach($i in [1..24])
    #set($discard = $chartsCalendar.add({'year' : $yearFormatter.print($currentDateTime), 'month' : $monthFormatter.print($currentDateTime), 'label' : $chartNameFormatter.print($currentDateTime)}))
    #set($currentDateTime = $currentDateTime.minusMonths(1))
    #if ($currentDateTime.isBefore($from))
      ## no more dates to display
      #break
    #end
  #end
  ## reverse the list, to make it start with the beginning
  #set($discard = $collectionstool.reverse($chartsCalendar))
#end
{{/velocity}}

{{velocity}}
#set ($LOGGER = $services.logging.getLogger($doc.fullName))
#if ("$!request.confirm" == 'true')
  #set ($maxDateString = "31/03/2021")
  #set ($formatter = $xwiki.jodatime.getDateTimeFormatterForPattern('dd/MM/yyyy'))
  #set ($maxDateTime = $formatter.parseDateTime($maxDateString).withHourOfDay(23).withMinuteOfHour(59).withSecondOfMinute(59))
  #set ($minDateTime = $maxDateTime.minusYears(1).plusDays(1).withHourOfDay(0).withMinuteOfHour(0).withSecondOfMinute(0))
  #set ($minDate = $minDateTime.toDate())
  #set ($maxDate = $maxDateTime.toDate())
  #set ($resultsSetName = "$maxDateTime.toDate().time")
  #set ($discard = $LOGGER.debug("Starting to produce results set $resultsSetName"))
  #set ($discard = $LOGGER.debug("Querying data for demarches evolution for one year from date $minDateTime to $maxDateTime"))
  #set($results = $services.query.hql("select demarche.value, avg(score.value), count(*), concat(year(doc.creationDate), month(doc.creationDate)) from XWikiDocument as doc, BaseObject as avis, IntegerProperty as score, StringProperty as demarche where avis.name = doc.fullName and avis.className = 'Avis.Code.AvisClass' and avis.id = score.id.id and score.id.name = 'score' and demarche.id.id = avis.id and demarche.id.name = 'demarche' and score.value &gt; 0 and doc.creationDate &gt;= :minDate and doc.creationDate &lt;= :maxDate group by demarche.value, concat(year(doc.creationDate), month(doc.creationDate))").bindValue('minDate', $minDate).bindValue('maxDate', $maxDate).execute())
  #set ($discard = $LOGGER.debug("Results fetched, starting post-processing..."))
  #set($demarches = {})
  #foreach($r in $results)
    #if ("$!r[0]" != '')
      #set($demarcheId = $r[0].substring(10))
      #set($periods = $demarches.get($demarcheId))
      #if ($periods == $NULL)
        #set($periods = {})
        #set($discard = $demarches.put($demarcheId, $periods))
      #end
      #set($satisfactionPercent = $mathtool.round($mathtool.div($mathtool.mul($mathtool.sub($r[1], 1), 50))))
      #set($discard = $periods.put($r[3], {'count' : $r[2], 'satisfaction' : $satisfactionPercent}))
    #end
  #end
  #set($discard = $LOGGER.debug("Post-processing done, starting display..."))
  #set($ssxInclusion = "{{velocity}}${escapetool.hash}set(${escapetool.dollar}discard = ${escapetool.dollar}xwiki.ssx.use('Demarches.WebHome')){{/velocity}}")
  #set($resultsAsString = "${ssxInclusion}${escapetool.newline}${escapetool.newline}")
  ## #set($discard = $xwiki.ssx.use('Demarches.WebHome'))
  #prepareCalendarForCharts($minDateTime, $maxDateTime)
  #set ($resultsAsString = "${resultsAsString}|=(%width='30%'%)Demarche|=Ministères|=Indicateur#foreach($m in $chartsCalendar)|=$m.label#end${escapetool.newline}")
  #foreach($d in $demarches.entrySet())
    #set($demarcheDoc = $xwiki.getDocument("Demarches.${d.key}"))
    #set($demarcheTitle = $demarcheDoc.displayTitle)
    #set($demarcheObj = $demarcheDoc.getObject('Demarches.Code.DemarchesClass'))
    #set($ministries = $demarcheObj.display('ministeres', 'view'))
    #set($isTop250 = $demarcheObj.getProperty('top').value)
    #set($demarcheTotalAvis = 0)
    #set($discard = $LOGGER.debug("Preparing data for demarche $d.key : $demarcheTitle"))
    #set($satisfactionIndexRow = "")
    #set($countRow = "")
    ## for each month of the calendar, generate the 2 lines
    #set($prevSatisfactionValue = 0)
    #set($prevCountValue = 0)
    #foreach($m in $chartsCalendar)
      #set($currentSatisfactionValue = 0)
      #set($currentCountValue = 0)
      #set($currentSatisfactionDisplay = "(%style='color:#ccc;'%)0")
      #set($currentCountDisplay = "(%style='color:#ccc;'%)0")
      ## get period data, if any, and fill in the current values
      #set($periodData = $d.value.get("${m.year}${m.month}"))
      #if ($periodData != $NULL)
        #set($currentSatisfactionValue = $periodData.satisfaction)
        #set($currentCountValue = $periodData.count)
        ## color the display based on comparison with previous
        #set($currentSatisfactionDisplay = $currentSatisfactionValue)
        #set($currentCountDisplay = $currentCountValue)
        #if ($currentSatisfactionValue &gt; $prevSatisfactionValue &amp;&amp; $velocityCount &gt; 1)
          #set($currentSatisfactionDisplay = "${currentSatisfactionValue} (%style='color:#62d2b0;' class='fa fa-arrow-circle-up'%) (%%)")
        #elseif ($currentSatisfactionValue &lt; $prevSatisfactionValue  &amp;&amp; $velocityCount &gt; 1)
          #set($currentSatisfactionDisplay = "${currentSatisfactionValue} (%style='color:#ff7777;' class='fa fa-arrow-circle-down'%) (%%)")
        #end
        #if ($currentCountValue &gt; $prevCountValue  &amp;&amp; $velocityCount &gt; 1)
          #set($currentCountDisplay = " ${currentCountValue} (%style='color:#62d2b0;' class='fa fa-arrow-circle-up'%) (%%)")
        #elseif ($currentCountValue &lt; $prevCountValue  &amp;&amp; $velocityCount &gt; 1)
          #set($currentCountDisplay = "${currentCountValue} (%style='color:#ff7777;' class='fa fa-arrow-circle-down'%) (%%)")
        #end
        #set($demarcheTotalAvis = $demarcheTotalAvis + $periodData.count)
      #end
      #set($prevSatisfactionValue = $currentSatisfactionValue)
      #set($prevCountValue = $currentCountValue)
      #set($satisfactionIndexRow = "${satisfactionIndexRow}|${currentSatisfactionDisplay}")
      #set($countRow = "${countRow}|${currentCountDisplay}")
    #end
    #if ("$!isTop250" == '1' &amp;&amp; $demarcheTotalAvis &gt;= 100)
      #set($resultsAsString = "${resultsAsString}|(%rowspan='2'%)[[$demarcheTitle&gt;&gt;Demarches.$d.key]](%%)|(%rowspan='2'%)${ministries}(%%)|Indice de satisfaction${satisfactionIndexRow}${escapetool.newline}")
      #set($resultsAsString = "${resultsAsString}|Nombre d'avis${countRow}${escapetool.newline}")
      $LOGGER.debug("Added data for demarche $d.key in the results table to display"))
    #else
      $LOGGER.debug("Did not add data for demarche $d.key in the results table to display, as it's not top250 or it doesn't have more than 100 avis ($demarcheTotalAvis total avis)"))
    #end
  #end
  #set($discard = $LOGGER.debug("Displaying done, starting saving in document..."))
  #set($resultsDocument = $xwiki.getDocument("Avis.Admin.Statistiques.Comptages.Evolutions.${resultsSetName}"))
  #set($discard = $resultsDocument.setTitle("Evolution des avis utilisateurs pour une année avant $datetool.format('dd/MM/yyyy HH:mm:ss', $maxDateTime.toDate())"))
  #set($discard = $resultsDocument.setContent($resultsAsString))
  #set($discard = $resultsDocument.save())
  #set($discard = $LOGGER.debug("Document saved at $resultsDocument.fullName"))
  [[Voir les résultats&gt;&gt;$resultsDocument.fullName]]
#else
  [[Calculer les résultats&gt;&gt;${doc.fullName}||queryString='confirm=true' class='btn btn-default']]

  Si la calculation prend trop de temps et le lien vers les résultats ne s'affiche pas, **ne relancez pas le calcul en refraichissant cette page!**. Les résultats seront présents dans la liste de la page [[Evolutions&gt;&gt;Avis.Admin.Statistiques.Comptages.Evolutions]] lors de la finalisation du calcul (le calcul peut prendre ~40min).
#end
{{/velocity}}</content>
</xwikidoc>
