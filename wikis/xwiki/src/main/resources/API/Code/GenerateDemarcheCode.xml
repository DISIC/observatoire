<?xml version="1.1" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.3" reference="API.Code.GenerateDemarcheCode" locale="">
  <web>API.Code</web>
  <name>GenerateDemarcheCode</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <creationDate>1544396400000</creationDate>
  <parent>xwiki:API.Code.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <date>1544396400000</date>
  <contentUpdateDate>1544396400000</contentUpdateDate>
  <version>1.1</version>
  <title>GenerateDemarcheCode</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{groovy}}
import org.apache.commons.lang3.RandomStringUtils;
import org.apache.commons.codec.digest.DigestUtils;
// check if current user has an API key
if(xcontext.userReference) {
  def currentUserDoc = xwiki.getDocument(xcontext.getUserReference());
  def userDocApiKeyObj = currentUserDoc.getObject('API.Code.APIKeyClass');
  def userDocApiKey = null;
  if (userDocApiKeyObj != null) {
    userDocApiKey = userDocApiKeyObj.getProperty('key').getValue();
  }
  if (userDocApiKey == null || userDocApiKey.length() == 0) {
    // generate a key and redirect, if any redirect is asked for
    def username = xwiki.getUserName(xcontext.user, false) + RandomStringUtils.random(8, true, true);
    def newApiKey = DigestUtils.md5Hex(username);
    // save the key
    userDocApiKeyObj = currentUserDoc.getObject('API.Code.APIKeyClass', true);
    userDocApiKeyObj.set('key', newApiKey);
    currentUserDoc.save(services.localization.render('api.generatecode.userpagecomment'));
    userDocApiKey = newApiKey;
  }
  def withDemarche = false;
  def withAlreadyExistingDemarche = false;
  // current user now has a key, let's register them with code in the demarche page, if a demarche was given to this script
  def demarche = request.get('demarche');
  try {
    if (demarche != null &amp;&amp; demarche.length() &gt; 0) {
      def demarcheDoc = xwiki.getDocument(demarche);
      if (!demarcheDoc.isNew() &amp;&amp; demarcheDoc.getObject('Demarches.Code.DemarchesClass') != null) {
        // compose the name of the doc holding the key
        def demarcheAPIDocRef = services.model.createDocumentReference(demarcheDoc.getDocumentReference().getWikiReference().name, ['Demarches', 'Embed'], demarcheDoc.getDocumentReference().name);
        def demarcheAPIDoc = xwiki.getDocumentAsAuthor(demarcheAPIDocRef);
        // check if the object doesn't already exist for this key before adding it
        def existingEmbedObject = demarcheAPIDoc.getObject('API.Code.EmbedClass', 'key', userDocApiKey);
        if (existingEmbedObject != null) {
          // do nothing, the key is already stored
          withAlreadyExistingDemarche = true;
        } else {
          // doesn't exist, create an object of type "EmbedClass", fill it in with the key and save it
          def embedObject = demarcheAPIDoc.newObject('API.Code.EmbedClass');
          embedObject.set('key', userDocApiKey);
          demarcheAPIDoc.saveAsAuthor(services.localization.render('api.generatecode.demarchepagecomment', [xwiki.getUserName(xcontext.user, false)]));
          withDemarche = true;
        }
      }
    }
    // redirect if a redirect was requested
    if (request.get('xredirect')) {
      response.sendRedirect(request.get('xredirect'));
    } else {
      if (withDemarche) {
        println "{{success}}" + services.localization.render('api.generatecode.success.withdemarche', [demarche]) + "{{/success}}";
      } else if (withAlreadyExistingDemarche) {
        println "{{success}}" + services.localization.render('api.generatecode.success.withExistingDemarche', [demarche]) + "{{/success}}";
      } else {
        println "{{success}}" + services.localization.render('api.generatecode.success.withoutdemarche') + "{{/success}}";
      }
    }
  } catch (Exception e) {
    e.printStackTrace();
    println "{{error}}" + services.localization.render('api.generatecode.error.unknown') + "\\n" + $e.getMessage()  + "{{/error}}"
  }
} else {
  println "{{warning}}" + services.localization.render('api.generatecode.error.nouser') + "{{/warning}}";
}
{{/groovy}}</content>
</xwikidoc>
