<?xml version="1.1" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.3" reference="Demarches.Admin.Porteurs.Utilisateurs" locale="">
  <web>Demarches.Admin.Porteurs</web>
  <name>Utilisateurs</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <creationDate>1544396400000</creationDate>
  <parent>xwiki:Demarches.Admin.Porteurs.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <date>1544396400000</date>
  <contentUpdateDate>1544396400000</contentUpdateDate>
  <version>1.1</version>
  <title>Utilisateurs</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{velocity}}
#set($discard = $xwiki.ssx.use("Demarches.WebHome"))
{{/velocity}}

{{groovy}}
println "== Porteurs de démarches et démarches associées =="

// get users from direction groups
def groupsMembershipHql = "select memberProp.value, obj.name from BaseObject obj, StringProperty memberProp where obj.className = 'XWiki.XWikiGroups' and (obj.name like 'XWiki.Groups.Directions.%' or obj.name='XWiki.AdministrateursMinisteriels') and memberProp.id.id = obj.id and memberProp.name='member' and memberProp.value &lt;&gt; '' order by obj.name";
def userMembership = new HashMap();
for (entry in services.query.hql(groupsMembershipHql).execute()) {
  if (entry[0] &amp;&amp; entry[0].trim().length() &gt; 0) {
    def currentUserMembership = userMembership.get(entry[0]);
    if (currentUserMembership == null) {
      currentUserMembership = "";
    } else {
      currentUserMembership += ", ";
    }
    // 2 steps replace so that administrateurs ministeriels is also cleaned up from its prefix
    def directionValue = entry[1].replaceAll("XWiki.", '').replaceAll("Groups.Directions.", '');
    currentUserMembership += directionValue;
    userMembership.put(entry[0], currentUserMembership);
    // put all values, with xwiki: prefix or without, because membership as well as demarches porteurs could be stored one way or the other
    if (entry[0].startsWith("xwiki:")) {
      userMembership.put(entry[0].replaceAll("xwiki:", ''), currentUserMembership);
    } else {
      userMembership.put("xwiki:" + entry[0], currentUserMembership);
    }
  }
}

// get demarches and porteurs from demarches
def hql = "select prop.value, doc.fullName from XWikiDocument as doc, BaseObject as obj, LargeStringProperty as prop where obj.name = doc.fullName and obj.className = 'Demarches.Code.DemarchesClass' and doc.name &lt;&gt; 'DemarchesTemplate' and prop.id.id = obj.id and prop.id.name = 'proprietaires' and prop.value &lt;&gt; ''"
def entries = services.query.hql(hql).execute()
def demarchesIdsByOwner =  new HashMap()

for (entry in entries) {
  def owners = entry[0].split(",")
  def demarcheId = entry[1]
  for (owner in owners) {
    if ("$owner" != "") {
      def demarchesIds = demarchesIdsByOwner.get(owner)
      if (demarchesIds == null) {
        demarchesIds = []
      }
      demarchesIds.add(demarcheId)
      demarchesIdsByOwner[owner] = demarchesIds
    }
  }
}
println "|=Porteur|=Nom|=Prénom|=Adresse e-mail|=Directions (porteur)|=Id démarche|=Démarche|=Top 250"
for (entry in demarchesIdsByOwner.entrySet()) {
  def userId = entry.key;
  def userData = xwiki.getDocument(userId).name + "|||";
  if (xwiki.exists(userId)) {
    userData = xwiki.getUserName(userId, false);
    userData = "[[$userData&gt;&gt;$userId]]";
    def userObj = xwiki.getDocument(userId).getObject("XWiki.XWikiUsers");
    if (userObj != null) {
      userData = userData + "|" + userObj.getValue("first_name") + "|" + userObj.getValue("last_name") + "|" + userObj.getValue("email");
    } else {
      userData = userData + "|||";
    }
  }
  def userDirections = '';
  if (userMembership.get(userId)) {
    userDirections = userMembership.get(userId);
  }
  for (demarcheId in entry.value) {
    def demarcheDoc = xwiki.getDocument(demarcheId);
    def title = demarcheDoc.displayTitle;
    def top250 = demarcheDoc.getValue('top');
    println "|$userData|" + userDirections + "|" + demarcheDoc.getName() + "|[[{{{${title}}}}&gt;&gt;$demarcheId]]|" + ((top250 == 1) ? "Oui" : "Non");
  }
}


println "== Porteurs potentiels =="

println "La liste ci-dessous présente les utilisateurs disposant d'un compte sur la plateforme, mais qui ne sont pas administrateurs ni administrateurs ministériels, et qui n'ont encore aucune démarche dont ils sont porteurs : ce sont des porteurs de démarches potentiels."


def getGroupMembersIds(groupId) {
  def groupPage = xwiki.getDocument(groupId)
  def members = groupPage.getObjects("XWiki.XWikiGroups")
  def membersIds = []
  for (member in members) {
    if (member != null) {
      def id = member.getValue('member')
      if (id != null &amp;&amp; id.trim().length() &gt; 0) {
        membersIds.add(id)
      }
    }
  }
  return membersIds
}

def administratorsIds = getGroupMembersIds("XWiki.XWikiAdminGroup")
def administrateursMinisterielsIds = getGroupMembersIds("XWiki.AdministrateursMinisteriels")
hql = "select distinct obj.name from BaseObject as obj where obj.className = 'XWiki.XWikiUsers' order by obj.name"
def allUsersIds = services.query.hql(hql).execute()

def potentialOwnersIds = allUsersIds
potentialOwnersIds.removeAll(administratorsIds)
potentialOwnersIds.removeAll(administrateursMinisterielsIds)
potentialOwnersIds.removeAll(demarchesIdsByOwner.keySet())

println "|=Utilisateur|=Adresse e-mail"
for (potentialOwnerId in potentialOwnersIds) {
  def userName = xwiki.getUserName(potentialOwnerId, false)
  def userEmailAddress = xwiki.getDocument(potentialOwnerId).getObject("XWiki.XWikiUsers").getValue("email")
  println "|[[$userName&gt;&gt;$potentialOwnerId]]|$userEmailAddress"
}



{{/groovy}}

</content>
</xwikidoc>
