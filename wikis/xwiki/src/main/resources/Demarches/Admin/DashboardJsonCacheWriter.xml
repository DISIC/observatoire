<?xml version="1.1" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.3" reference="Demarches.Admin.DashboardJsonCacheWriter" locale="">
  <web>Demarches.Admin</web>
  <name>DashboardJsonCacheWriter</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <creationDate>1544396400000</creationDate>
  <parent>xwiki:Demarches.Admin.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <date>1544396400000</date>
  <contentUpdateDate>1544396400000</contentUpdateDate>
  <version>1.1</version>
  <title>DashboardJsonCacheWriter</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{include reference="Demarches.Code.DemarcheAvisStatisticsMacros" /}}

{{velocity}}
#set($LOGGER = $services.logging.getLogger('Demarches.Admin.DashboardJsonCacheWriter'))
#set($cacheKeyPrefix = 'observatoire-aviscache')
#set($formatter = $xwiki.jodatime.getDateTimeFormatterForPattern('yyyy-MM-dd'))
#set($formatterWithHour = $xwiki.jodatime.getDateTimeFormatterForPattern('yyyy-MM-dd HH:mm:ss'))
#set($defaultStartDate = '2018-06-15')
#set($doWriteCache = false)
#if("$!request.confirm" == 'true')
  #set($doWriteCache = true)
#end
#set($overwriteCache = true)
#if("$!request.observatoire" != '')
  #set($observatoireDoc = $xwiki.getDocument("$!request.observatoire"))
  #set($observatoireObj = $observatoireDoc.getObject('Demarches.Dashboard.Code.DashboardClass'))
  #set($obsJsonAttachment = $observatoireDoc.getAttachment('data.json'))
  #if (!$observatoireDoc.isNew() &amp;&amp; $observatoireObj &amp;&amp; $obsJsonAttachment)
    ## It's an observatoire, load the json as object
    #set($obsData = $jsontool.fromString($obsJsonAttachment.contentAsString))
    #if ($obsData)
      = Observatoire $observatoireDoc.title =
      #set($obsVersion = $obsData.metadata.schema)
      |=Version|$obsVersion
      ## old versions of observatoire don't have sliding year data but all period data
      #if($obsVersion == '1.0' || $obsVersion == '1.1')
        #set($minDateString = $defaultStartDate)
        #set($maxDateString = $obsData.metadata.date)
      #else
        #set($minDateString = $obsData.metadata.get('avis-start-date'))
        #set($maxDateString = $obsData.metadata.get('avis-end-date'))  
      #end
      #set ($maxDateTime = $formatter.parseDateTime($maxDateString).withHourOfDay(23).withMinuteOfHour(59).withSecondOfMinute(59))
      #set ($minDateTime = $formatter.parseDateTime($minDateString).withHourOfDay(0).withMinuteOfHour(0).withSecondOfMinute(0))
      |=Période|$formatterWithHour.print($minDateTime) - $formatterWithHour.print($maxDateTime)
      #set($cacheId = "${formatter.print($minDateTime)}-${formatter.print($maxDateTime)}")
      |=Id de cache|$cacheId

      ==Démarches==
      ## decoration for the demarches table
      #set($discard = $xwiki.jsfx.use("js/xwiki/table/tablefilterNsort.js", true))
      #set($discard = $xwiki.ssfx.use("js/xwiki/table/table.css"))
      (% class='grid sortable filterable doOddEven' id='obstable' %)
      (% class='sortHeader'%)|=Number(% class='sortHeader'%)|=Démarche Id(% class='sortHeader'%)|=Démarche title(% class='sortHeader'%)|=Dematérialisée?(% class='sortHeader'%)|=Satisfaction index value(% class='sortHeader'%)|=Avis count(% class='sortHeader'%)|=Should compute cache?(% class='sortHeader'%)|=Cache present?
      #foreach($d in $obsData.data)
        #set($shouldComputeCache = $d.satisfactionIndex.get('value') &gt;= 0)
        #set($demarcheCacheKey = "${cacheKeyPrefix}/${cacheId}/$d.id.substring(10)")
        #set($demarcheCacheExists = $services.jsonstore.permdir.exists($demarcheCacheKey, false))
        |$foreach.count|$d.id|$d.title|$d.statutDemat|$d.satisfactionIndex.get('value')|$d.avisCount.get('value')|$shouldComputeCache|$demarcheCacheExists
        #if ($shouldComputeCache &amp;&amp; $doWriteCache &amp;&amp; (!$demarcheCacheExists || $overwriteCache))
          #set($discard = $LOGGER.warn("Starting to compute cache for demarche $d.id"))
          #set($avisStatsResult = $NULL)
          #computeAvisStats($d.id, $minDateTime.toDate(), $maxDateTime.toDate(), 'Avis.Code.AvisClass')
          #set($discard = $LOGGER.warn("Done computing cache for demarche $d.id, storing the cache"))
          ## if some results were computed, save them
          #if($avisStatsResult != $NULL)
            #set($storeResult = $services.jsonstore.permdir.persistAsJson($avisStatsResult, $demarcheCacheKey, $overwriteCache))
            #if (!$storeResult)
              #set($discard = $LOGGER.error("Cache for demarche $d.id was computed but could not be stored"))
            #else
              #set($discard = $LOGGER.warn("Done storing cache for demarche $d.id"))
            #end
          #else
            #set($discard = $LOGGER.warn("No avis results computed, nothing to store"))
          #end
        #end
      #end

    #else
      {{error}}Donnée de l'observatoire pas trouvée.{{/error}}
    #end
  #end
#else
  Select an observatoire under or pass the observatoire parameter with the document reference.
#end
{{/velocity}}</content>
</xwikidoc>
