<?xml version="1.1" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.3" reference="Demarches.Admin.DashboardJsonCacheWriter" locale="">
  <web>Demarches.Admin</web>
  <name>DashboardJsonCacheWriter</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <creationDate>1544396400000</creationDate>
  <parent>xwiki:Demarches.Admin.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <date>1544396400000</date>
  <contentUpdateDate>1544396400000</contentUpdateDate>
  <version>1.1</version>
  <title>Cache des avis des observatoires</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{include reference="Demarches.Code.DemarcheAvisStatisticsMacros" /}}

{{velocity}}
#set($LOGGER = $services.logging.getLogger('Demarches.Admin.DashboardJsonCacheWriter'))
#set($cacheKeyPrefix = 'observatoire-aviscache')
#set($formatter = $xwiki.jodatime.getDateTimeFormatterForPattern('yyyy-MM-dd'))
#set($formatterWithHour = $xwiki.jodatime.getDateTimeFormatterForPattern('yyyy-MM-dd HH:mm:ss'))
#set($defaultStartDate = '2018-06-15')
#set($doWriteCache = false)
#if("$!request.confirm" == 'true')
  #set($doWriteCache = true)
#end
#set($overwriteCache = true)
#if("$!request.observatoire" != '')
  #set($observatoireDoc = $xwiki.getDocument("$!request.observatoire"))
  #set($observatoireObj = $observatoireDoc.getObject('Demarches.Dashboard.Code.DashboardClass'))
  #set($obsJsonAttachment = $observatoireDoc.getAttachment('data.json'))
  #if (!$observatoireDoc.isNew() &amp;&amp; $observatoireObj &amp;&amp; $obsJsonAttachment)
    ## It's an observatoire, load the json as object
    #set($obsData = $jsontool.fromString($obsJsonAttachment.contentAsString))
    #if ($obsData)
      ==Observatoire $observatoireDoc.title ==
      [[Voir l'observatoire (nouvel onglet)&gt;&gt;$observatoireDoc.fullName||target='_blank']]
      #set($obsVersion = $obsData.metadata.schema)
      |=Version|$obsVersion
      ## old versions of observatoire don't have sliding year data but all period data
      #if($obsVersion == '1.0' || $obsVersion == '1.1')
        #set($minDateString = $defaultStartDate)
        #set($maxDateString = $obsData.metadata.date)
      #else
        #set($minDateString = $obsData.metadata.get('avis-start-date'))
        #set($maxDateString = $obsData.metadata.get('avis-end-date'))  
      #end
      #set ($maxDateTime = $formatter.parseDateTime($maxDateString).withHourOfDay(23).withMinuteOfHour(59).withSecondOfMinute(59))
      #set ($minDateTime = $formatter.parseDateTime($minDateString).withHourOfDay(0).withMinuteOfHour(0).withSecondOfMinute(0))
      |=Période|$formatterWithHour.print($minDateTime) - $formatterWithHour.print($maxDateTime)
      #set($cacheId = "${formatter.print($minDateTime)}-${formatter.print($maxDateTime)}")
      |=Id de cache|$cacheId

      ==Démarches==

      Les données des avis dans le tableau ci-dessous contiennent les données stockées dans le json de l'observatoire séléctionné. Ainsi, le nombre d'avis et l'indice de satisfaction contiennent aussi les données configurées par les indicateurs de sources externes car il n'y pas de distinction au niveaue de l'observatoire par rapport à la source de la donnée. Le calcul d'un cache pour ces démarches est une limitation de cet outil.
      
      ## decoration for the demarches table
      #set($discard = $xwiki.jsfx.use("js/xwiki/table/tablefilterNsort.js", true))
      #set($discard = $xwiki.ssfx.use("js/xwiki/table/table.css"))
      (% class='grid sortable filterable doOddEven' id='obstable' style='width: 100%'%)
      (% class='sortHeader'%)|=No.(% class='sortHeader'%)|=Id démarche(% class='sortHeader'%)|=Démarche(% class='sortHeader'%)|=Dematérialisée?(% class='sortHeader'%)|=Index de satisfaction (valeur)(% class='sortHeader'%)|=Nombre d'avis(% class='sortHeader'%)|=Cache à calculer?(% class='sortHeader'%)|=Cache présent?#if($doWriteCache)|=Cache calculé?#end
      
      #foreach($d in $obsData.data)
        #set($shouldComputeCache = $d.satisfactionIndex.get('value') &gt;= 0)
        #set($demarcheCacheKey = "${cacheKeyPrefix}/${cacheId}/$d.id.substring(10)")
        #set($demarcheCacheExists = $services.jsonstore.permdir.exists($demarcheCacheKey, false))
        #set($demarcheCacheComputingResult = '')
        #if ($doWriteCache)
          #if ($shouldComputeCache &amp;&amp; (!$demarcheCacheExists || $overwriteCache))
            #set($discard = $LOGGER.warn("Starting to compute cache for demarche $d.id"))
            #set($avisStatsResult = $NULL)
            #computeAvisStats($d.id, $minDateTime.toDate(), $maxDateTime.toDate(), 'Avis.Code.AvisClass')
            #set($discard = $LOGGER.warn("Done computing cache for demarche $d.id, storing the cache"))
            ## if some results were computed, save them
            #if($avisStatsResult != $NULL)
              #set($storeResult = $services.jsonstore.permdir.persistAsJson($avisStatsResult, $demarcheCacheKey, $overwriteCache))
              #if (!$storeResult)
                #set($discard = $LOGGER.error("Cache for demarche $d.id was computed but could not be stored"))
                #set($demarcheCacheComputingResult = 'Non (erreur de stockage)')
              #else
                #set($discard = $LOGGER.warn("Done storing cache for demarche $d.id"))
                #set($demarcheCacheComputingResult = 'Oui')
              #end
            #else
              #set($discard = $LOGGER.warn("No avis results computed, nothing to store"))
              #set($demarcheCacheComputingResult = 'Non (pas de cache calculé)')
            #end
          #else
            #set($demarcheCacheComputingResult = 'Non (pas nécessaire)')
          #end
        #end
        |$foreach.count|$d.id|$d.title|$d.statutDemat|$d.satisfactionIndex.get('value')|$d.avisCount.get('value')|$shouldComputeCache|$demarcheCacheExists#if($doWriteCache)|$demarcheCacheComputingResult#end

      #end

      
      #if ($doWriteCache)
        #set($discard = $LOGGER.warn("End of cache computing for observatoire $request.observatoire"))
      #else

        {{warning}}Le bouton ci-dessous génére le cache pour l'observatoire et écrase le cache déjà stocké, s'il y a deja des valeurs stockés.
        **Note**: l'opération est très longue, le résultat ne sera pas affiché dans le navigateur, il faudrait suivre les logs serveur.
        {{/warning}}

        {{html clean='false' wiki='false'}}
          &lt;form action="$doc.getURL('view')" method="post" class='xform'&gt;
            &lt;div class='buttonwrapper'&gt;
              &lt;input type='hidden' name='confirm' value='true' /&gt;
              &lt;input type='hidden' name='observatoire' value="$escapetool.xml($request.observatoire)" /&gt;
              &lt;input type='submit' class='btn btn-primary' name='generatecache' value='Générer le cache sur disk' /&gt;
            &lt;/div&gt;
          &lt;/form&gt;
        {{/html}}
      #end

    #else
      {{error}}Données de l'observatoire pas trouvées.{{/error}}
    #end
  #end
#else
  Séléctionner un observatoire ci-dessous pour voir les données stockées dans le cache ou les générer à nouveau.

  {{html clean='false' wiki='false'}}
    &lt;form action="$doc.getURL('view')" method="get" class='xform'&gt;
      &lt;dl&gt;
        &lt;dt&gt;&lt;label&gt;Observatoire&lt;/label&gt;&lt;/dt&gt;
        &lt;dd&gt;
          &lt;select name="observatoire"&gt;
            &lt;option label="" value="" /&gt;
            #foreach($obs in $services.query.xwql("select doc.title, doc.fullName from Document doc, doc.object(Demarches.Dashboard.Code.DashboardClass) as observatoire where doc.space &lt;&gt; 'Demarches.Dashboard.Code' order by observatoire.date desc").execute())
                &lt;option label="$escapetool.xml($obs[0])" value="$escapetool.xml($obs[1])" /&gt;
            #end
          &lt;/select&gt;
        &lt;/dd&gt;
      &lt;/dl&gt;
      &lt;div class='buttonwrapper'&gt;
        &lt;input type='submit' class='btn btn-primary' name='previewobs' value='Prévisualisation' /&gt;
      &lt;/div&gt;
    &lt;/form&gt;
  {{/html}}
#end
{{/velocity}}</content>
</xwikidoc>
