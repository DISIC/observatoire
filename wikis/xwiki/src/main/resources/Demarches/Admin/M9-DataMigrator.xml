<?xml version="1.1" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.3" reference="Demarches.Admin.M9-DataMigrator" locale="">
  <web>Demarches.Admin</web>
  <name>M9-DataMigrator</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <creationDate>1544396400000</creationDate>
  <parent>xwiki:Demarches.Admin.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <date>1544396400000</date>
  <contentUpdateDate>1544396400000</contentUpdateDate>
  <version>1.1</version>
  <title>M9-DataMigrator</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{velocity}}
{{info}}

This page contains a script aimed at migrating data in the frame of issues [[#551&gt;&gt;https://github.com/DISIC/wikidemarches/issues/551]] and [[#556&gt;&gt;https://github.com/DISIC/wikidemarches/issues/556]].

{{html clean="false"}}

#set ($limit = "$!request.limit")
#if ($limit == '')
  #set ($limit = 10)
#end
#set ($targetMinistry = "$!request.targetMinistry")
#if ($targetMinistry == '')
  #set ($targetMinistry = "MECT")
#end
&lt;form action="" method="post"&gt;
&lt;dl&gt;
  &lt;dt&gt;Query limit:&lt;/dt&gt;
  &lt;dd&gt;&lt;input type="text" name="limit" value="$limit"/&gt;
  &lt;dt&gt;New identifier for MCT / MTES&lt;/dt&gt;
  &lt;dd&gt;&lt;input type="text" name="targetMinistry" value="$targetMinistry"/&gt;
 &lt;/dl&gt;



&lt;button type="submit" class="btn btn-default" name="action" value="updateChamp" title="Property 'champ': update all demarches to 'national'"&gt;
  Update property "Démarche nationale / territoriale"&lt;/button&gt;
&lt;button type="submit" class="btn btn-default" name="action" value="updateMinisteres" title="Property 'ministeres': merge values 'MCT' and 'MTES'"&gt;
  Reaffect MCT/MTES&lt;/button&gt;
&lt;button class="btn btn-default" name="action" value="updateStatutDemat"
  title="Property 'statutDemat': compute value from existing values of property 'niveauDemat': set to 'oui' if niveauDemat contains 'formulaire' or 'teleprocedure'"&gt;
  Compute property "Peut-être réalisée en ligne complètement"&lt;/button&gt;
&lt;button class="btn btn-default" name="action" value="updateFranceConnect"
  title="Property 'franceConnect': compute value from existing values of property 'caracteristiquesDemat': set to 'oui' if caracteristiquesDemat contains 'franceconnect'"&gt;
  Compute property "FranceConnect"&lt;/button&gt;
&lt;button class="btn btn-default" name="action" value="updateAdapteMobile"
  title="Property 'adapteMobile': compute value from existing values of property 'caracteristiquesDemat': set to 'oui' if caracteristiquesDemat contains 'mobile'"&gt;
  Compute property "Adapté mobile"&lt;/button&gt;
&lt;button class="btn btn-default" name="action" value="updateApi"
  title="Property 'api': compute values from existing values of property 'caracteristiquesDemat'"&gt;
  Compute property "API"&lt;/button&gt;
&lt;button class="btn btn-default" name="action" value="updateDemarcheSimplifiee"
  title="Property 'demarcheSimplifiee': compute values from existing values of property 'caracteristiquesDemat'"&gt;
  Compute property "Démarche simplifiée"&lt;/button&gt;
&lt;button class="btn btn-default" name="action" value="updateDateMiseEnLigne"
  title="Property 'dateMiseEnLigne': if empty, update value from 'dateDemat'"&gt;
  Compute value for 'dateMiseEnLigne'&lt;/button&gt;
&lt;button class="btn btn-default" name="action" value="updateEmptyOrInexistentStaticListValueToNoInformation"
  title="Initialize 'no information' values"&gt;
  Initialize 'no information' values&lt;/button&gt;
&lt;button class="btn btn-default" name="action" value="removeDemarchesDeprecatedProperties"
  title="Remove demarches deprecated properties"&gt;
  Remove deprecated properties (to be executed last)&lt;/button&gt;
  
&lt;/form&gt;

{{/html}}
{{/info}}
{{/velocity}}

{{groovy}}

import org.xwiki.query.Query

class Service {

  def out, xwiki, context, services, actOnDatabase
  def logger
  def DEMARCHE_CLASS_NAME = "Demarches.Code.DemarchesClass"
  def DEMARCHE_TEMPLATE_NAME = "Demarches.Code.DemarchesTemplate"
  def DEMARCHE_CLASS_REFERENCE = services.model.resolveDocument(DEMARCHE_CLASS_NAME, 'current')
  def STATIC_LIST_NO_INFORMATION_VALUE = "nr"
  def BASE_HQL = "select distinct doc.fullName from XWikiDocument as doc, BaseObject as obj FROM_CLAUSE where obj.name = doc.fullName and obj.className = :demarcheClassName and doc.fullName &lt;&gt; :demarcheTemplateName WHERE_CLAUSE"
  def limit = 0
  def targetMinistry = ""

  Service(out, services, xwiki, context, targetMinistry, limit, actOnDatabase) {
    this.out = out
    this.services = services
    this.xwiki = xwiki
    this.context = context
    this.targetMinistry = targetMinistry
    this.limit = limit
    this.actOnDatabase = actOnDatabase
    this.logger = services.logging.getLogger("monavis.M9-MigrationScripts")
  }

  void println(message) {
    out.println(message)
  }

  Query computeQuery(fromClause, whereClause) {
    def hql = BASE_HQL.replace("FROM_CLAUSE", fromClause)
    hql = hql.replace("WHERE_CLAUSE", whereClause)
    def query = services.query.hql(hql)
    query.setLimit(limit)
    query.bindValue('demarcheClassName', DEMARCHE_CLASS_NAME)
    query.bindValue('demarcheTemplateName', DEMARCHE_TEMPLATE_NAME)
    return query
  }

  void printHeader(title, query) {
    println title
    println "=== Query ==="
    println "* Statement: {{{$query.statement}}}"
    for (parameter in query.getNamedParameters()) {
      println "* Parameter '$parameter.key': $parameter.value"
    }
    println "=== Results ==="
    if (actOnDatabase) {
      println "List of demarches that were updated:"
    } else {
      println "List of demarches that will get updated:"
    }
  }

  // Property "champ": update all values to "national"
  void updateChamp() {
    def query = computeQuery("", "")
    printHeader("== Property 'champ' value update to 'national' ==", query)
    def entries = query.execute()
    def counter = 0
    for (entry in entries) {
      def doc = xwiki.getDocument(entry, context).clone()
      def demarche = doc.getXObject(DEMARCHE_CLASS_REFERENCE)
      def value = demarche.getStringValue("champ")
      // Don't update the property value if it's already set to "national"
      if ("national" != value) {
        counter++
        println "|#${counter}|[[$doc.title&gt;&gt;$doc.fullName]]"
        if (actOnDatabase) {
          logger.warn("#{}: updateChamp for {}", counter, doc)
          demarche.set("champ", "national", context)
          xwiki.saveDocument(doc, "Mise à jour de la propriété 'Démarche nationale / territoriale' à 'national'", context)
        }
      }
    }
  }

  // Ministeres: merge MCT and MTES
  void updateMinisteres() {
    def query = computeQuery(", DBStringListProperty as prop join prop.list list", "and prop.id.id = obj.id and prop.id.name = :ministeresPropertyName and (list = 'Ministeres.MCT' or list = 'Ministeres.MTES')")
    printHeader("== Property 'ministeres': merging MCT and MTES into $targetMinistry ==", query)
    query.bindValue('ministeresPropertyName', "ministeres")
    def counter = 0
    def entries = query.execute()
    for (entry in entries) {
      counter++
      def doc = xwiki.getDocument(entry, context).clone()
      def demarche = doc.getXObject(DEMARCHE_CLASS_REFERENCE)
      def ministeres = demarche.getListValue("ministeres")
      println "|#$counter|[[$doc.title&gt;&gt;$doc.fullName]]"
      if (actOnDatabase) {
        ministeres.remove("Ministeres.MCT")
        ministeres.remove("Ministeres.MTES")
        ministeres.add("Ministeres." + targetMinistry.toString())
        logger.warn("#{}: Update ministeres for {}", counter, doc)
        demarche.set("ministeres", ministeres, context)
        xwiki.saveDocument(doc, "Réaffectation des ministères MCT et MTES au ministère $targetMinistry", context)
      }
    }
  }

  void propagateDbListProperty(whereClause, dbListPropertyName, targetPropertyName, propertyValue) {
    def query = computeQuery(", DBStringListProperty as prop join prop.list list", whereClause)
    query.bindValue("propertyName", dbListPropertyName)
    printHeader("== Property '$targetPropertyName' value update ==", query)
    def counter = 0
    def entries = query.execute()
    for (entry in entries) {
      counter++
      def doc = xwiki.getDocument(entry, context).clone()
      def demarche = doc.getXObject(DEMARCHE_CLASS_REFERENCE)
      println "|#$counter|[[$doc.title&gt;&gt;$doc.fullName]]"
      if (actOnDatabase) {
        logger.warn("#{}: Update property $targetPropertyName for {}", counter, doc)
        demarche.set(targetPropertyName, propertyValue, context)
        xwiki.saveDocument(doc, "Mise à jour de la propriété '$targetPropertyName'", context)
      }
    }
  }

  // En ligne entièrement : niveauDemat = formulaire or teleprocedure -&gt; true
  // (check that "teleservice" in the specification document means "teleprocedure")
  void updateStatutDemat() {
    propagateDbListProperty("and prop.id.id = obj.id and prop.id.name = :propertyName and (list = 'formulaire' or list = 'teleprocedure')", "niveauDemat", "statutDemat", "enLigneEntierement")
  }

  // caracteristiquesDemat:
  // - if franceconnect -&gt; propagate to "franceConnect" = "oui"
  // - if mobile -&gt; propagate to "adapteMobile" = "oui"
  // - apientreprises -&gt; propagate to "api" (but not apiparticuliers, see specification)
  // - demarchesimplifiee -&gt; propagate to demarcheSimplifiee
  void updateFranceConnect() {
    propagateDbListProperty("and prop.id.id = obj.id and prop.id.name = :propertyName and list = 'franceconnect'", "caracteristiquesDemat", "franceConnect", "oui")
  }

  void updateAdapteMobile() {
    propagateDbListProperty("and prop.id.id = obj.id and prop.id.name = :propertyName and list = 'mobile'", "caracteristiquesDemat", "adapteMobile", "oui")
  }

  void updateApi() {
    def query = computeQuery(", DBStringListProperty as prop join prop.list list", "and prop.id.id = obj.id and prop.id.name = :propertyName and list = 'apientreprises'")
    query.bindValue("propertyName", "caracteristiquesDemat")
    printHeader("== Property 'api' value update ==", query)
    def counter = 0
    def entries = query.execute()
    for (entry in entries) {
      counter++
      def doc = xwiki.getDocument(entry, context).clone()
      def demarche = doc.getXObject(DEMARCHE_CLASS_REFERENCE)
      println "|#$counter|[[$doc.title&gt;&gt;$doc.fullName]]"
      if (actOnDatabase) {
        logger.warn("#{}: Update api for {}", counter, doc)
        demarche.set("api", "apientreprises", context)
        xwiki.saveDocument(doc, "Mise à jour de la propriété 'API'", context)
      }
    }
  }

  void updateDemarcheSimplifiee() {
    propagateDbListProperty("and prop.id.id = obj.id and prop.id.name = :propertyName and list = 'demarchesimplifiee'", "caracteristiquesDemat", "demarcheSimplifiee", "oui")
  }

  void updateDateMiseEnLigne() {
    def query = computeQuery(", DateProperty as prop", "and prop.id.id = obj.id and prop.id.name = :propertyName")
    query.bindValue("propertyName", "dateDemat")
    printHeader("== Property 'dateDemat' ==", query)
    def entries = query.execute()
    def counter = 0
    for (entry in entries) {
      counter++
      def doc = xwiki.getDocument(entry, context).clone()
      def demarche = doc.getXObject(DEMARCHE_CLASS_REFERENCE)
      def dateDemat = demarche.getDateValue("dateDemat")
      def dateMiseEnLigne = demarche.getDateValue("dateMiseEnLigne")
      if (dateMiseEnLigne == null || dateMiseEnLigne.toString() == "") {
        println "|#$counter|[[$doc.title&gt;&gt;$doc.fullName]]"
        if (actOnDatabase) {
          logger.warn("#{}: Update dateMiseEnLigne for {}", counter, doc)
          demarche.set("dateMiseEnLigne", dateDemat, context)
          xwiki.saveDocument(doc, "Mise à jour de la propriété 'Date de mise en ligne'", context)
        }
      }
    }
  }

  // Initialize the following static lists to 'nr' (non renseigné) if value is empty or inexistent
  void updateEmptyOrInexistentStaticListValueToNoInformation() {
    def query = computeQuery("", "")
    printHeader("== Initialization to value 'nr' (non renseigné) ==", query)
    def demarcheClass = xwiki.getClass(DEMARCHE_CLASS_NAME, context)
    def propertiesWithNoInformationValueOption = []
    for (propertyName in demarcheClass.getPropertyNames()) {
      def property = demarcheClass.getField(propertyName)
      if (property instanceof com.xpn.xwiki.objects.classes.StaticListClass) {
        def keySet = property.getMap(context).keySet()
        if (keySet.contains('nr')) {
          propertiesWithNoInformationValueOption.add(property)
        }
      }
    }
    def entries = query.execute()
    def counter = 0
    for (entry in entries) {
      def doc = xwiki.getDocument(entry, context).clone()
      def demarche = doc.getXObject(DEMARCHE_CLASS_REFERENCE)
      counter++
      boolean saveIsNeeded = false
      println "|#${counter}|[[$doc.title&gt;&gt;$doc.fullName]]|((("
      for (property in propertiesWithNoInformationValueOption) {
        def value = demarche.getStringValue(property.name)
        if (value == null || value.trim().length() == 0) {
          println "* ${property.name} $value"
          demarche.set(property.name, STATIC_LIST_NO_INFORMATION_VALUE, context)
          saveIsNeeded = true
        }
      }
      println ")))"
      if (saveIsNeeded &amp;&amp; actOnDatabase) {
        logger.warn("#{}: Initialize values for {}", counter, doc)
        xwiki.saveDocument(doc, "Initialization de champs à la valeur 'non renseigné'", context)
      }
    }
  }

  void removeDemarchesDeprecatedProperties() {
    def query = computeQuery("", "")
    def demarcheClass = xwiki.getClass(DEMARCHE_CLASS_NAME, context)
    printHeader("== Remove deprecated properties from démarches pages ==", query)
    def entries = query.execute()
    def counter = 0
    for (entry in entries) {
      counter++
      def doc = xwiki.getDocument(entry, context).clone()
      def demarche = doc.getXObject(DEMARCHE_CLASS_REFERENCE)
      def deprecatedProperties = demarcheClass.getDeprecatedObjectProperties(demarche)
      if (deprecatedProperties != null &amp;&amp; deprecatedProperties.size() &gt; 0) {
        println "|#$counter|[[$doc.title&gt;&gt;$doc.fullName]]"
      }
      if (actOnDatabase) {
        if (deprecatedProperties != null &amp;&amp; deprecatedProperties.size() &gt; 0) {
          for (deprecatedProperty in deprecatedProperties) {
            demarche.removeField(deprecatedProperty.name)
          }
          logger.warn("#{}}: Remove deprecated properties for {}", counter, doc)
          xwiki.saveDocument(doc, "Suppression des propriétés dépréciées", context)
        }
      }
    }
  }
}

def action = request.action
if (action != null) {
  def service =  new Service(out, services, xwiki.XWiki, xcontext.context, request.targetMinistry, new Integer(request.limit), new Boolean(request.actOnDatabase))
  service."$action"()
}
{{/groovy}}


{{velocity}}
#set ($action = "$!request.action")
#set ($actOnDatabase = "$!request.actOnDatabase")
#if ($action != '' &amp;&amp; $actOnDatabase == '' &amp;&amp; $action != 'listDemarchesWithDateDemat')
  {{info}}

  {{html clean="false"}}
  &lt;form action="" method="post"&gt;
  &lt;input type="hidden" name="actOnDatabase" value="true"/&gt;
  &lt;input type="hidden" name="limit" value="$!request.limit"/&gt;
  &lt;input type="hidden" name="targetMinistry" value="$!request.targetMinistry"/&gt;
  &lt;button class="btn btn-default" name="action" value="$action"&gt;Confirm&lt;/button&gt;

  {{/html}}
  {{/info}}
#end
{{/velocity}}</content>
</xwikidoc>
