<?xml version="1.1" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.3" reference="Demarches.Dashboard.Code.DashboardTableSheet" locale="">
  <web>Demarches.Dashboard.Code</web>
  <name>DashboardTableSheet</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <creationDate>1544396400000</creationDate>
  <parent>Demarches.Dashboard.Code.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <date>1544396400000</date>
  <contentUpdateDate>1544396400000</contentUpdateDate>
  <version>1.1</version>
  <title>Data observatoire #if($doc.name!='DashboardTableSheet')$doc.title#end</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{velocity}}
#set($discard = $xwiki.ssx.use('Demarches.WebHome'))
#set($discard = $xwiki.jsfx.use("js/xwiki/table/tablefilterNsort.js", true))
#set($discard = $xwiki.ssfx.use("js/xwiki/table/table.css"))
{{/velocity}}

{{groovy}}
import groovy.json.JsonSlurper;
import java.util.HashMap;

JsonSlurper jsonParser = new JsonSlurper();

def properties = ['id', 'title', 'statutDemat', 'avisCount', 'satisfactionIndex', 'ministere', 'groupes', 'direction', 'dateMiseEnLigne', 'volumetrie', 'pourcentageRecoursVoieDematerialisee', 'franceConnect', 'adapteMobile', 'qualiteSupport', 'urlScore', 'urlDemarche', 'ditesLeNousUneFois', 'categoriesPublics', 'rgaaCompliancyLevel', 'accessibilityScore'];

def propertyNames = new HashMap();
propertyNames.put('id', "Id");
propertyNames.put('direction' , "Direction");
propertyNames.put('title', services.localization.render("dashboard.table.demarche").replace("&lt;br/&gt;", ""));
propertyNames.put('ministere', services.localization.render("dashboard.table.ministry").replace("&lt;br/&gt;", ""));
propertyNames.put('groupes', services.localization.render("dashboard.table.group").replace("&lt;br/&gt;", ""));
propertyNames.put('statutDemat', services.localization.render("dashboard.table.digitalization").replace("&lt;br/&gt;", ""));
propertyNames.put('satisfactionIndex', services.localization.render("dashboard.table.satisfaction").replace("&lt;br/&gt;", ""));
propertyNames.put('adapteMobile', services.localization.render("dashboard.table.mobile").replace("&lt;br/&gt;", ""));
propertyNames.put('qualiteSupport', services.localization.render("dashboard.table.support").replace("&lt;br/&gt;", ""));
propertyNames.put('urlScore', services.localization.render("dashboard.table.performance").replace("&lt;br/&gt;", ""));
propertyNames.put('franceConnect', services.localization.render("dashboard.table.france-connect").replace("&lt;br/&gt;", ""));
propertyNames.put('accessibilityScore', services.localization.render("dashboard.table.accessibility").replace("&lt;br/&gt;", ""));
propertyNames.put('ditesLeNousUneFois', services.localization.render("dashboard.table.tell-us-once").replace("&lt;br/&gt;", ""));
propertyNames.put('dateMiseEnLigne', services.localization.render("dashboard.table.open-date").replace("&lt;br/&gt;", ""));
propertyNames.put('volumetrie', services.localization.render("dashboard.table.volumetry").replace("&lt;br/&gt;", ""));
propertyNames.put('pourcentageRecoursVoieDematerialisee', services.localization.render("dashboard.table.digitalized-usage-percent").replace("&lt;br/&gt;", ""));
propertyNames.put('avisCount', services.localization.render("dashboard.table.avis-count").replace("&lt;br/&gt;", ""));
propertyNames.put('urlDemarche', services.localization.render("dashboard.table.url-demarche").replace("&lt;br/&gt;", ""));
propertyNames.put('categoriesPublics', services.localization.render("dashboard.table.categories-publics").replace("&lt;br/&gt;", ""));
propertyNames.put('rgaaCompliancyLevel', services.localization.render("dashboard.table.rgaa-compliancy-level").replace("&lt;br/&gt;", ""));


def propWithValues = ['dateMiseEnLigne', 'volumetrie', 'pourcentageRecoursVoieDematerialisee', 'franceConnect', 'adapteMobile', 'avisCount', 'satisfactionIndex', 'urlScore', 'ditesLeNousUneFois', 'categoriesPublics', 'rgaaCompliancyLevel', 'accessibilityScore'];


println "(% class='grid sortable filterable doOddEven' id='obstable' %)";
for (def p in properties) {
  print "(% class='sortHeader'%)|=";
  if (propertyNames.get(p)) {
    print propertyNames.get(p);
  } else {
    print p;
  }
}
println "";
parsedFile = jsonParser.parse(doc.getAttachment('data.json').getContentInputStream());
data = parsedFile.get('data');
for ( Object aObject : data) {
  for (def p in properties) {
    value = "";
    value = aObject.get(p);
    if (propWithValues.contains(p)) {
      value = value.get('display');
      if (p.equals('avisCount')) {
        value = "" + value;
        value = value.replaceAll("[^A-Za-z0-9]", "");
      }
    }
    if (p.equals('id')) {
      value = "[[" + value.substring(10) + "&gt;&gt;" + value + "]]";
    }
    print "|" + value;
  }
  println "";
}
{{/groovy}}</content>
</xwikidoc>
