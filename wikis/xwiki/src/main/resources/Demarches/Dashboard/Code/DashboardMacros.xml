<?xml version="1.1" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.3" reference="Demarches.Dashboard.Code.DashboardMacros" locale="">
  <web>Demarches.Dashboard.Code</web>
  <name>DashboardMacros</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <creationDate>1569247830000</creationDate>
  <parent>xwiki:Demarches.Dashboard.Code.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <date>1570717182000</date>
  <contentUpdateDate>1570717182000</contentUpdateDate>
  <version>1.1</version>
  <title/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>false</hidden>
  <content>{{velocity output="false"}}
#set ($DEMARCHE_CLASS_ID = 'Demarches.Code.DemarchesClass')
#set ($MINISTERE_CLASS_ID = 'Ministeres.Code.MinisteresClass')
#set ($DIRECTION_CLASS_ID = 'Directions.Code.DirectionsClass')
#set ($AVIS_CLASS_ID = 'Avis.Code.AvisClass')
#set ($DEMARCHE_SHEET = 'Demarches.Code.DemarchesSheet')
#set ($DASHBOARD_CLASS_ID = 'Demarches.Dashboard.Code.DashboardClass')
#set ($DASHBOARD_SHEET = 'Demarches.Dashboard.Code.DashboardSheet')
#set ($LIVE_DASHBOARD_ID = 'observatoire.en-direct.WebHome')

## Gets the published dashboards order by date descendant, except the live dashboard
#macro (getPublishedDashboards)
  #set ($hql = "select distinct obj.name from BaseObject obj, StringProperty as status, DateProperty as date where obj.className = '$DASHBOARD_CLASS_ID' and status.id.id = obj.id and status.id.name = 'status' and status.value = 'published' and date.id.id = obj.id and date.id.name = 'date' and obj.name not like :template and obj.name &lt;&gt; :live order by date.value desc")
  #set ($publishedDashboards = $services.query.hql($hql).bindValue('template', '%DashboardTemplate%').bindValue('live', $LIVE_DASHBOARD_ID).execute())
#end

## Gets the dashboard with status = 'published' and with the most recent value for property 'date'
#macro (getCurrentDashboard)
  #getPublishedDashboards()
  #if ($publishedDashboards.size() &gt; 0)
    #set ($currentDashboard = $publishedDashboards.get(0))
  #end
#end

## Gets top demarches identifiers and computes dashboard data for these demarches at the dashoard date
#macro (computeDashboardData $limit)
  #if ("$!limit" == '') #set ($limit = 0) #end
  #set ($data = [])
  ## Handle the case where just one demarche is requested, from the dashboard table editor
  #if ("$!request.id" != '')
    #set ($entries = [$request.id])
  #else
    ## Get all top demarches
    #set ($hql = "select distinct obj.name from BaseObject obj, IntegerProperty as prop where obj.className = '$DEMARCHE_CLASS_ID' and prop.id.id = obj.id and prop.id.name = 'top' and prop.value = 1")
    #set ($entries = $services.query.hql($hql).setLimit($limit).execute())
  #end
  #set ($dashboard = $doc.getObject($DASHBOARD_CLASS_ID))
  #set ($dashboardDate = $dashboard.getValue('date'))
  #if ("$!dashboardDate" != '')
    #set ($formattedDashboardDate = $datetool.format('yyyy-MM-dd',$dashboardDate))
  #end
  #foreach ($entry in $entries)
    #computeDemarcheData($entry, $dashboardDate, $data)
  #end
  #set ($map = { "data": $data, "metadata": {"date": "$!formattedDashboardDate"}})
  #set ($json = $jsontool.serialize($map))
#end

## Computes the demarche data of given demarche for the given date as far as avis statistics are concerned, and adds the result to the given parameter "data"
#macro (computeDemarcheData $demarcheId $dashboardDate $data)
  #set ($page = $xwiki.getDocument($demarcheId))
  #set ($obj = $page.getObject($DEMARCHE_CLASS_ID))
  #set ($ministereIds = $obj.getValue('ministeres'))
  #set ($ministereName = '')
  #if ($ministereIds.size() &gt; 0)
    #set ($ministerePage = $xwiki.getDocument($ministereIds.get(0)))
    #set ($ministereObject = $ministerePage.getObject($MINISTERE_CLASS_ID))
    #if ($ministereObject)
      #set ($ministereName = $!ministereObject.getValue('nom'))
    #end
  #end
  #set ($directionId = $obj.getValue('direction'))
  #set ($directionName = '')
  #if ($directionId)
    #set ($directionPage = $xwiki.getDocument($directionId))
    #set ($directionObject = $directionPage.getObject($DIRECTION_CLASS_ID))
    #if ($directionObject)
      #set ($directionName = $directionObject.getValue('nom'))
    #end
  #end
  #set ($statutDemat = $obj.get('statutDemat'))
  ##set ($avisStats = $page.getObject($AVIS_CLASS_ID))
  ##set ($avisCountValue = $avisStats.getValue('occurrences'))
  ##set ($satisfactionIndex = $avisStats.getValue('moyenne'))
  #if ("$!dashboardDate" != '')
    #set ($maxDate = $dashboardDate)
  #else
    #set ($maxDate = $datetool.getDate())
  #end
  ## Compute statistics at the dashboard date
  #set ($hql = 'select count(*), avg(score.value) from XWikiDocument as doc, BaseObject as avis, IntegerProperty as score, StringProperty as demarche where avis.name = doc.fullName and avis.className = :className and avis.id = score.id.id and score.id.name = :scoreProperty and demarche.id.id = avis.id and demarche.id.name = :demarcheProperty and demarche.value = :demarche and score.value &gt; 0 and doc.creationDate &lt;= :date')
  #set ($avisStats = $services.query.hql($hql).bindValue('className', $AVIS_CLASS_ID).bindValue('scoreProperty', 'score').bindValue('demarcheProperty', 'demarche').bindValue('demarche', $demarcheId).bindValue('date', $maxDate).execute())
  ## Reinitialize avisCountValue since the Velocity scope is global
  #set ($avisCountValue = $NULL)
  #if ($avisStats.size() &gt; 0)
    #set ($stats  = $avisStats[0])
    #set ($avisCountValue = $stats[0])
    #set ($satisfactionIndex = $stats[1])
  #end
  #if ($avisCountValue &amp;&amp; $avisCountValue &gt;= 100)
    #set ($avisCountDisplay = $numbertool.integer($avisCountValue))
    #set ($satisfactionIndexPercent = $mathtool.mul($mathtool.sub($satisfactionIndex, 1), 50))
    #set ($satisfactionIndexValue = ${mathtool.round($satisfactionIndexPercent)})
    #set ($satisfactionIndexDisplay = "$satisfactionIndexValue %")
  #elseif ($statutDemat == 'Non')
    #set ($satisfactionIndexValue = -2)
    #set ($satisfactionIndexDisplay = 'n/a')
    #set ($avisCountDisplay = $avisCountValue)
    #set ($avisCountValue = 0)
  #else
    #set ($satisfactionIndexValue = -1)
    #set ($avisCountDisplay = $avisCountValue)
    #set ($avisCountValue = 0)
    #set ($satisfactionIndexDisplay = 'Ã€ venir')
  #end
  #set ($volumetrie = $obj.getValue('volumetrie'))
  #set ($volumetrieDisplay = $obj.get('volumetrie'))
  #if (!$volumetrie)
    #set ($volumetrie = 0)
  #else
    #set ($volumetrieDisplay = $numbertool.integer($volumetrie))
  #end
  #set ($percentDematDisplay = $obj.get("pourcentageRecoursVoieDematerialisee"))
  #set ($idx = $percentDematDisplay.indexOf('%'))
  #if ($idx &gt; 0)
    #set ($percentDemat = $util.parseFloat($percentDematDisplay.replace('%','').replace(',','.').trim()))
    #set ($percentDematRounded = $mathtool.round($percentDemat))
    #set ($percentDematDisplay = "$percentDematRounded %")
  #else
    #set ($percentDemat = $mathtool.sub(0,$percentDematDisplay.hashCode()))
    #if ($percentDematDisplay == "n/a")
      #set ($percentDemat = -2)
    #elseif ($percentDematDisplay == "n/c")
      #set ($percentDemat = -1)
    #end
  #end
  ## If statutDemat is "Oui", then dateMiseEnLigneDispay should be "Ouvert"
  ## Else: if a date is present, display it, otherwise display "n/c"
  #if ($statutDemat == 'Oui')
    #set ($dateMiseEnLigneDisplay = 'Ouvert')
    #set ($dateMiseEnLigne = 10)
  #else
    #set ($dateMiseEnLigne = $obj.getValue('dateMiseEnLigne'))
    #if ("$!dateMiseEnLigne" != '')
      ## Add a hashcode, because we want to differentiate for example "2019" from "12/2019" while both have the same dateMiseEnLigne set to "12/2019"
      #set ($dateMiseEnLigneDisplay = $obj.get('dateMiseEnLigne'))
      #set ($dateMiseEnLigneTexte = $obj.getValue('dateMiseEnLigneTexte'))
      #set ($s = "$!dateMiseEnLigneTexte")
      #set ($h = $s.hashCode())
      #set ($dateMiseEnLigne = $mathtool.add($dateMiseEnLigne.getTime(), $h))
      #if ("$!dateMiseEnLigneTexte" != '')
        #set ($dateMiseEnLigneDisplay = $dateMiseEnLigneTexte)
      #end
    #else
      #set ($dateMiseEnLigneDisplay = 'n/c')
      #set ($dateMiseEnLigne = 0)
    #end
  #end
  #set ($franceConnectValue = $obj.getValue('franceConnect'))
  #set ($franceConnectDisplay = $obj.get('franceConnect'))
  #if ($statutDemat == 'Non' &amp;&amp; $franceConnectValue == 'na')
    #set ($franceConnectDisplay = '-')
  #end
  #set ($adapteMobileValue = $obj.getValue('adapteMobile'))
  #set ($adapteMobileDisplay = $obj.get('adapteMobile'))
  #if ($statutDemat == 'Non' &amp;&amp; $adapteMobileValue == 'na')
    #set ($adapteMobileDisplay = '-')
  #end
  #set ($urlScore = $obj.get('urlScore'))
  #set ($urlScoreValue = $urlScore)
  #if ($urlScore == 'n/a')
    #set ($urlScoreValue = -100)
  #elseif ($urlScore == 'n/c')
    #set ($urlScoreValue = -50)
  #end
  #set ($tellUsOnce = $obj.getValue('tellUsOnce'))
  #set ($tellUsOnceDisplay = $obj.get('tellUsOnce'))
  #set ($discard = $data.add(
    {
      "id": $page.fullName,
      "title": $page.displayTitle,
      "statutDemat": $statutDemat,
      "ministere": $ministereName,
      "groupes": $obj.get('groupesExternes'),
      "direction": $directionName,
      "dateMiseEnLigne": {
        "display": $dateMiseEnLigneDisplay,
        "value": $dateMiseEnLigne
      },
      "volumetrie": {
        "display": $volumetrieDisplay,
        "value": $volumetrie
        },
      "pourcentageRecoursVoieDematerialisee": {
        "display": $percentDematDisplay,
        "value": $percentDemat
      },
      "franceConnect": {
        "display": $franceConnectDisplay,
        "value": $franceConnectValue
      },
      "adapteMobile": {
        "display": $adapteMobileDisplay,
        "value": $adapteMobileValue
      },
      "qualiteSupport": $obj.get('qualiteSupport'),
      "avisCount": {
        "value": $avisCountValue,
        "display": $avisCountDisplay
       },
      "satisfactionIndex": {
        "display": $satisfactionIndexDisplay,
        "value": $satisfactionIndexValue
      },
      "urlScore": {
        "display": $urlScore,
        "value": $urlScoreValue
      },
      "urlDemarche": "$!obj.getValue('urlDemarche')",
      "tellUsOnce": {
          "value": $tellUsOnce,
          "display": $tellUsOnceDisplay
        }
    }))
#end

#macro (writeJson)
  ## Code copied from template/macros.vm:jsonResponse in XWiki 11.1
  #set ($discard = $response.setContentType('application/json'))
  #set ($characterEncoding = 'utf-8')
  #set ($discard = $response.setCharacterEncoding($characterEncoding))
  #set ($discard = $response.writer.write($json))
  #set ($discard = $response.setContentLength($json.getBytes($characterEncoding).size()))
  #set ($discard = $response.flushBuffer())
  #set ($discard = $xcontext.setFinished(true))
#end

#macro (attachJson)
  #set ($discard = $doc.addAttachment("data.json", $json.getBytes()))
  #set ($discard = $doc.save("Generate and attach file 'data.json'"))

  {{info}}
  $services.localization.render('dashboard.generation.done')
  {{/info}}

#end
{{/velocity}}</content>
</xwikidoc>
