<?xml version="1.1" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.3" reference="Demarches.Dashboard.Code.DashboardSheet" locale="">
  <web>Demarches.Dashboard.Code</web>
  <name>DashboardSheet</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <creationDate>1544396400000</creationDate>
  <parent>xwiki:Demarches.Dashboard.Code.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <date>1544396400000</date>
  <contentUpdateDate>1544396400000</contentUpdateDate>
  <version>1.1</version>
  <title/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{include reference="Demarches.Dashboard.Code.DashboardMacros"/}}

{{velocity}}
#set($displayDocTitle = false)
#set($displayTitleContentSeparator = false)
#set ($dashboard = $doc.getObject($DASHBOARD_CLASS_ID))
## The Demarche sheet SSX and JSX are needed for editing a démarche in a modal dialog
#set ($discard = $xwiki.ssx.use($DEMARCHE_SHEET))
#set ($discard = $xwiki.ssx.use($DASHBOARD_SHEET))
#set ($discard = $xwiki.ssx.use('Demarches.Code.MontserratWebfontSSX'))
#set($tableHeaderElements = {
  'demarche' : '',
  'ministry' : '',
  'group' : '',
  'digitalization' : 'cloud.svg',
  'satisfaction' : 'smiley.svg',
  'mobile' : 'mobile.svg',
  'support' : 'support.svg',
  'performance' : 'watch.svg',
  'france-connect' : 'user.svg',
  'accessibility' : 'accessibility.svg',
  'tell-us-once' : 'briefcase.svg'
})

## Dashboard header ##
(% class='row observatoire-explanation' %)(((
  (% class='container' %)(((
    (% class='document-header'%) (((
      (% class='document-info'%) (((
        (% id='document-title' %)(((
          = $services.localization.render("dashboard.title") =
        )))
      )))
    )))
  )))
  #if ($hasAdmin)
    (%class='dashboard-container'%)(((
      {{html clean='false'}}
      &lt;ul class="nav nav-tabs nav-dashboard"&gt;
        &lt;li class="nav-view-dashboard-tab #if($xcontext.action == "view") active #end"&gt;&lt;a data-toggle="tab" href="#view-dashboard"&gt;Tableau&lt;/a&gt;&lt;/li&gt;
        &lt;li class="nav-view-details-tab #if($xcontext.action == "edit") active #end"&gt;&lt;a data-toggle="tab" href="#view-details"&gt;Détails&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
      {{/html}}
    )))
  #end
)))
##
##
(%class='tab-content'%)(((
  (%id="view-dashboard" class="tab-pane fade #if($xcontext.action=='view')in active#end"%)(((
    (%class='row download-share'%)(((
      (% class='dashboard-container' %)(((
        (%class='row'%)(((
          (%class='col-xs-12 col-md-6 downloadcol'%) (((
            (% class="download" %)
            #set ($dataURL = $dashboard.getProperty('dataURL').value)
            #if ("$!dataURL" != '')
              [[(% class='fa fa-database'%) (%%) $services.localization.render('dashboard.dataurl')&gt;&gt;$dataURL]] ## it's important to have a comment at the end of this line, to eat the newline that would be added otherwise between the 2 links
            #end
            #set ($pdf = $dashboard.getValue('pdf'))
            #if ("$!pdf" != '')
              #set ($pdfFile = $doc.getAttachment($pdf))
              #set ($size = $pdfFile.getLongSize())
              #set ($size = $mathtool.div($size, 1000))
              #set ($size = $mathtool.round($size))
              [[(% class='fa fa-cloud-download'%) (%%) $services.localization.render('dashboard.download-pdf', $size)&gt;&gt;path:$doc.getAttachmentURL($pdfFile.filename)]]
            #end
          )))
          (%class='col-xs-12 col-md-6 sharecol'%) (((
            #set ($socialNetworks = [{
              "icon": "twitter",
              "url": "https://twitter.com/intent/tweet?url="
            },
            {
              "icon": "linkedin",
              "url": "https://www.linkedin.com/shareArticle?mini=true&amp;url="
            },
            {
              "icon": "facebook",
              "url": "https://www.facebook.com/sharer.php?u="
            },
            {
              "icon": "envelope",
              "url": "mailto:?subject=Observatoire de la dématérialisation&amp;body="
            }])
            {{html clean="false"}}
            #set ($url = $escapetool.xml($doc.getExternalURL()))
            $services.localization.render('dashboard.share.label') :#foreach ($socialNetwork in $socialNetworks) &lt;a href="$socialNetwork.url$url" class="social-network" target="_blank" aria-label="$services.localization.render("dashboard.social-network.${socialNetwork.icon}")"&gt;&lt;span class="fa fa-$socialNetwork.icon" aria-hidden="true"&gt;&lt;/span&gt;&lt;/a&gt; #end
            {{/html}}
          )))
        )))
      )))
    )))
    (%class='row table-tools'%)(((
      (% class='dashboard-container' %)(((
        (% class='row'%)(((
          (%class='col-xs-12 col-sm-6 col-sm-push-6 dashboard-selector'%)(((
            {{html clean="false"}}
            &lt;div class="btn-group controls"&gt;
              &lt;button type="button" class="btn #if($doc.fullName == $LIVE_DASHBOARD_ID)btn-default #else btn-primary #end dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"&gt;
              #if ($doc.fullName == $LIVE_DASHBOARD_ID)$services.localization.render('dashboard.previous-data')#else${doc.title}#end&amp;nbsp;&lt;span class="caret"&gt;&lt;/span&gt;
              &lt;/button&gt;
              #getPublishedDashboards()
              &lt;ul class="dropdown-menu"&gt;
                #foreach ($entry in $publishedDashboards)
                  #set ($page = $xwiki.getDocument($entry))
                  &lt;li&gt;
                    &lt;a href="$xwiki.getURL($entry)"&gt;$page.title&lt;/a&gt;
                  &lt;/li&gt;
                  #end
              &lt;/ul&gt;
              #if ($hasAdmin || $isAdministrateurMinisteriel)
               &lt;a href="$xwiki.getURL($LIVE_DASHBOARD_ID)" class='btn #if($doc.fullName == $LIVE_DASHBOARD_ID)btn-primary #else btn-default #end'&gt;$services.localization.render('dashboard.live.name')&lt;/a&gt;
              #end
            &lt;/div&gt;
            {{/html}}
          )))
          (%class='col-xs-12 col-sm-6 col-sm-pull-6 dashboard-filters'%)(((
            {{html clean='false'}}
              &lt;div class="dashboard-filter-sort"&gt;
                &lt;button type='button' class='btn btn-default' id='top-demarches-filters-toggle'&gt;&lt;span class='fa fa-filter'&gt;&lt;/span&gt; $services.localization.render('dashboard.tools.filters.label')&lt;/button&gt;
                &lt;div class="btn-group controls"&gt;
                  #set($sortButtonLabel = $services.localization.render('dashboard.tools.sort.label'))
                  #set($otherSortButtonLabel = $services.localization.render('dashboard.tools.sort.label.other'))
                  &lt;button type='button' class='btn btn-default dropdown-toggle' id='top-demarches-sort-toggle' data-toggle="dropdown" aria-haspopup="true" aria-expanded="false" data-default-label="$escapetool.xml($sortButtonLabel)" data-othersort-label="$escapetool.xml($otherSortButtonLabel)"&gt;${sortButtonLabel}&amp;nbsp;&lt;span class="caret"&gt;&lt;/span&gt;&lt;/button&gt;
                  &lt;ul class="dropdown-menu"&gt;
                    #set($sortProps = {'statutDemat' : 'desc', 'satisfactionIndex' : 'desc', 'avisCount' : 'desc', 'volumetrie' : 'desc', 'accessibilityScore' : 'desc'})
                    #foreach($sortProp in $sortProps.entrySet())
                      #set($thLabel = $services.localization.render("dashboard.tools.sort.label.${sortProp.key}"))
                      #set($sortLabel = $services.localization.render('dashboard.tools.sort.label') + " " + $thLabel.toLowerCase() + " - " + $services.localization.render("dashboard.tools.sort.label.${sortProp.value}"))
                      &lt;li&gt;&lt;a href="#sort-${$sortProp.key}-${sortProp.value}" class="observatoire-sort" data-key="$sortProp.key" data-order='$sortProp.value' aria-label="$sortLabel" title="$sortLabel"&gt;$thLabel&lt;/a&gt;&lt;/li&gt;
                    #end
                  &lt;/ul&gt;
                &lt;/div&gt;
              &lt;/div&gt;
            {{/html}}
          )))
        )))
      )))
    )))

    (%class='row table-rows'%)(((
      (% class='dashboard-container' %)(((
        #if ($xcontext.action == 'view')
          ## Dashboard table ##
          #set ($discard = $xwiki.jsx.use($DEMARCHE_SHEET))
          #set ($discard = $xwiki.jsx.use($DASHBOARD_SHEET, {'minify': false, 'timestamp': $datetool.systemTime, 'pageId': $doc.fullName}))

          {{html clean="false" wiki="false"}}
          &lt;table id="top-demarches" class="hover" style="width:100%"&gt;
            &lt;thead&gt;
              &lt;tr&gt;
                #foreach($thElt in $tableHeaderElements.entrySet())
                  #set($icon = $thElt.value)
                  #set($thLabel = $services.localization.render("dashboard.table.${thElt.key}"))
                  &lt;th scope="col"&gt;
                    #if("$!icon" != '')
                      &lt;span class='thead-icon'&gt;&lt;img src="$xwiki.getAttachmentURL('Demarches.Code.WikiDemarchesTheme', $icon)" alt='$escapetool.xml($thLabel.replaceAll('&lt;br/&gt;', ''))' /&gt;&lt;/span&gt;
                    #end
                    &lt;span class='thead-label'&gt;$thLabel&lt;/span&gt;
                  &lt;/th&gt;
                #end
                &lt;th&gt;&lt;/th&gt;
              &lt;/tr&gt;
            &lt;/thead&gt;
          &lt;/table&gt;
          {{/html}}

          {{id name='notes' /}}

          $!dashboard.display('notes', 'view')
        #end
      )))
    )))
  )))

  #if ("$!request.action" == 'json' &amp;&amp; $services.csrf.isTokenValid($request.token))
    #computeDashboardData(0)
    #if ("$!request.live" == 1)
      #writeJson()
    #else
      #attachJson()
    #end
  #end

  ##
  ## Dashboard metadata view / edit ##
  #if ($hasAdmin)
    (%id="view-details" class="tab-pane fade #if($xcontext.action=='edit') in active #end"%)(((
      (% class='row xform' %)(((
        (% class='dashboard-container' %)(((
            #if ($xcontext.action != 'edit')
              (% class='row document-header' %)(((
                (% class='document-menu col-xs-12 col-md-5 col-md-push-7' %)(((
                  {{html clean='false' wiki='false'}}
                  #template("menus_content.vm")
                  {{/html}}
                )))
              )))
            #end
            #set ($class = $xwiki.getClass($DASHBOARD_CLASS_ID))
            #foreach($property in $class.properties)
              |=(% style="width: 20%" %)$doc.displayPrettyName($property.name, $dashboard)|(((
              $dashboard.display($property.name, $xcontext.action)
              #if ($xcontext.action == 'edit')(% class="xHint" %)$services.localization.render("${DASHBOARD_CLASS_ID}_${property.name}_hint")(% %)#end
            )))
            #end
            #if ($xcontext.action == 'view')
              |=Pièce jointe|(((
              #if ($doc.getAttachment('data.json') != $NULL)
                [[attach:data.json]]
              #else
                Aucune pièce jointe
              #end
              )))
            #end

            #if ($doc.getObject($DASHBOARD_CLASS_ID) != $NULL &amp;&amp; $xcontext.action == 'view')

              {{info}}
              $services.localization.render('dashboard.generation.hint')

               {{html wiki="false" clean="false"}}
               &lt;form action="" method="post"&gt;
                 &lt;button class="btn btn-default" name="action" value="json"&gt;$services.localization.render('dashboard.generate-data')&lt;/button&gt;
                 &lt;input type="hidden" name="token" value="$!{services.csrf.getToken()}" /&gt;
               &lt;/form&gt;
               {{/html}}
              {{/info}}

               #if ("$!info" != '')
                 $info
               #end
            #end
        )))
      )))
    )))
  #end
)))
{{/velocity}}</content>
  <object>
    <name>Demarches.Dashboard.Code.DashboardSheet</name>
    <number>0</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>33e13e17-bc95-4a72-b3f8-507fc776bf7e</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>require.config({
    paths: {
       'css': '$services.webjars.url('require-css/0.1.7/css.js')',
       'domReady': '$services.webjars.url('requirejs-domready/2.0.1/domReady.js')',
       'datatables.net': '$services.webjars.url('datatables/1.10.19/js/jquery.dataTables.js')',
       'datatables-css': '$services.webjars.url('datatables/1.10.19/css/jquery.dataTables.min')',
       'datatables-fixedheader': '$services.webjars.url('datatables-fixedheader/3.1.4/js/dataTables.fixedHeader.js')',
       'datatables-fixedheader-css': '$services.webjars.url('datatables-fixedheader/3.1.4/css/fixedHeader.dataTables')'
    }
});

var XWiki = (function (XWiki) {

  function computeBadgeStyle(value) {
    if (typeof value === 'string' || value instanceof String) {
      value = value.toLowerCase();
      switch (value) {
        case 'oui':
          return "success";
        case 'non':
          return "danger";
        case 'partiel':
          return "warning";
        case 'expérimentation':
          return 'info';
        case 'bêta':
          return 'info';
        case 'déploiement partiel':
          return 'warning';
        default:
          return "default";
      }
    } else {
      return 'Erreur de formatage (' + value + ')';
    }
  }

  function computeBadgeStyleSatisfactionIndex(value) {
    if (!isNaN(value)) {
      if (value &gt;= 80) {
        return 'success';
      } else if (value &gt;= 60) {
        return "warning";
      } else {
        return "danger";
      }
    } else {
      return "default";
    }
  }


  function computeBadgeStyleDitesLeNousUneFois(value) {
    if (!isNaN(value)) {
      if (value == -1) {
        return "default";
      } else if (value == -2) {
        return "default";
      } else if (value == 0 || value == 1) {
        return "success";
      } else if (value &lt; 5) {
        return "warning";
      } else {
        return "danger";
      }
    } else {
      return "default";
    }
  }

  function computeUrlScoreBadgeStyle(value) {
    if (isNaN(value))
      return "default";
    if (value &gt; 7)
      return "success";
    if (value &gt;= 4 &amp;&amp; value &lt;= 7)
      return "warning";
    return "danger";
  }

  function format(value, display, badgeStyleFunction, replaceNa, demarcheId) {
    if (typeof display === 'string' || display instanceof String) {
      var badgeStyle;
      if (display.indexOf('%') &gt; 0) {
        badgeStyle = badgeStyleFunction.apply(this, [value]);
      } else {
        badgeStyle = badgeStyleFunction.apply(this, [display]);
      }
      if (display) {
        if (replaceNa) {
          display = display.replace("n/a", "-");
        }
        display = display.replace("n/c", "Non disponible");
      }
      /*if (value &amp;&amp; (value.indexOf('%') &gt; 0)) {
        return '&lt;span class="row-details-value"&gt;' + value + '&lt;/span&gt;';
      } else*/
      if (display &amp;&amp; display == '-') {
        return '&lt;span class="row-details-value"&gt;' + display + '&lt;/span&gt;';
      } else {
        return '&lt;span class="row-details-value"&gt;&lt;span class="label label-' + badgeStyle + '"&gt;' + display + '&lt;/span&gt;&lt;/span&gt;';
      }
    } else {
      return '&lt;span class="row-details-value"&gt;Erreur de formatage (' + display + ')&lt;/span&gt;';
    }
  }

  function addDetailsRow(data, withEditButton) {
    var output = '&lt;div class="row-details"&gt;&lt;ul&gt;';
      var dateMiseEnLigne = data.dateMiseEnLigne.display;
      if (dateMiseEnLigne != 'Ouvert') {
        if (dateMiseEnLigne == 'n/c')
          dateMiseEnLigne = 'Non disponible';
        output += '&lt;li&gt;&lt;span class="row-details-key"&gt;' + "$services.localization.render("dashboard.table.open-date")" + '&lt;/span&gt;' + dateMiseEnLigne + '&lt;/li&gt;';
      }
      output = output + '&lt;li&gt;&lt;span class="row-details-key"&gt;' + "$services.localization.render("dashboard.table.volumetry")" + '&lt;/span&gt;' + data.volumetrie.display + '&lt;/li&gt;';
      var pourcentage = data.pourcentageRecoursVoieDematerialisee.display;
      if (data.statutDemat != 'Non') {
        output = output + '&lt;li&gt;&lt;span class="row-details-key"&gt;' + "$services.localization.render("dashboard.table.digitalized-usage-percent")" + '&lt;/span&gt;' + pourcentage + '&lt;/li&gt;';
      }
      if (data.avisCount.value &gt;= 100) {
        var demarcheId = data.id;
        output = output + '&lt;li&gt;&lt;span class="row-details-key"&gt;' + "$services.localization.render("dashboard.table.avis-count")" + '&lt;/span&gt;' + data.avisCount.display + '&lt;/li&gt;';
      }
      if (data.urlDemarche &amp;&amp; data.urlDemarche.length &gt; 0 &amp;&amp; data.urlDemarche != 'n/a') {
        output = output + '&lt;li class="row-details-prop-urlDemarche"&gt;&lt;span class="row-details-key"&gt;' + "$services.localization.render("dashboard.table.url-demarche")" + '&lt;/span&gt;&lt;a href="' + data.urlDemarche + '"&gt;&lt;span class="link-desktop"&gt;' + data.urlDemarche + '&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;';
      }
      if (data.categoriesPublics &amp;&amp; data.categoriesPublics.display) {
        output = output + '&lt;li&gt;&lt;span class="row-details-key"&gt;' + "$services.localization.render("dashboard.table.categories-publics")" + '&lt;/span&gt;' + data.categoriesPublics.display + '&lt;/li&gt;';
      }
      if (data.rgaaCompliancyLevel != undefined &amp;&amp; data.rgaaCompliancyLevel.display != undefined &amp;&amp; data.accessibilityScore.value != undefined &amp;&amp; ['oui', 'partiel'].includes(data.accessibilityScore.value.toLowerCase()) ) {
        output = output + '&lt;li&gt;&lt;span class="row-details-key"&gt;' + "$services.localization.render("dashboard.table.rgaa-compliancy-level")" + '&lt;/span&gt;' + data.rgaaCompliancyLevel.display + '&lt;/li&gt;';
      }
      output = output + '&lt;/ul&gt;&lt;/div&gt;';
      if (withEditButton) {
        output += '&lt;div class="row-toolbar"&gt;&lt;a href="' + getURL(data.id, 'edit') + '#popup" class="row-edit-control" data-demarche-id=' + data.id + ' data-demarche-name="' + encodeURI(data.title) + '"&gt;&lt;i class="fa fa-pencil"&gt;&lt;/i&gt; ' + "$services.localization.render("dashboard.edit-entry")" + '&lt;/a&gt;&lt;/div&gt;';
      }
      output += '&lt;/div&gt;&lt;/div&gt;';
    return output;
  }

  function getPage(pageId) {
    var reference = XWiki.Model.resolve(pageId, XWiki.EntityType.DOCUMENT);
    return new XWiki.Document(reference);
  }

  function getURL(pageId, action) {
    return getPage(pageId).getURL(action);
  }

  function init() {
    require(['jquery', 'xwiki-meta', 'xwiki-events-bridge', 'datatables.net', 'css!datatables-css', 'datatables-fixedheader', 'domReady!'], function ($, xwikiMeta) {
      // Documentation: https://www.xwiki.org/xwiki/bin/view/Documentation/DevGuide/FrontendResources/ModalPopup/
      XWiki.widgets.XPopup = Class.create(XWiki.widgets.ModalPopup, {
       /** Default parameters can be added to the custom class. */
        defaultInteractionParameters : {
        },
       /** Constructor. Registers the key listener that pops up the dialog. */
        initialize : function($super, interactionParameters) {
         this.interactionParameters = Object.extend(Object.clone(this.defaultInteractionParameters), interactionParameters || {});
          // call constructor from ModalPopup with params content, shortcuts, options
          $super(
           this.createContent(this.interactionParameters),
            {
             "close" : { method : this.closeDialog, keys : ['ESC'] }
            },
            {
               displayCloseButton : true,
               backgroundColor : "#FFF",
               removeOnClose : true,
               verticalPosition : 'top',
               title : decodeURI(this.interactionParameters.title)
            }
          );
         this.showDialog();
        },
        /** Get the content of the modal dialog using ajax */
        createContent : function (data) {
          var content =  new Element('div', {'class': 'modal-popup'});
          var that = this;
          // get page content for the pageURL
          new Ajax.Request(data.editUrl, {
            method:'get',
            onSuccess: function(transport) {
              var response = transport.responseText || "no response text";
              var nodes = $($.parseHTML(response));
              // add div node with class 'main' so that styles defined in the skin CSS file apply (e.g. '.main panel-body')
              var main = $('&lt;div/&gt;').addClass('main');
              //main.append($('&lt;h2/&gt;').append(data.title));
              var form = $('&lt;form id="inline" method="post" action="' + data.saveUrl + '" class="withLock"/&gt;');

              form.append($('&lt;input/&gt;').attr('type', 'hidden').attr('name', 'template').val('some-template').get(0));
              form.append(nodes.get(0));
              form.find("input[name='async']").val('true');
              form.find("input[name='xvalidate']").val('0');
              #set ($csrf = $services.csrf.getToken())
              form.append($('&lt;input/&gt;').attr('type', 'hidden').attr('name', 'form_token').val("$csrf").get(0));
              // add buttons
              var saveButton = $('&lt;input/&gt;').addClass('btn btn-primary row-editor-save').attr('type', 'submit').attr('name', 'action_saveandcontinue').val('Enregistrer');
              saveButton.on('click', function(event) {
                event.preventDefault();
              });
              var closeButton = $('&lt;input/&gt;').addClass('btn btn-default row-editor-cancel').attr('type', 'submit').val('Annuler');
              closeButton.on('click', function(event) {
                //TODO: submit form to release lock
                event.preventDefault();
                that.closeDialog(event);
              });
              form.append(saveButton.get(0));
              form.append('&amp;nbsp;')
              form.append(closeButton.get(0));
              main.append(form.get(0));
              content.insert(main.get(0));
              // Remove event handlers that may have been previously registered by previous dialogs on xwiki:document:saved, so that
              // the update is performed only for the current data
              $(document).off("xwiki:document:saved");
              // Remove all observers on save so that only one ajax request gets fired
              document.stopObserving('xwiki:actions:save');
              $.getScript( "$xwiki.getSkinFile('js/xwiki/actionbuttons/actionButtons.js', true)", function( dataResult, textStatus, jqxhr ) {
                $(document).on("xwiki:document:saved", function(event) {
                  $(document).trigger("xwiki:demarche:updated", {id : data.id});
                  that.closeDialog(event);
                });
                return true;
              });
              },
              onFailure: function(){ content.insert('Une erreur s\'est produite lors du chargement du formulaire. Si le problème persiste, merci de contacter l\'administrateur de ce site.');
            }
          });
          return content;
        }
      });

      #set ($LIVE_DASHBOARD_ID = 'observatoire.en-direct.WebHome');
      #set ($pageId = $request.pageId)

      function getAvisStatisticsUrl(demarcheId) {
        var avisDatesQueryString = '';
        if (avisStartDate != undefined)
          avisDatesQueryString = avisDatesQueryString + '&amp;date-debut=' + avisStartDate;
        if (avisEndDate != undefined)
          avisDatesQueryString = avisDatesQueryString + '&amp;date-fin=' + avisEndDate;
        return getPage(demarcheId).getURL('view', 'view-mode=statistics' + avisDatesQueryString);
      }

      // Addition of a search function to the list of search functions for filtering on the ministère value.
      $.fn.dataTable.ext.search.push(
        function (settings, data, dataIndex ) {
          var selectedMinistere =  $('select[name="ministereSelect"]').val();
          var selectedPublicCategory =  $('select[name="publicCategorySelect"]').val();
          var ministere = data[1];
          var publicCategory = data[14];
          var keep1, keep2 = false;
          if (selectedMinistere === undefined || selectedMinistere == "tous" || ministere.indexOf(selectedMinistere) &gt;= 0) {
            keep1 = true;
          }
          if (selectedPublicCategory === undefined || selectedPublicCategory == "tous" || publicCategory.indexOf(selectedPublicCategory) &gt;= 0) {
            keep2 = true;
          }
          return keep1 &amp;&amp; keep2;
        }
      );

      // Source: https://datatables.net/plug-ins/filtering/type-based/accent-neutralise
      function removeAccents ( data ) {
        if ( data.normalize ) {
          // Use I18n API if available to split characters and accents, then remove
          // the accents wholesale. Note that we use the original data as well as
          // the new to allow for searching of either form.
          return data +' '+ data.normalize('NFD').replace(/[\u0300-\u036f]/g, '');
        }
        return data;
      }

      jQuery.extend(jQuery.fn.dataTable.ext.ofnSearch, {
         "french-string":  function ( data ) {
           return ! data ? '' :  typeof data === 'string' ? removeAccents( data ) : data;
         }
      });

      jQuery.extend( jQuery.fn.dataTable.ext.oSort, {
        "french-string-asc" : function (s1, s2) {
            return s1.localeCompare(s2, 'fr');
        },

        "french-string-desc" : function (s1, s2) {
            return s2.localeCompare(s1, 'fr');
        }
      });

      var ministeres = [];
      var publicCategories = [];
      // TODO: retrieve static list values from DemarchesClass property
      publicCategories.push({key: "associations", value: "Associations"});
      publicCategories.push({key: "collectivites", value: "Collectivités"});
      publicCategories.push({key: "particuliers", value: "Particuliers"});
      publicCategories.push({key: "professionnels", value: "Professionnels"});

      var avisStartDate, avisEndDate;

      var dataEndpoint = "$xwiki.getAttachmentURL($pageId, 'data.json')";
      // If this is the live dashboard, adapt the data endpoint accordingly
      #if ($pageId == $LIVE_DASHBOARD_ID)
        #set ($token = $services.csrf.getToken())
        #set ($parameters = "action=json&amp;live=1&amp;token=$token")
        dataEndpoint = "$xwiki.getURL($pageId, 'view', $parameters)";
      #end

      var table = $('#top-demarches').DataTable({
        ajax: {
          type: 'GET',
          url: dataEndpoint,
          dataSrc: function (json) {
            var data = json.data;
            avisStartDate = json.metadata['avis-start-date'];
            avisEndDate = json.metadata['avis-end-date'];
            if (!avisEndDate) {
              // This is for retro-compatibility for JSON schema version &lt;= 1.1
              avisEndDate = json.metadata['date'];
            }
            var schema = json.metadata.schema;
            if (!schema || schema == '1.0') {
              // Do not display columns about accessibility and "tells us once" for schema version &lt; 1.1
              table.column(9).visible(false);
              table.column(10).visible(false);
            }
            for (var i = 0; i &lt; data.length; i++) {
              var ministere = data[i].ministere;
              if (ministeres.indexOf(ministere) &lt; 0) {
                ministeres.push(ministere);
              }
            };
            ministeres.sort(function (a, b) {
              return a.localeCompare(b, 'fr');
            });
           return json.data;
          },
          error: function (jqXHR, textStatus, errorThrown) {
            console.log('An error occurred: ' + errorThrown);
          }
        },
        fixedHeader: true,
        rowId: 'id',
        paging: false,
        columns: [
          {
            name: "title",
            data: "title",
            className: 'column-title',
            type: "french-string",
            render : function (data, type, row) {
              return data + ' &lt;span class="ministere-groupe"&gt;' + row['ministere'] + (row['groupes'] ? (' - ' + row['groupes']) : '') + '&lt;/span&gt;';
            }
          },
          {
            name: "ministere",
            data: "ministere",
            className: 'column-ministry',
            visible: false,
            type: "french-string"
          },
          {
            name: "groupes",
            data: "groupes",
            className: 'column-groups',
            visible: false,
            type: "french-string"
          },
          {
            name: "statutDemat",
            data: "statutDemat",
            className: 'column-digitalization-status',
            render: function (data, type, row) {
              return format(data, data, computeBadgeStyle, true);
            }
          },
          {
            name: "satisfactionIndex",
            data: "satisfactionIndex",
            className: 'column-satisfaction-index',
            type: "num",
            render: function (data, type, row) {
              if (type === "sort") {
                return data.value;
              } else {
                if (!isNaN(data.value) &amp;&amp; data.value &gt;= 0) {
                  var statsURL = getAvisStatisticsUrl(row['id']);
                  var valueToDisplay = format(data.value, data.display, computeBadgeStyleSatisfactionIndex,  true, row['id']);
                  // add the stats link to the graphs under / next to the badge
                  var linkToGraphs = '&lt;a class="satisfaction-details" href="' + statsURL + '"&gt;$escapetool.javascript($services.localization.render("dashboard.table.satisfaction.statslink"))&lt;/a&gt;';
                  return valueToDisplay.replace('&lt;/span&gt;&lt;/span&gt;', '&lt;/span&gt;' + linkToGraphs + '&lt;/span&gt;');
                } else {
                  return format(data.value, data.display, computeBadgeStyle,  true, row['id']);
                }
              }
            }
          },
          {
            name: "adapteMobile",
            data: "adapteMobile",
            className: 'column-mobile',
            render: function (data, type, row) {
              if (type === "sort") {
                return data.display;
              } else {
                return format(data.value, data.display, computeBadgeStyle, false);
              }
            }
          },
          {
            name: "qualiteSupport",
            data: "qualiteSupport",
            className: 'column-support',
            render: function (data, type, row) {
              return format(data, data, computeBadgeStyle, true);
            }
          },
          {
            name: "urlScore",
            data: "urlScore",
            className: 'column-url-score',
            type: "num",
            render: function (data, type, row) {
              if (type === "sort") {
                return data.value;
              } else {
                return format(data.value, data.display, computeUrlScoreBadgeStyle, true);
              }
            }
          },
          {
            name: "franceConnect",
            data: "franceConnect",
            className: 'column-france-connect',
            render: function (data, type, row) {
              if (type === "sort") {
                return data.display;
              } else {
                return format(data.value, data.display, computeBadgeStyle, false);
              }
            }
          },
          {
            name: "accessibilityScore",
            data: "accessibilityScore",
            className: 'column-accessibility',
            render: function (data, type, row) {
              if (!data) {
                return format("", "À venir", computeBadgeStyle, false);
              }
              if (type === "sort") {
                /* Custom sort to make magic happen in the table */
                if (data.value == "Oui") {
                  return 4;
                } else if (data.value == "Partiel") {
                  return 3;
                } else if (data.value == "Non") {
                  return 2;
                } else if (data.value == "n/a") {
                  return 1;
                } else {
                  return 0;
                }
              } else {
                return format(data.value, data.display, computeBadgeStyle, false);
              }
            }
          },
          {
            name: "ditesLeNousUneFois",
            data: "ditesLeNousUneFois",
            className: 'column-tell-us-once',
            type: "num",
            render: function (data, type, row) {
              if (!data) {
                return "";
              }
              if (type === "sort") {
                var value;
                if (data.display == "n/a")
                  return -2;
                else if (data.display == "-")
                  return -1;
                else
                  return data.value;
              } else {
                return format(data.value, data.display, computeBadgeStyleDitesLeNousUneFois, false);
              }
            }
          },
          {
            name: 'details',
            data: 'details',
            className: 'details-control',
            orderable: false,
            defaultContent: '',
            render: function (data, type, row) {
              return '&lt;div aria-label="Afficher les détails"&gt;&lt;span class="fa fa-chevron-down" aria-hidden="true"&gt;&lt;/span&gt;&lt;/div&gt;';
            }
          },
          {
            name: "volumetrie",
            data: "volumetrie",
            type: "num",
            visible: false,
            render: function (data, type, row) {
              if (type === "sort") {
                return data.value;
              } else {
                return data.display;
              }
            }
          },
          {
            name: "avisCount",
            data: "avisCount",
            type: "num",
            visible: false,
            render: function (data, type, row) {
              if (type === "sort") {
                return data.value;
              } else {
                return data.display;
              }
            }
          },
          {
            name: "categoriesPublics",
            data: "categoriesPublics",
            visible: false,
            type: "string",
            render: function (data, type, row) {
              if (data != undefined)
                return data.value;
              else
                return "";
            }
          },
          {
            name: "rgaaCompliancyLevel",
            data: "rgaaCompliancyLevel",
            visible: false,
            type: "num",
            render: function (data, type, row) {
              if (data != undefined)
                return data.display;
              else
                return undefined;
            }
          }
        ],
        // order by: avis, ministère, groupe, volumétrie, name
        order: [[13, 'desc'], [1, 'asc'], [2, 'asc'], [12, 'desc'], [0, 'asc']],
        columnDefs: [{
          targets: "_all",
          orderable: true,
          defaultContent: "-"
        }],
        language: {
          info: "Total : _TOTAL_ démarches",
          infoEmpty: "Aucune démarche trouvée",
          infoFiltered: "(filtrage appliqué sur _MAX_ total entrées)",
          loadingRecords: "Chargement...",
          processing: "Traitement...",
          search: "",
          searchPlaceholder: "Mot clé",
          zeroRecords: "Aucune entrée trouvée"
        },
        initComplete: function(settings, json ) {
          // add the publics filter in the filters
          var filtersContainer = $('#top-demarches_filter');
          if (filtersContainer) {
            var schema = json.metadata.schema;
            if (schema != undefined &amp;&amp; schema != '1.0') {
              var publicCategorySelect = $("&lt;select name='publicCategorySelect'/&gt;");
              publicCategorySelect.empty();
              publicCategorySelect.append($("&lt;option /&gt;").val("tous").text("Tous les publics"));
              $.each(publicCategories, function() {
                 var value = this.key;
                 var text = this.value;
                 publicCategorySelect.append($("&lt;option /&gt;").val(value).text(text));
              });
              // add the publics select at the beginning of the filter line
              var publicsSelectLabel = $("&lt;span class='label-publicsfilter'/&gt;");
              publicsSelectLabel.prepend(publicCategorySelect);
              filtersContainer.prepend(publicsSelectLabel);
            }
            // prepare the select of ministries
            var ministriesSelect = $("&lt;select name='ministereSelect'/&gt;");
            ministriesSelect.empty();
            ministriesSelect.append($("&lt;option /&gt;").val("tous").text("Tous les ministères"));
            $.each(ministeres, function() {
               ministriesSelect.append($("&lt;option /&gt;").val(this).text(this));
            });
            // add the ministries select at the beginning of the filter line
            var ministriesSelectLabel = $("&lt;span class='label-ministriesfilter'/&gt;");
            ministriesSelectLabel.prepend(ministriesSelect);
            filtersContainer.prepend(ministriesSelectLabel);

            // thanks, internet: https://datatables.net/forums/discussion/34352/passing-datatable-object-to-initcomplete-callback
            // NB: on selection change, the selection is then retrieved during the execution of the code declared in "$.fn.dataTable.ext.search.push"
            var thisDataTable = settings.oInstance.api();
            if (schema != undefined &amp;&amp; schema != '1.0') {
              publicCategorySelect.change(function () {
                thisDataTable.draw();
              });
            }

            ministriesSelect.change(function () {
              thisDataTable.draw();
            });

            var sort =  $('.observatoire-sort').on('click', function(event) {
              event.preventDefault();
              var element = $(this);
              var key = element.data('key');
              var order = element.data('order');
              // color stuff when a sort is happening
              $('.observatoire-sort').removeClass('active');
              element.addClass('active');
              // get top element, to modify it as well
              var sortTopControl = $('#top-demarches-sort-toggle');
              var sortTopControlNewLabel = sortTopControl.data('default-label') + " : " + element.text() + "&amp;nbsp;&lt;span class='caret'&gt;&lt;/span&gt;";
              sortTopControl.addClass('pushed');
              sortTopControl.html(sortTopControlNewLabel);
              // finally, sort the table
              var columnIndex = thisDataTable.column(key + ":name").index();
              thisDataTable.order( [ columnIndex, order ] ).draw();
            });

          }
          // add the hook for the filters display upon click on the filters button
          var filtersToggle = $('#top-demarches-filters-toggle');
          filtersToggle.click(function(evt){
            $(this).toggleClass('pushed');
            $('#top-demarches_wrapper .dataTables_filter').toggle();
          });
        },

        /* Launch a custom event when the table is being (re)drawn */
        drawCallback : function( settings ) {
          $(document).trigger("observatoire:datatable:draw");
        }
      });

      /*
       * When the table is ordered by clicking on the header, decorate the "trier par" control.
       */
      $("#top-demarches thead th.sorting, #top-demarches thead th.sorting_asc #top-demarches thead th.sorting_desc").click(function (){
        var order = table.order();
        // Deactivate all active elements from the sort button
        $('.observatoire-sort').removeClass('active');
        // mark top element as pushed and change its label
        var sortTopControl = $('#top-demarches-sort-toggle');
        var sortTopControlNewLabel = sortTopControl.data('default-label') + " : " + sortTopControl.data('othersort-label') + "&amp;nbsp;&lt;span class='caret'&gt;&lt;/span&gt;";
        sortTopControl.addClass('pushed');
        sortTopControl.html(sortTopControlNewLabel);
      });

      function addChildrenRows(tableRow) {
        var tr = tableRow;
        var row = table.row(tr);
        if (row.child.isShown()) {
          row.child.hide();
          tr.removeClass('shown');
          var iconSpan = tr.find('.details-control .fa');
          iconSpan.removeClass('fa-chevron-up');
          iconSpan.addClass('fa-chevron-down');
        } else {
          var data = row.data();
          #set ($hasAdmin = $services.security.authorization.hasAccess('admin'))
          ## Value of "isAdministrateurMinisteriel" is present in the skin, but needs to be computed locally because the
          ## script is not executed in the skin context
          #set ($ADMINISTRATEURS_MINISTERIELS_GROUP = 'XWiki.AdministrateursMinisteriels')
          #if ($xcontext.userReference != $NULL)
            #set ($userGroups = $services.user.group.getGroupsFromMemberWiki($xcontext.userReference))
            #set ($administrateursMinisterielsReference = $services.model.resolveDocument($ADMINISTRATEURS_MINISTERIELS_GROUP))
            #set ($isAdministrateurMinisteriel = $userGroups != $NULL &amp;&amp; $userGroups.contains($administrateursMinisterielsReference))
          #end
          #if ($hasAdmin || $isAdministrateurMinisteriel)
            var parameters = new URLSearchParams(window.location.search);
            // Show the toolbar row only for the live version of the dashboard
            #if ($pageId == $LIVE_DASHBOARD_ID)
              row.child([addDetailsRow(data, true)], 'child-row').show();
              //var parent = $(row.node()).parent();
              var toolbarRow = $(row.node()).next();
              var control = toolbarRow.find('.row-edit-control').first();
              // TODO: is it really worth storing the data values in the HTML itself for not loading the memory too much?
              control.on('click', function(event) {
                event.preventDefault();
                var demarcheId = $(this).data('demarche-id');
                var title = $(this).data('demarche-name');
                var page = getPage(demarcheId);
                var editUrl = page.getURL('edit', 'xpage=plain&amp;mode=row-edition');
                var saveUrl = page.getURL('preview');
                var dialogData = {title: title, editUrl: editUrl, saveUrl: saveUrl, id: demarcheId};
                return new XWiki.widgets.XPopup(dialogData);
              });
            #else
              row.child([addDetailsRow(data, false)], 'child-row').show();
            #end
          #else
            row.child([addDetailsRow(data, false)], 'child-row').show();
          #end
          tr.addClass('shown');
          var iconSpan = tr.find('.details-control .fa');
          iconSpan.removeClass('fa-chevron-down');
          iconSpan.addClass('fa-chevron-up');
        }
      }

      $(document).on('xwiki:demarche:updated', function(event, data) {
        var row = table.row('#' + data.id);
        var rowData = row.data();
        var url = "$xwiki.getURL('observatoire.en-direct.WebHome', 'view', 'action=json&amp;live=1&amp;id=')";
        url = url + data.id;
        url = url + "&amp;token=" + "$services.csrf.getToken()";
        $.get(url, function(freshData) {
          if (freshData &amp;&amp; freshData.data &amp;&amp; freshData.data.length &gt; 0) {
            var demarche = freshData.data[0];
            row.data(demarche);
            row.draw();
            // Remove and re-add the children rows to get the displayed data updated
            row.child().remove();
            var tr = $(row.node());
            addChildrenRows(tr);
          }
        });
      });

      $('#top-demarches tbody').on('click', 'td.details-control', function () {
        var tr = $(this).closest('tr');
        addChildrenRows(tr);
      });
    });
  }

  (XWiki.domIsLoaded &amp;&amp; init()) || document.observe('xwiki:dom:loaded', init);

  return XWiki;
}(XWiki || {}));
</code>
    </property>
    <property>
      <name/>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>Demarches.Dashboard.Code.DashboardSheet</name>
    <number>0</number>
    <className>XWiki.StyleSheetExtension</className>
    <guid>e7e47164-c764-4951-9876-fef066cbfe44</guid>
    <class>
      <name>XWiki.StyleSheetExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <contentType>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>contentType</name>
        <number>6</number>
        <prettyName>Content Type</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>CSS|LESS</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </contentType>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>@obs-blue: @link-color;
@obs-blue-dark: #175fc9;


input[name='title'] {
  width: 100%;
}

#contentcontainerinner {
  width: 100%;
}

.xdialog-box {
  width: 60%;
  .col-lg-6.col-md-6.col-sm-6 {
    width: 100%;
  }
}

@max-width-dashboard: 1440px;

.dashboard-container {
  .container-fixed();
  max-width: @max-width-dashboard;
}

.observatoire-explanation {
  text-align: center;
  background-color: @obs-blue;
  color: #fff;
  .nav-tabs.nav-dashboard {
    padding-top: 0;
    padding-bottom:0;
    margin-top: 0;
    margin-bottom: 0;
    &gt; li &gt; a {
      background-color: lighten(@obs-blue, 40%);
      border-color: lighten(@obs-blue, 40%);
      color: @text-color;
      border-bottom: none;
      margin-right: 0.25em;
    }
    &gt; li.active &gt; a {
      background-color: #fff;
      color: @text-color;
    }
    &gt; .nav-view-dashboard-tab.active &gt; a {
      border-color: @obs-blue-dark;
      background-color: @obs-blue-dark;
      color: #fff;
    }
  }
  .document-header {
    margin: 0;
    padding: 0;
  }
  .document-info {
    margin: 0;
    padding: 0;
  }
  #document-title h1 {
    color: #fff;
    font-weight: 900;
    font-family: "Montserrat", "Open Sans", "Helvetica Neue", Helvetica, Arial, sans-serif;
    margin-top: 1.5em;
    margin-bottom: 1.5em;
  }
  .nav-tabs {
    border-bottom: none;
  }
}

.download-share {
  background-color: @obs-blue-dark;
  font-size: 0.75em;
  padding-top: 1.5em;
  padding-bottom: 1.5em;
  color: #fff;
  a {
    color: #fff;
  }
  .sharecol {
    text-align: right;
    .separator {
      color: #fff;
    }
    .social-network {
      margin-left: 0.5em;
    }
    @media (max-width: 768px) {
      text-align: center;
      margin-top: 0.7em;
    }
  }
  .downloadcol p.download {
    @media (max-width: 768px) {
      text-align: center;
    }
    margin-bottom: 0;
    a {
      display: inline-block;
      margin-right: 1.5em;
    }
  }
}

.table-tools {
  background-color: #fafafa;
  padding-top: 0.79em;
  padding-bottom: 1.58em;
  font-size: 0.75em;
  .btn {
    padding: 1em 1.8em 1em 1.8em;
    background-image: none;
    background-color: #fff;
    border: none;
    border-radius: 0.25em;
    &amp;.btn-primary {
      background-color: @obs-blue;
    }
    box-shadow: 0 2px 4px 0 rgba(191, 191, 191, 0.3);
  }
  /* Overwrite default button background colors to fix contrast */
  btn-default:active, .btn-default.active, .open &gt; .dropdown-toggle.btn-default, .open &gt; .dropdown-toggle.btn-default:hover {
    background-color: #ccc;
  }
  .dashboard-selector, .dashboard-filters {
    margin-top: 0.79em;
  }
  .dashboard-selector {
    text-align: right;
    .btn {
      font-weight: 600;
    }
  }
  .dropdown-toggle .caret {
    margin-left: 0.5em;
  }
  .dashboard-filters {
    .btn-default.pushed {
      background-color: @obs-blue;
      color: #fff;
    }
  }
  .dashboard-filter-sort {
    ul {
      a.observatoire-sort {
        display: block;
        color: @text-color;
        &amp;.active {
          /* don't display, it gets copied in the top button */
          display: none;
        }
      }
    }
  }
  @media screen and (max-width: 768px) {
    .dashboard-filter-sort, .dashboard-selector {
      text-align: center;
    }
  }
}

#top-demarches_wrapper .dataTables_filter {
  /* Hidden by default, will be displayed by javascript */
  display: none;
  float: none;
  text-align: left;
  font-size: 0.75em;
  color: #666;
  background-color: #fafafa;
  margin-top: 0;
  /* Simulate the same margins strategy as bootstrap to obtain flowing elements - on one or multiple lines, depending on the size of the screen*/
  margin-left: -@grid-gutter-width/4;
  margin-right: -@grid-gutter-width/4;
  padding-top: 0.79em;
  padding-bottom: 1.58em;
  border-top: 1px solid #ddd;
  /* Simulation of a full colored row using box shadow. Thanks Caty.*/
  /* screen &lt; fixed width of dashboard : move shadow only with the gutter width to cover the padding */
  box-shadow: -@grid-gutter-width 0 0 #fafafa, @grid-gutter-width 0 0 #fafafa;
  /* screen &gt; fixed width of dashboard: move shadow of 1400px to cover as much as possible of the white space */
  @media (min-width: @max-width-dashboard + @grid-gutter-width) {
    box-shadow: -(@max-width-dashboard - @grid-gutter-width - 10px) 0 0 #fafafa, @max-width-dashboard - @grid-gutter-width - 10px 0 0 #fafafa;
  }
  input, select {
    border: none;
    padding: 1em 0.8em 1em 1.8em;
    box-shadow: 0 2px 4px 0 rgba(191, 191, 191, 0.3);
    border-radius: 0.25em;
    display: inline-block;
    background-color: #fff;
  }
  input {
    min-width: 20em;
    font-weight: normal;
    margin-left: 0;
  }
  select {
    min-width: 20em;
    -webkit-appearance: none;
    -moz-appearance: none;
  }
  label, span.label-publicsfilter, span.label-ministriesfilter {
    position: relative;
    display: inline-block;
    &amp;:before {
      content: "\f002"; /* magnifier */
      font: normal normal normal 14px/1 FontAwesome;
      display: inline-block;
      position: absolute;
      right: 1.5em;
      top: 1em;
    }
    /* Simulate the same margins strategy as bootstrap to obtain flowing elements - on one or multiple lines, depending on the size of the screen*/
    padding-left: @grid-gutter-width/4;
    padding-right: @grid-gutter-width/4;
    margin-top: 0.79em;
    margin-bottom: 0;
  }
  span.label-publicsfilter:before,
  span.label-ministriesfilter:before {
    content: "\f078"; /* chevron */
  }

  /* Hack to not display the arrow on the selectboxes on IE, selector taken from 
  https://stackoverflow.com/a/30743013 */
  @media screen and (min-width:0\0) {
    span.label-publicsfilter:before,
    span.label-ministriesfilter:before {
      display: none;
    }
  }
  @media screen and (max-width: 768px) {
    text-align: center;
  }
}
/* Table head styling, in place or fixed, only on medium or large screens */
@media (min-width: 768px) {
  #top-demarches,
  table.fixedHeader-floating,
  table.fixedHeader-locked {
    table-layout: fixed;
    min-width: 1140px;
    /* Important to keep all darn selectors in order to beat in strength the datatables CSS selectors */
    thead tr th {
      vertical-align: bottom;
      text-align: center;
      font-size: 0.75em;
      border-bottom: 1px solid #ddd;
      padding: 1.5em 0.5em 1.5em 0.5em;
      font-weight: 600;
      color: #000;
      width: 8.48em !important;
      &amp;.column-title {
        font-size: 1em;
        text-align: left;
        font-weight: bold;
        min-width: unset;
        width: auto !important;
      }
      &amp;.details-control {
        width: 3em !important;
      }
      .thead-icon {
        display: block;
        background-color: fade(@obs-blue, 10%);
        color: @obs-blue;
        line-height: 3.33em;
        width: 3.33em;
        height: 3.33em;
        border-radius: 1.7em;
        margin-left: auto;
        margin-right: auto;
        vertical-align: middle;
        margin-bottom: 0.6em;
        img {
          line-height: 1.5em;
          max-width: 1.67em;
          max-height: 1.67em;
        }
      }
      .thead-label {
        display: block;
      }
      &amp;.sorting, &amp;.sorting_asc, &amp;.sorting_desc {
        background-image: none;
      }
    }
  }

  // start:datatables-fixed-header-styling
  table.fixedHeader-floating {
      position: fixed !important;
      background-color: white;
  }

  table.fixedHeader-floating.no-footer {
      border-bottom-width: 0;
  }

  table.fixedHeader-locked {
      position: absolute !important;
      background-color: white;
  }

  /* Table header styling, when floating */
  table.dataTable.no-footer.fixedHeader-floating,
  table.dataTable.no-footer.fixedHeader-locked {
    border-bottom: none;
    /* Especially for Chrome which computes sizes bizarrely and makes this table bizarelly smaller, add some white shadow to cover the borders that pass under it, which are otherwise visible because table too small */
    box-shadow: -15px 0 0 #fff, 15px 0 0 #fff;
  }

}
// end:datatables-fixedheader-styling

// Do dot show the floating table header on small screens, or when printing
@media screen and (max-width:768px), print  {
  table.fixedHeader-floating, table.fixedHeader-locked {
    display: none;
  }
}

#top-demarches {
  @media screen and (min-width: 768px) {
    border-spacing: 0 1em;
  }

  // Turn columns to rows on small screens
  @media screen and (max-width: 768px) {
    //https://css-tricks.com/responsive-data-tables/
    thead, tbody, th, tr {
      display: block;
    }

    /* Do not use 'display: none', for accessibility */
    thead tr {
      position: absolute;
      top: -9999px;
      left: -9999px;
    }

    tr {
      &amp;[role=row] {
        padding-top: 1em;
      }
      border-bottom: 1px solid #eee;
      td {
        /* override box-sizing: content-box of datatables because this causes some table cells to overflow their containing table (e.g. the column-title and the child-row cells) */
        box-sizing: inherit;
        display: inline-block;
        width: 50%;
        border: none !important;
        position: relative;
        text-align: left !important;
        padding: 8px 10px !important; // default dataTable padding
        &amp;:first-child {
          text-align: left !important;
          font-size: 0.875em;
          .ministere-groupe {
            font-size: 0.857em !important;
          }
        }
        &amp;:before {
          text-align: left;
          font-size: .675em;
          font-weight: bold;
        }
        &amp;.column-title {
          padding: 8px 10px !important;
          width: 100%;
        }
        .row-details-value {
          margin-top: 0.2em;
        }
        &amp;.details-control {
          width: 100%;
          text-align: center !important;
          // Add padding only when the chevron is down, that is when .row-details is not visible
          .fa-chevron-down {
            padding-bottom: 1em;
          }
        }
      }
      /* Labels could alternatively be retrieved from a data attribute. */
      td:nth-of-type(2):before {
        content: "$services.localization.render('dashboard.table.digitalization').replaceAll('&lt;br/&gt;', '')";
      }
      td:nth-of-type(3):before {
        content: "$services.localization.render('dashboard.table.satisfaction').replaceAll('&lt;br/&gt;', '')";
      }
      td:nth-of-type(4):before {
        content: "$services.localization.render('dashboard.table.mobile').replaceAll('&lt;br/&gt;', '')";
      }
      td:nth-of-type(5):before {
        content: "$services.localization.render('dashboard.table.support').replaceAll('&lt;br/&gt;', '')";
      }
      td:nth-of-type(6):before {
        content: "$services.localization.render('dashboard.table.performance').replaceAll('&lt;br/&gt;', '')";
      }
      td:nth-of-type(7):before {
        content: "$services.localization.render('dashboard.table.france-connect').replaceAll('&lt;br/&gt;', '')";
      }
      td:nth-of-type(8):before {
        content: "$services.localization.render('dashboard.table.accessibility').replaceAll('&lt;br/&gt;', ' ')";
      }
      td:nth-of-type(9):before {
        content: "$services.localization.render('dashboard.table.tell-us-once').replaceAll('&lt;br/&gt;', '')";
      }
    }
  }


  tr {
    &amp;:hover {
      background-color: transparent;
    }
    td {
      vertical-align: middle;
      text-align: center;
      border: 1px solid #ddd;
      border-width: 1px 0 1px 0;
      padding: 0.375em; /*~6px*/
      &amp;:last-child {
        border-right-width: 1px;
        @media screen and (min-width: 768px) {
          border-top-right-radius: 0.6em;
          border-bottom-right-radius: 0.6em;
        }
      }
      &amp;:first-child {
        border-left-width: 1px;
        @media screen and (min-width: 768px) {
          border-top-left-radius: 0.6em;
          border-bottom-left-radius: 0.6em;
        }
      }
      &amp;.column-title {
        min-width: 38%;
        font-weight: 600;
        text-align: left;
        padding: 1.25em;
        color: #000;
        line-height: 1.3em;
        .ministere-groupe {
          display: block;
          font-size: 0.875em;
          font-weight: normal;
          color: #666;
          margin-top: 0.4em;
        }
      }
      @media screen and (min-width: 768px) {
        &amp;.details-control {
          // This causes horizontal overflow on small screens
          padding-right: 1.25em;
          padding-left: 0.875em;
        }
      }
      .row-details-value {
        display: block; /* Needed in order to have the same table cell size on the whole line on Chrome. */
        position: relative;
      }
      .label {
        display: inline-block;
        white-space: normal;
        padding: 0.375em 0.7em 0.375em 0.7em;
        border-radius: 0.25em;
        border-width: 0.3em;
        border-style: solid;
      }
      .label-success {
        background-color: #62D2B0;
        border-color: #62D2B0;
        color: #22493D;
      }
      .label-danger {
        background-color: #FF7777;
        border-color: #FF7777;
        color: #592929;
      }
      .label-warning {
        background-color: #FE8D5E;
        border-color: #FE8D5E;
        color: #583120;
      }
      .label-info {
        background-color: #71B3FF;
        border-color: #71B3FF;
        color: #273E59;
      }
      .label-default {
        background-color: #dedede;
        border-color: #dedede;
        color: #4d4d4d;
      }
      &amp;.column-satisfaction-index {
        span.label {
          background-color: #ffffff;
          a {
            color: inherit;
          }
        }
        .row-details-value .satisfaction-details {
          display: inline-block;
          padding: .375em .7em .375em .7em;
          white-space: normal;
          font-size: 67.5%;
          color: #666;
          text-decoration: underline;
          /* desktop rules, the satisfaction details need to go under the label, absolutely positioned */
          @media screen and (min-width: 768px) {
            display: block;
            position: absolute;
            width: 9.42em; /* Corresponds to the 8.48 em width of the table header and makes this badge take all horizontal space so that its text is centered exactly under the badge */
          }
        }
        /* These are the colors for the satisfaction index but they don't have good contrast with the white */
        /*
        span.label-success a {
          color: #62D2B0;
        }
        span.label-danger a {
          color: #FF7777;
        }
        span.label-warning a {
          color: #FE8D5E;
        }
        span.label-info a {
          color: #71B3FF;
        }
        span.label-default {
          color: #dedede;
        }
        */
      }
    }
  }

  td.details-control {
    text-align: center;
    cursor: pointer;
    color: #666;
  }

  tr.shown {
    @media screen and (max-width: 768px) {
      background-color: rgba(0,107,230,0.05);
    }
    td {
      @media screen and (min-width: 768px) {
        background-color: fade(@obs-blue, 5%);
        border-bottom: 0;
        &amp;:last-child {
          border-bottom-right-radius: 0;
        }
        &amp;:first-child {
          border-bottom-left-radius: 0;
        }
      }
    }
  }

  /* Styles for the détails panel */
  tr.shown + tr.child-row {
    margin-top: 0;
    td {
      background-color: fade(@obs-blue, 5%);
      @media screen and (max-width: 768px) {
        width: 100%;
        display: inline-block;
        font-size: 0.675em;
        padding-bottom: 1em;
      }
      @media screen and (min-width: 768px) {
        font-size: 0.875em;
        border-top: 0.5px dotted #555;
        top: -1rem;
        padding: 0;
      }
      /* Make it stick to the row above, so that we can style it in a big box with rounded corners. 
         Apparently this is the only solution working fine on most browsers, I initially moved the whole row but rows can only be moved on Firefox, while cells work on all browsers. */
      position: relative;
      /* reset padding */
      &amp;:last-child {
        border-top-right-radius: 0;
      }
      &amp;:first-child {
        border-top-left-radius: 0;
      }
    }
    &amp;.child-row {

      .row-details {
        @media screen and (max-width: 768px) {
          padding: 0.5rem 0;
        }

        padding: 1.4285em;
        text-align: left;
        ul {
          /* Reset the border spacing inherited from the table */
          border-spacing: 0;
          list-style-type: none;
          margin-left: 0;
          margin-bottom: 0;
          padding-left: 0;
          display: table;
          li {
            display: table-row;
            .row-details-key {
              @media screen and (max-width: 768px) {
                font-weight:bold;
              }
            }
            .row-details-key, .row-details-value {

              display: table-cell;
              padding-top: 0.2em;
              padding-bottom: 0.2em;
              /* padding-right copied from the table cell of datatables */
              padding-right: 10px;
            }
            &amp;.row-details-prop-urlDemarche {
              a span.link-desktop {
                word-break: break-all;
              }
              @media screen and (max-width: 768px) {
                a span.link-desktop {
                  display: none;
                }
                a:after {
                  content: "$services.localization.render('dashboard.table.url-demarche.linklabel')";
                }
              }
            }
          }
        }
      }

    }
    .row-toolbar {
      text-align: right;
      background-color: @obs-blue;
      color: #fff;
      font-size: 0.75em;
      padding: 1em;
      border-radius: 0 0 0.8em 0.8em;
      a {
        color: #fff;
      }
    }
  }

  td.column-volumetrie, td.column-pourcentageRecoursVoieDematerialisee {
    text-align: right;
  }
}

#top-demarches_wrapper {
  .dataTables_info {
    font-size: 90%;
    color: #666;
  }
}

table#top-demarches.no-footer {
  border-bottom: 0px;
}

#view-details table {
  margin-top: 3em;
}

#footerglobal {
  margin-top: 4em;
}</code>
    </property>
    <property>
      <contentType>LESS</contentType>
    </property>
    <property>
      <name/>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
</xwikidoc>
