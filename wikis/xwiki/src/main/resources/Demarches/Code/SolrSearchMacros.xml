<?xml version="1.1" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.3" reference="Demarches.Code.SolrSearchMacros" locale="">
  <web>Demarches.Code</web>
  <name>SolrSearchMacros</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <creationDate>1544396400000</creationDate>
  <parent>Demarches.Code.SolrSearch</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <date>1544396400000</date>
  <contentUpdateDate>1544396400000</contentUpdateDate>
  <version>1.1</version>
  <title>SolrSearchMacros</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{velocity output='false'}}

#* Override "pagination" macro in "templates/macros.vm" in order to show a custom display
 * when there is no result.
 *#
#macro(paginationCustom $parameters)
  #if(!$parameters.noSx)
  $xwiki.ssfx.use('uicomponents/pagination/pagination.css', true)##
  #end
  #if("$!{parameters.url}" == '')
    #set($parameters.url = $doc.getURL('view'))
  #end
  #if(!$parameters.url.contains('?'))
    #set($parameters.url = "${parameters.url}?")
  #end
  #if($parameters.position != 'bottom')
    #set($parameters.position = 'top')
  #end
  #paginationPrepareParams($parameters)
  #paginationDisplayCustom($parameters)
#end

#* Override "pagination" macro in "templates/macros.vm" in order to show a custom display
 * when there is no result.
 *#
#macro(paginationDisplayCustom $parameters)
  #set($parameters.pageCount = ($parameters.totalItems + $parameters.itemsPerPage - 1) / $parameters.itemsPerPage)
  #if($parameters.firstItem &gt;= $parameters.totalItems)
    #set($parameters.firstItem = ($parameters.pageCount - 1) * $parameters.itemsPerPage)
  #elseif($parameters.firstItem &lt; 0)
    #set($parameters.firstItem = 0)
  #end
  #set($parameters.crtPage = $parameters.firstItem / $parameters.itemsPerPage)
  ## Make firstItem a multiple of itemsPerPage
  #set($parameters.firstItem = $parameters.crtPage * $parameters.itemsPerPage)
  #set($parameters.lastPage = $parameters.pageCount - 1)
  #set ($noResultClass = '')
  #if($parameters.position == 'top' &amp;&amp; $parameters.totalItems == 0)
    #set ($noResultClass = ' noResult')
  #end
  &lt;div class="paginationFilter$noResultClass"&gt;
    #if($parameters.position == 'top')
      #paginationResultsRangeCustom($parameters)
    #end
    #if($parameters.totalItems &gt; 0)
      #if($parameters.controlsAround == true)
        #paginationControlLeft($parameters)
        #paginationPages($parameters)
        #paginationControlRight($parameters)
      #else
        #paginationControl($parameters)
        #paginationPages($parameters)
      #end
    #end
  &lt;/div&gt;
#end

#macro(paginationResultsRangeCustom $parameters)
  #set($from = $parameters.firstItem + 1)
  #set($to = $parameters.firstItem + $parameters.itemsPerPage)
  #if ($to &gt; $parameters.totalItems)
    #set($to = $parameters.totalItems)
  #end
  &lt;span class="resultsNo" style="width:100%"&gt;
  #if($parameters.totalItems == 0)
    &lt;div class="box warningmessage"&gt;
    $services.localization.render('platform.livetable.paginationResultsNone')
    &lt;/div&gt;
  #elseif($parameters.totalItems == 1)
    &lt;span class='currentResultsNo'&gt;$services.localization.render('platform.livetable.paginationResultsOne')&lt;/span&gt;
  #elseif($from == $parameters.totalItems)
    $services.localization.render('platform.livetable.paginationResultsSingle', [$from, $parameters.totalItems])
  #else
    $services.localization.render('platform.livetable.paginationResultsMany', [$from, $to, $parameters.totalItems])
  #end
  &lt;/span&gt;
#end

#*
 * Prepares a query based on the text, as follows:
 * * adds exact search in URLs, for strings bigger than 5 characters
 * * escapes the :// combination, assuming that if it appears it's not solr syntax but it's an URL
 * * adds partial match (with wildcard) for the word appearing at the end of the query string, if it's an alphanumeric word, to allow search suggestions
 *#
#macro (prepareSolrDemarchesQuery $text $return)
  ## 1. prepare some extra query, for searching in the urls as well, based on the user query string
  ## only if the query string is longer than 5 characters
  #if ($text.length() &gt; 5)
    ## TODO: use a dismax query escape function here, don't do it manually, but for now it's ok
    #set($userFilledText = $text.replaceAll(':', '\\:').replaceAll('/', '\\/').replaceAll('"', ''))
    #set($extraQueryURL = "property.Demarches.Code.DemarchesClass.urlDemarche:(*$!{userFilledText}*) property.Demarches.Code.DemarchesClass.urlInfos:(*$!{userFilledText}*) property.Demarches.Code.DemarchesClass.urlFiche:(*$!{userFilledText}*)")
  #end
  ## 2. do some cleanup of special characters in the user searched text, for some special cases: replace :// in the url address. 
  ## TODO: I think &amp; and ? should also be escaped if the query string is an URL
  ## escape user search text, for the case when :// appear together (as part of an URL, escape them). In all other cases, let special syntax be used
  #set($searchedText = "$!text.replaceAll('://', '\\:\\/\\/')")
  ## 3. extract the end of the search string (after the last whitespace) and add it with a wildcard, if it doesn't contain special characters, to make partial matches happen
  #set($prefixSearchedText = '')
  ## get the last piece after the last whitespace
  #foreach($sst in $stringtool.split($searchedText))
    #set($prefixSearchedText = $sst)
  #end
  ## if it's fully alphanumeric, add a wildcard to it and include it in the search text, otherwise it's not included in the searched text at all
  #if ($prefixSearchedText != '' &amp;&amp; $stringtool.isAlphanumeric($prefixSearchedText))
    #set($prefixSearchedText = "${prefixSearchedText}*")
  #else
    #set($prefixSearchedText = '')
  #end
  #set ($return = $NULL)
  #setVariable("$return" "$!{searchedText} $!{prefixSearchedText} $!{extraQueryURL}")
#end



##override the displayResults macro to remove location, author, highlight and to change markup
## contains directly the content of displaySearchResultTitle
#macro (displaySearchResult_document $searchResult)
  #set ($showLocale = $searchResult.locale != '' &amp;&amp; $searchResult.locale != "$xcontext.locale")
  #set ($titleURL = $xwiki.getURL($searchResultReference))
  #if ($showLocale)
    #set ($titleURL = $xwiki.getURL($searchResultReference, 'view', "language=$searchResult.locale"))
  #end
  &lt;li class="search-result-title-wd"&gt;
    #*$services.icon.renderHTML('file-white')*#
    &lt;a href="$titleURL"&gt;$escapetool.xml($searchResult.title_)&lt;/a&gt;
    #if ($showLocale)
      &lt;span title="$escapetool.xml($services.localization.render('solr.result.language'))"
        class="search-result-language" &gt;($escapetool.xml($searchResult.locale))&lt;/span&gt;
    #end
    ## Scoring debug data.
    &lt;div class="search-result-debug"&gt;$!escapetool.xml($searchResponse.explainMap.get($searchResult.id))&lt;/div&gt;
  &lt;/li&gt;
#end

##override the displaySearchResultsSort macro to remove the highlight, facet and sort options
#macro (displaySearchResultsSort)
#end

##override displaySearchFacets in order to hide the facet actions
#macro (displaySearchFacets $searchResponse)
  #set($void = $services.progress.startStep('#displaySearchFacets'))
  (% class="search-facets collapsed-xs xform" %)(((
    (% class="search-facets-header" %)(((
      **{{translation key="solr.facets.title"/}}** (% class="pull-right visible-xs" %)$services.icon.render('search-plus')

      (% class="xHint" %)
      {{translation key="solr.facets.hint"/}}
    )))
    {{html clean="false"}}
      #foreach ($facetField in $searchResponse.facetFields)
        #displaySearchFacet($facetField)
      #end
    {{/html}}
  )))
  #set($void = $services.progress.endStep())
#end

##override the displaySearchFacet macro so that the facets are unfolded by default
#macro (displaySearchFacet $facetField)
  #set ($facetRequestParameter = "f_$facetField.name")
  #set ($facetRequestValues = $request.getParameterValues($facetRequestParameter))
  #set ($facetValues = [])
  #foreach ($facetValue in $facetField.values)
    ## Keep only the values that have at least one match or that are specified on the request.
    #if ($facetValue.count &gt; 0 || ($facetRequestValues &amp;&amp; $facetRequestValues.contains($facetValue.name)))
      #set ($discard = $facetValues.add($facetValue))
    #end
  #end
  ## Facets that perform a 'facet.prefix'-based drill down (see https://wiki.apache.org/solr/HierarchicalFaceting) don't
  ## have any values (not even with 0 count) when the prefix specified on the request doesn't have any "sub-values", but
  ## we still want to display them to allow the user to reset the filter.
  #if ($facetValues.size() &gt; 0 || $facetRequestValues)
    ## Show active facets (that have selected values or that have an explicit limit on the number of values, i.e.
    ## pagination) as expanded. Collapse the rest, otherwise you have to scroll to see all the available facets.
    #set ($facetValuesLimit = $request.getParameter("l_$facetField.name"))
    &lt;div class="search-facet expanded" data-name="$facetField.name"&gt;
      #displaySearchFacetHeader($facetField)
      #displaySearchFacetBody($facetField)
    &lt;/div&gt;
  #end
#end

## Override displaySearchForm in order to add the class "withsearchsuggest-input" to the search input so that
## the field provides live suggestion like on the home page, and to add a label for the input field.
#macro (displaySearchForm)
  ## include custom search suggest in the same way as in Main.WebHome
  ## $searchSuggestConfigHash is computed in the skin, in javascript.vm
  #set($discard = $xwiki.jsx.use('Main.CustomSearchSuggestJSX', {'h' : $searchSuggestConfigHash.hashCode()}))
  #set($void = $services.progress.startStep('#displaySearchForm'))
  {{html clean="false"}}
  &lt;label for="search-input"&gt;$services.localization.render('wikidemarches.search.label')&lt;/label&gt;
  &lt;form class="search-form row" action="$doc.getURL()" role="search"&gt;
    &lt;div class="hidden"&gt;
      &lt;input type="hidden" name="sort" value="$!escapetool.xml($sort)"/&gt;
      &lt;input type="hidden" name="sortOrder" value="$!escapetool.xml($sortOrder)"/&gt;
      &lt;input type="hidden" name="highlight" value="$highlightEnabled"/&gt;
      &lt;input type="hidden" name="facet" value="$facetEnabled"/&gt;
      ## The parameter used to determine if the request has been redirected with default search filters.
      &lt;input type="hidden" name="r" value="$!escapetool.xml($request.r)"/&gt;
      #if ("$!request.debug" != '')
        &lt;input type="hidden" name="debug" value="$escapetool.xml($request.debug)"/&gt;
      #end
      ## Preserve the current facet values when submitting a new search query.
      #foreach ($entry in $request.parameterMap.entrySet())
        #if ($entry.key.startsWith('f_') || $entry.key.startsWith('l_'))
          #foreach ($value in $entry.value)
            &lt;input type="hidden" name="$escapetool.xml($entry.key)" value="$escapetool.xml($value)"/&gt;
          #end
        #end
      #end
    &lt;/div&gt;
    &lt;div class="col-xs-12 col-sm-8 col-md-9"&gt;
      &lt;div class="input-group"&gt;
        &lt;input type="search" id="search-input" name="text" class="form-control withTip useTitleAsTip withsearchsuggest-input"
          placeholder="$services.localization.render('wikidemarches.search.inputText')" value="$escapetool.xml($text)"/&gt;
        &lt;span class="input-group-btn"&gt;
          &lt;button type="submit" class="btn btn-primary"&gt;
            $services.icon.renderHTML('search')
            &lt;span class="sr-only"&gt;$services.localization.render('search.page.bar.submit')&lt;/span&gt;
          &lt;/button&gt;
        &lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/form&gt;
  {{/html}}
  #set($void = $services.progress.endStep())
#end

## override get search results to explicitly add url matching to the query, for the 3 url fields
#macro (getSearchResults)
  #set($queryString = '')
  #prepareSolrDemarchesQuery($text, $queryString)
  ##
  ## Create the query and set the query string.
  #set ($query = $services.query.createQuery($queryString, 'solr'))
  ##
  ## Set query parameters.
  #set ($discard = $query.setLimit($rows))
  #set ($discard = $query.setOffset($start))
  #set ($discard = $query.bindValue('sort', "${sort} ${sortOrder}"))
  #setQueryFields($query)
  #setFacetFields($query)
  #setFilterQuery($query)
  #setHighlightQuery($query)
  #if ($debug)
    #set ($discard = $query.bindValue('debugQuery', 'on'))
  #end
  ##
  ## Execute the query.
  #set ($searchResponse = $query.execute()[0])
#end

##override displaySearchResults to not show the link to the RSS feed
#macro (displaySearchResults)
  #set ($results = $searchResponse.results)
  #set ($paginationParameters = {
    'url': $doc.getURL('view', "$!request.queryString.replaceAll('firstIndex=[0-9]*', '')"),
    'totalItems': $results.numFound,
    'defaultItemsPerPage': $rows,
    'position': 'top'
  })
  {{html clean="false"}}#paginationCustom($paginationParameters)
  &lt;ul class='search-results'&gt;
    #foreach ($searchResult in $results)
      #set ($searchResultReference = $services.solr.resolve($searchResult))
      ## call directly the search result document, otherwise we'll have some div elements all around the results which break the list of results
      #displaySearchResult_document($searchResult)
    #end
  &lt;/ul&gt;
  #set ($discard = $paginationParameters.put('position', 'bottom'))
  #paginationCustom($paginationParameters)
  #if (!$isGuest)
    #set ($text = $!request.text)
    &lt;div class="new-demarche"&gt;
      &lt;div&gt;$services.localization.render('wikidemarches.demande.demarche-absente')&lt;/div&gt;
      &lt;div class='buttonwrapper'&gt;
        &lt;a class='button btn btn-primary' href="$xwiki.getDocument('Demarches.Code.NewDemarche').getURL()?text=$escapetool.url($text)"&gt;$services.localization.render('wikidemarches.demande.creation')&lt;/a&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  #end
{{/html}}

#end

{{/velocity}}</content>
</xwikidoc>
