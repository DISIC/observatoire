<?xml version="1.1" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.3" reference="Demarches.Code.SolrSearchMacros" locale="">
  <web>Demarches.Code</web>
  <name>SolrSearchMacros</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <creationDate>1529141437000</creationDate>
  <parent>Demarches.Code.SolrSearch</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <date>1529144068000</date>
  <contentUpdateDate>1529144068000</contentUpdateDate>
  <version>1.1</version>
  <title>SolrSearchMacros</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{velocity output='false'}}
#*
 * Prepares a query based on the text, as follows:
 * * adds exact search in URLs, for strings bigger than 5 characters
 * * escapes the :// combination, assuming that if it appears it's not solr syntax but it's an URL
 * * adds partial match (with wildcard) for the word appearing at the end of the query string, if it's an alphanumeric word, to allow search suggestions
 *#
#macro (prepareSolrDemarchesQuery $text $return)
  ## 1. prepare some extra query, for searching in the urls as well, based on the user query string
  ## only if the query string is longer than 5 characters
  #if ($text.length() &gt; 5)
    ## TODO: use a dismax query escape function here, don't do it manually, but for now it's ok
    #set($userFilledText = $text.replaceAll(':', '\\:').replaceAll('/', '\\/').replaceAll('"', ''))
    #set($extraQueryURL = "property.Demarches.Code.DemarchesClass.urlDemarche:(*$!{userFilledText}*) property.Demarches.Code.DemarchesClass.urlInfos:(*$!{userFilledText}*) property.Demarches.Code.DemarchesClass.urlFiche:(*$!{userFilledText}*)")
  #end
  ## 2. do some cleanup of special characters in the user searched text, for some special cases: replace :// in the url address. 
  ## TODO: I think &amp; and ? should also be escaped if the query string is an URL
  ## escape user search text, for the case when :// appear together (as part of an URL, escape them). In all other cases, let special syntax be used
  #set($searchedText = "$!text.replaceAll('://', '\\:\\/\\/')")
  ## 3. extract the end of the search string (after the last whitespace) and add it with a wildcard, if it doesn't contain special characters, to make partial matches happen
  #set($prefixSearchedText = '')
  ## get the last piece after the last whitespace
  #foreach($sst in $stringtool.split($searchedText))
    #set($prefixSearchedText = $sst)
  #end
  ## if it's fully alphanumeric, add a wildcard to it and include it in the search text, otherwise it's not included in the searched text at all
  #if ($prefixSearchedText != '' &amp;&amp; $stringtool.isAlphanumeric($prefixSearchedText))
    #set($prefixSearchedText = "${prefixSearchedText}*")
  #else
    #set($prefixSearchedText = '')
  #end
  #set ($return = $NULL)
  #setVariable("$return" "$!{searchedText} $!{prefixSearchedText} $!{extraQueryURL}")
#end
{{/velocity}}</content>
</xwikidoc>
