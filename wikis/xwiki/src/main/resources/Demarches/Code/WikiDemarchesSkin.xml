<?xml version="1.1" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.3" reference="Demarches.Code.WikiDemarchesSkin" locale="">
  <web>Demarches.Code</web>
  <name>WikiDemarchesSkin</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <creationDate>1527348369000</creationDate>
  <parent>Demarches.Code.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <date>1530627720000</date>
  <contentUpdateDate>1527348411000</contentUpdateDate>
  <version>1.1</version>
  <title>Wiki Demarches Skin</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content/>
  <attachment>
    <filename>favicon.ico</filename>
    <mimetype>image/vnd.microsoft.icon</mimetype>
    <author>xwiki:XWiki.Admin</author>
    <date>1529571886000</date>
    <version>1.1</version>
    <comment/>
    <content>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>
    <filesize>13094</filesize>
  </attachment>
  <object>
    <name>Demarches.Code.WikiDemarchesSkin</name>
    <number>0</number>
    <className>XWiki.XWikiSkinFileOverrideClass</className>
    <guid>0a3c6b99-b140-4c07-a856-1438061ef3e7</guid>
    <class>
      <name>XWiki.XWikiSkinFileOverrideClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <content>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>content</name>
        <number>2</number>
        <prettyName>Content</prettyName>
        <rows>15</rows>
        <size>80</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </content>
      <path>
        <disabled>0</disabled>
        <name>path</name>
        <number>1</number>
        <prettyName>Path</prettyName>
        <size>255</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </path>
    </class>
    <property>
      <content>#set($displayDocExtra = false)
#set($displayContentFooter = false)
#set($displayDocChanges = false)
#set($displayContentMenu = $hasEdit)
## #set($displayContentMenu = $hasAdmin &amp;&amp; $isAdvancedUser)
#set($displayBreadcrumbs = $hasAdmin &amp;&amp; $isAdvancedUser)
#set($displayDrawer = !$isGuest)
#set($displayQuickSearch = false)
#set($discard = $xwiki.ssx.use('IconThemes.FontAwesome'))
#set($discard = $xwiki.jsx.use('IconThemes.FontAwesome'))

#* These will be handled from the pages *#
#set($displayDocTitle = true)
#set($displayTitleContentSeparator = true)</content>
    </property>
    <property>
      <path>layoutExtraVars.vm</path>
    </property>
  </object>
  <object>
    <name>Demarches.Code.WikiDemarchesSkin</name>
    <number>1</number>
    <className>XWiki.XWikiSkinFileOverrideClass</className>
    <guid>1fdede0c-e03c-4346-b5fa-2d7b77969d0f</guid>
    <class>
      <name>XWiki.XWikiSkinFileOverrideClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <content>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>content</name>
        <number>2</number>
        <prettyName>Content</prettyName>
        <rows>15</rows>
        <size>80</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </content>
      <path>
        <disabled>0</disabled>
        <name>path</name>
        <number>1</number>
        <prettyName>Path</prettyName>
        <size>255</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </path>
    </class>
    <property>
      <content>#template('xwikivars.vm')
#if($isInServletMode &amp;&amp; $displayBreadcrumbs) ## Visible only in a page
  &lt;div class="row hierarchy-row"&gt;&lt;div class="col-xs-12"&gt;
  #template('hierarchy_macros.vm')
  #######################################################
  ##                   CONTROLLER
  ##
  ## Call the appropiate breadcrumb depending on the
  ## configuration.
  #######################################################
  #if($services.parentchild.isParentChildMechanismEnabled())
    #hierarchy_parentChild()
  #else
    ##
    ## Default mode: display the hierarchy for the current page
    ##
    #hierarchy($NULL {'id': 'hierarchy', 'limit': 5, 'treeNavigation': true})
  #end
  &lt;/div&gt;&lt;/div&gt;
#end</content>
    </property>
    <property>
      <path>hierarchy.vm</path>
    </property>
  </object>
  <object>
    <name>Demarches.Code.WikiDemarchesSkin</name>
    <number>2</number>
    <className>XWiki.XWikiSkinFileOverrideClass</className>
    <guid>c62576b9-7b7f-4c81-8854-c8ff0262daeb</guid>
    <class>
      <name>XWiki.XWikiSkinFileOverrideClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <content>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>content</name>
        <number>2</number>
        <prettyName>Content</prettyName>
        <rows>15</rows>
        <size>80</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </content>
      <path>
        <disabled>0</disabled>
        <name>path</name>
        <number>1</number>
        <prettyName>Path</prettyName>
        <size>255</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </path>
    </class>
    <property>
      <content>##
## Top Menu
##
#if ($isInServletMode)## Visible only in a page
  #template("menus_macros.vm")

  ## Top Menu
  #xwikitopmenustart()

    ## Left menu
    #xwikitopmenuleftstart()
      #displaySimpleSecureUIX('org.xwiki.platform.topmenu.left')
    #xwikitopmenuleftend()

    ## Right menu
    #xwikitopmenurightstart()
      #if ($displayDrawer)
        #displayDrawerActivator()
      #end
      #displaySimpleSecureUIX('org.xwiki.platform.topmenu.right')
    #xwikitopmenurightend()

  ## End of Top Menu
  #xwikitopmenuend()

  #if($displayDrawer)
    #template("drawer.vm")
  #end
#end
#**
 * Display the drawer activator with an humberger-style icon.
 *#
#macro(displayDrawerActivator)
  &lt;li&gt;
    &lt;a class="icon-navbar drawer-toggle" id="tmDrawerActivator" title="$services.localization.render('core.menu.drawer')"&gt;&lt;span class="sr-only"&gt;$services.localization.render('core.menu.toggleNavigation')&lt;/span&gt;$services.icon.renderHTML('menu')&lt;/a&gt;
  &lt;/li&gt;
#end
</content>
    </property>
    <property>
      <path>menus_view.vm</path>
    </property>
  </object>
  <object>
    <name>Demarches.Code.WikiDemarchesSkin</name>
    <number>3</number>
    <className>XWiki.XWikiSkinFileOverrideClass</className>
    <guid>797c2645-e2f8-427a-8a1d-530e72a29f8c</guid>
    <class>
      <name>XWiki.XWikiSkinFileOverrideClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <content>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>content</name>
        <number>2</number>
        <prettyName>Content</prettyName>
        <rows>15</rows>
        <size>80</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </content>
      <path>
        <disabled>0</disabled>
        <name>path</name>
        <number>1</number>
        <prettyName>Path</prettyName>
        <size>255</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </path>
    </class>
    <property>
      <content>#if($displayDocTitle)
&lt;div class="row document-header"&gt;
  &lt;div class="document-info col-xs-12 #if($displayContentMenu)col-md-7#end"&gt;
    ## --------------------------------------------------------
    ## Display UI Extensions before the title element
    ## --------------------------------------------------------
    #foreach ($uix in $services.uix.getExtensions('org.xwiki.platform.template.title.before'))
      $services.rendering.render($uix.execute(), 'xhtml/1.0')
    #end
    &lt;div id="document-title"&gt;&lt;h1&gt;$titleToDisplay&lt;/h1&gt;&lt;/div&gt;
    #if (!$doc.isNew() &amp;&amp; $displayDocChanges)
      &lt;div class="xdocLastModification"&gt;
        #if (!$doc.isMostRecent())
          $services.localization.render(
            'core.document.modificationWithVersion',
            ["&lt;a href='$tdoc.getURL('view', ""rev=$tdoc.version"")'&gt;$tdoc.version&lt;/a&gt;",
            $xwiki.getUserName($tdoc.author),
            $xwiki.formatDate($tdoc.date)
          ])
        #else
          $services.localization.render('core.footer.modification', [$xwiki.getUserName($tdoc.author), $xwiki.formatDate($tdoc.date)])
        #end
      &lt;/div&gt;
    #end
  &lt;/div&gt;
  #if($displayContentMenu)
    &lt;div class="document-menu col-xs-12 col-md-5"&gt;
      #template("menus_content.vm")
    &lt;/div&gt;
  #end
&lt;/div&gt;
#if($displayTitleContentSeparator)
&lt;hr/&gt;
#end
#end</content>
    </property>
    <property>
      <path>contentheader.vm</path>
    </property>
  </object>
  <object>
    <name>Demarches.Code.WikiDemarchesSkin</name>
    <number>4</number>
    <className>XWiki.XWikiSkinFileOverrideClass</className>
    <guid>d5bf9dcc-baf9-483d-8e98-bc0d665b365f</guid>
    <class>
      <name>XWiki.XWikiSkinFileOverrideClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <content>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>content</name>
        <number>2</number>
        <prettyName>Content</prettyName>
        <rows>15</rows>
        <size>80</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </content>
      <path>
        <disabled>0</disabled>
        <name>path</name>
        <number>1</number>
        <prettyName>Path</prettyName>
        <size>255</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </path>
    </class>
    <property>
      <content>#if($isInServletMode)## Visible only in a page
#if("$!extraFooterTemplate" != '')
  #template($extraFooterTemplate)
#end
&lt;footer id="footerglobal" role="contentinfo"&gt;
  &lt;div class='container'&gt;
  &lt;hr&gt;
  &lt;div id="xwikilicence"&gt;&amp;copy; 2018 $services.localization.render('wikidemarches.sitename')&lt;span class='separator'&gt; | &lt;/span&gt;&lt;a href="$xwiki.getURL('Main.MentionsLegales')"&gt;$services.localization.render('wd.legal-notice')&lt;/a&gt;&lt;span class='separator'&gt; | &lt;/span&gt;&lt;a href="$xwiki.getURL('Main.Accessibilite')"&gt;$services.localization.render('wd.accessibilite')&lt;/a&gt;&lt;span class='separator'&gt; | &lt;/span&gt;&lt;a href='mailto:nosdemarches@modernisation.gouv.fr'&gt;$services.localization.render('wd.contact')&lt;/a&gt;&lt;span class='separator'&gt; | &lt;/span&gt;&lt;a href="$xwiki.getURL('Main.A propos')""&gt;$services.localization.render('wd.about')&lt;/a&gt;&lt;/div&gt;
  &lt;div id='wd-customfooterinfo'&gt;
    $services.localization.render('wikidemarches.footer.administrationlinks.intro') : &lt;a href="http://service-public.fr/" target="_blank" title="Service-public.fr ($services.localization.render('wikidemarches.footer.administrationlinks.newwindow'))"&gt;Service-public.fr&lt;/a&gt; &amp;ndash; &lt;a href="http://legifrance.gouv.fr/" target="_blank" title="Legifrance.gouv.fr ($services.localization.render('wikidemarches.footer.administrationlinks.newwindow'))"&gt;Legifrance.gouv.fr&lt;/a&gt; &amp;ndash; &lt;a href="http://data.gouv.fr/" target="_blank" title="data.gouv.fr ($services.localization.render('wikidemarches.footer.administrationlinks.newwindow'))"&gt;data.gouv.fr&lt;/a&gt; &amp;ndash; &lt;a href="http://gouvernement.fr/" target="_blank" title="Gouvernement.fr ($services.localization.render('wikidemarches.footer.administrationlinks.newwindow'))"&gt;Gouvernement.fr&lt;/a&gt; &amp;ndash; &lt;a href="http://france.fr/" target="_blank" title="France.fr ($services.localization.render('wikidemarches.footer.administrationlinks.newwindow'))"&gt;France.fr&lt;/a&gt;
  &lt;/div&gt;
  #set ($version = $xwiki.getSpacePreference('version'))
  #if ("$!version" == "")
    #set ($version = $xwiki.getXWikiPreference("version"))
  #end
  #if ("$!version" != "")
    ## The version information coming from preferences is usually Velocity code, so make sure to evaluate it.
    &lt;div id="xwikiplatformversion"&gt;#evaluate($version)&lt;/div&gt;
  #else
    &lt;div id="xwikiplatformversion"&gt;
      #set($productURL = $services.extension.core.repository.environmentExtension.website)
      #if ($productURL)
        &lt;a href="$services.extension.core.repository.environmentExtension.website"&gt;
      #end
          $services.extension.core.repository.environmentExtension.name $xwiki.getVersion()
      #if ($productURL)
        &lt;/a&gt;
      #end
    &lt;/div&gt;
  #end
  &lt;/div&gt;
&lt;/footer&gt;
#end
### TODO: Format the footer for pdf output</content>
    </property>
    <property>
      <path>footer.vm</path>
    </property>
  </object>
  <object>
    <name>Demarches.Code.WikiDemarchesSkin</name>
    <number>6</number>
    <className>XWiki.XWikiSkinFileOverrideClass</className>
    <guid>ab114f2c-3be8-43a0-b2b1-b744d62835bb</guid>
    <class>
      <name>XWiki.XWikiSkinFileOverrideClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <content>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>content</name>
        <number>2</number>
        <prettyName>Content</prettyName>
        <rows>15</rows>
        <size>80</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </content>
      <path>
        <disabled>0</disabled>
        <name>path</name>
        <number>1</number>
        <prettyName>Path</prettyName>
        <size>255</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </path>
    </class>
    <property>
      <content>## -------------------------------------------------------------------------------------------------------------------
## In non-Servlet mode (in Portlet mode for example) we don't display the &lt;HTML&gt;, &lt;HEAD&gt; and &lt;BODY&gt;
## elements.
## -------------------------------------------------------------------------------------------------------------------
#if($isInServletMode)
## TODO this should be more specific
#if("$!request.noDoctype" != "true")
&lt;!DOCTYPE html&gt;
#end
#macro(xwikiDataAttribute $name $value)
  data-xwiki-${name}="$escapetool.xml($value)"
#end
&lt;html xmlns="http://www.w3.org/1999/xhtml" lang="$xcontext.locale" xml:lang="$xcontext.locale" dir="ltr" 
  ## NOTE: you should not use these attributes in javascript directly, but via the 'xwiki-meta' module instead:
  ## http://platform.xwiki.org/xwiki/bin/view/DevGuide/JavaScriptAPI#HGetsomeinformationaboutthecurrentdocument
  #xwikiDataAttribute('reference', $services.model.serialize($doc.documentReference, 'default'))
  #xwikiDataAttribute('document', $doc.fullName)##deprecated, use 'reference' instead
  #xwikiDataAttribute('wiki', $doc.wiki)##deprecated, use 'reference' instead
  #xwikiDataAttribute('space', $doc.space)##deprecated, use 'reference' instead
  #xwikiDataAttribute('page', $doc.name)##deprecated, use 'reference' instead
  #xwikiDataAttribute('version', $doc.version)
  #xwikiDataAttribute('rest-url', $services.rest.url($doc.documentReference))
  #xwikiDataAttribute('form-token', "$!{services.csrf.token}")&gt;
  &lt;head&gt;
    ## ---------------------------------------------------------------------------------------------------------------
    ## Ensure that the Content-Type meta directive is the first one in the header.
    ## See http://www.w3.org/International/tutorials/tutorial-char-enc/
    ## ---------------------------------------------------------------------------------------------------------------
    &lt;meta http-equiv="Content-Type" content="text/html; charset=$xwiki.encoding" /&gt;
    ## ---------------------------------------------------------------------------------------------------------------
    ## Compute the title.
    ## ---------------------------------------------------------------------------------------------------------------
    #if(!$title)
      #set($title = $!xwiki.getSpacePreference('title'))
      #if($title != '')
        ## Evaluate the title since it can have velocity code.
        #set($title = "#evaluate($title)")
        ## Don`t forget to escape it.
        #set($title = "$escapetool.xml($title)")
      #else
        #set($title = "XWiki - $escapetool.xml($!doc.space) - $escapetool.xml($!tdoc.displayTitle)")
      #end
    #else
      #set($title = $escapetool.xml($title))
    #end
    &lt;title&gt;$title&lt;/title&gt;
    ## ---------------------------------------------------------------------------------------------------------------
    ## Force Compatibility mode for IE browsers to use the latest rendering mode. In order to work, the declaration 
    ## needs to be placed in the &lt;head&gt;, before all other elements except for the &lt;title&gt; and other &lt;meta&gt; elements
    ## See http://msdn.microsoft.com/en-us/library/jj676915(v=vs.85).aspx#SETMODE
    ## ---------------------------------------------------------------------------------------------------------------
    #set($userAgent = $request.getHeader('User-Agent'))
    #if($userAgent.contains('MSIE') || $userAgent.contains('Trident'))
      ## Add a meta-tag to disable the IE compatibility mode
      &lt;meta http-equiv="X-UA-Compatible" content="IE=edge" /&gt;
      ## Add the equivalent HTTP header to disable the compatibility mode (the meta is not enough on intranet sites)
      #set($discard = $response.addHeader('X-UA-Compatible', 'IE=edge'))
    #end
    ## ---------------------------------------------------------------------------------------------------------------
    ## Enable Responsiveness for phones
    &lt;meta name="viewport" content="width=device-width, initial-scale=1" /&gt;
    ## ---------------------------------------------------------------------------------------------------------------
    ## Favicons
    ## Legacy, for IE
    &lt;link rel="shortcut icon" href="$xwiki.getSkinFile('favicon.ico')" /&gt;
    ## Don't send the other favicons, we don't have these versions for the Marianne
    ## Present, HTML5
    ## &lt;link rel="icon" href="$xwiki.getSkinFile('icons/xwiki/favicon16.png')" type="image/png" /&gt;
    ## The future, scalable icons
    ## &lt;link rel="icon" href="$xwiki.getSkinFile('icons/xwiki/favicon.svg')" type="image/svg+xml" /&gt;
    ## For smart phones and tablets
    ## &lt;link rel="apple-touch-icon" href="$xwiki.getSkinFile('icons/xwiki/favicon144.png')" /&gt;
    ## ---------------------------------------------------------------------------------------------------------------
    ## Universal edit button. See http://universaleditbutton.org
    ## ---------------------------------------------------------------------------------------------------------------
    #if($xcontext.action=="view")
      &lt;link rel="alternate" type="application/x-wiki" title="Edit" href="$doc.getURL("edit")" /&gt;
    #end
    ## ---------------------------------------------------------------------------------------------------------------
    ## Make sure search engine spiders give the plain page instead of ?viewer=comments, ?viewer=code etc.
    ## ---------------------------------------------------------------------------------------------------------------    
    &lt;link rel="canonical" href="$doc.getURL('view')" /&gt;
    ## ---------------------------------------------------------------------------------------------------------------
    ## Add user-defined Meta directives.
    ## ---------------------------------------------------------------------------------------------------------------
    ## Note: Velocity code, so it needs to be evaluated.
    #evaluate($!xwiki.getSpacePreference("meta"))
    ## ---------------------------------------------------------------------------------------------------------------
    ## Hook for inserting Link extensions. This will be replaced with the pulled link references.
    ## ---------------------------------------------------------------------------------------------------------------
    &lt;!-- com.xpn.xwiki.plugin.skinx.LinkExtensionPlugin --&gt;
    &lt;link href="$services.webjars.url('drawer', 'css/drawer.min.css')" rel="stylesheet" type="text/css" /&gt;
    #template("stylesheets.vm")
    #template("javascript.vm")
  &lt;/head&gt;
  #set($bodyTagName = 'body')
#else ## Portlet Mode
  #template("stylesheets.vm")
  #template("javascript.vm")
  #set($bodyTagName = 'div')
#end
## TODO: fix this from css
#set($bodyAction = $xcontext.action)
#if($xcontext.action == "admin" || $xcontext.action == "import" || $xcontext.action == "export")
  #set($bodyAction = "view")
#end
## These elements will be closed in the htmlfooter.vm file
&lt;$bodyTagName id="body" class="skin-flamingo wiki-${xcontext.database} space-${escapetool.xml($doc.space.replaceAll(' ', '_'))} ${bodyAction}body #if($showLeftPanels == "0")hideleft#end#if($showRightPanels == "0")hideright#end#if($hidecolumns &amp;&amp; ($!hidecolumns == 1))hidelefthideright#end #if($showLeftPanels != "0" &amp;&amp; $showRightPanels != "0" &amp;&amp; $!hidecolumns != 1)content#end panel-left-width-${leftPanelsWidth} panel-right-width-${rightPanelsWidth} drawer drawer-right drawer-close"&gt;
&lt;div id="xwikimaincontainer"&gt;
&lt;div id="xwikimaincontainerinner"&gt;
</content>
    </property>
    <property>
      <path>htmlheader.vm</path>
    </property>
  </object>
  <object>
    <name>Demarches.Code.WikiDemarchesSkin</name>
    <number>7</number>
    <className>XWiki.XWikiSkinFileOverrideClass</className>
    <guid>df38b07b-e1ee-427d-9ba8-8eb0e3ed83bb</guid>
    <class>
      <name>XWiki.XWikiSkinFileOverrideClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <content>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>content</name>
        <number>2</number>
        <prettyName>Content</prettyName>
        <rows>15</rows>
        <size>80</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </content>
      <path>
        <disabled>0</disabled>
        <name>path</name>
        <number>1</number>
        <prettyName>Path</prettyName>
        <size>255</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </path>
    </class>
    <property>
      <content>### Ensure this template is only called once (for performance reasons), since it's called from several places
#if ($hasMenuMacrosBeenCalled)
  #break
#else
  #set ($hasMenuMacrosBeenCalled = true)
#end
###
###    GLOBALS
###
#set ($isAdminAppInstalled = $xwiki.exists($services.model.createDocumentReference('', 'XWiki', 'AdminSheet')))
###
###    Toplevel Menu
###
#macro(xwikitopmenustart)
  &lt;nav class="navbar navbar-default actionmenu"&gt;
    &lt;div class="container"&gt;
      ## Brand and toggle get grouped for better mobile display
      &lt;div class="navbar-header"&gt;
        #if (!$displayPageHeader)
          #template("companylogo.vm")
        #end
      &lt;/div&gt;
      ## Collect the nav links, forms, and other content for toggling
      &lt;div id="xwikimainmenu"&gt;
#end

###
###    Toplevel Menu
###
#macro(xwikitopmenuend)
      &lt;/div&gt;## /.navbar-collapse
    &lt;/div&gt; ## / container-fluid
  &lt;/nav&gt;
#end

###
###    Toplevel Left Menu
###
#macro(xwikitopmenuleftstart)
  &lt;ul class="nav navbar-nav navbar-left"&gt;
    #submenuseparator()
#end

###
###    Toplevel Left Menu
###
#macro(xwikitopmenuleftend)
  &lt;/ul&gt;
#end

###
###    Toplevel Right Menu
###
#macro(xwikitopmenurightstart)
  &lt;ul class="nav navbar-nav navbar-right"&gt;
#end

###
###    Toplevel Right Menu
###
#macro(xwikitopmenurightend)
  &lt;/ul&gt;
#end

###
###    Toplevel Menu entry with subitems
###
### Generate a menu entry and start the subitem section
###
### @param actionurl The URL this entry points to
### @param linktext The menu item text
###
#macro(xwikitopmenuentrystart $actionurl $linktext $id $class $icon $iconImg)
  #set($sep = '__SEPARATOR__')
  #set($linkName = $linktext)
  #set($linkTitle = $linktext) 
  #if ($linktext.contains($sep))
    #set($linkWords = $linktext.split($sep, 2))
    #set($linkName = $linkWords.get(1))
    #set($linkTitle = "${linkWords.get(0)}: ${linkWords.get(1)}")
  #end
  &lt;li class="dropdown dropdown-split text-left" #if(!$stringtool.isBlank($id))id="$id"#end&gt;
    ## The menu label. On large screens (tablet and desktop) the label is a link that triggers the default menu action
    ## (e.g. navigation) and the menu is opened using a separated caret. On extra small screens (phones) the label opens
    ## the menu and the default menu action is the first item in the menu.
    &lt;a href="$actionurl" class="dropdown-split-left dropdown-toggle $!class" data-toggle="dropdown" title="$linkTitle"&gt;
      ## This caret is displayed only on extra small screens to indicate that the label toggles the menu.
      #glyphicon($icon)$!{iconImg} $linkName &lt;b class="caret"&gt;&lt;/b&gt;
    ## Don't leave any space between the anchors because they have display:inline-block on large screens.
    &lt;/a&gt;&lt;a href="#" class="dropdown-split-right dropdown-toggle hidden-xs $!class" data-toggle="dropdown"&gt;
      ## This caret is used to toggle the menu on large screens (tablet and desktop).
      &lt;b class="caret"&gt;&lt;/b&gt;
    &lt;/a&gt;
    &lt;ul class="dropdown-menu"&gt;
#end

###
###    Toplevel Menu entry without subitems
###
### Generate a menu entry withut subitems
###
### @param actionurl The URL this entry points to
### @param linktext The menu item text
###
#macro(xwikitopmenuentry $actionurl $linktext $id $class $icon $extraAttributes)
  #submenuitem($actionurl $linktext $id $class $icon $extraAttributes)
#end

###
###    Menu subitem entry
###
### Generate a submenu entry
###
### @param actionurl The URL this entry points to
### @param linktext The menu item text
###
#macro(submenuitem $actionurl $linktext $linkid $class $icon $extraAttributes)
  #set($sep = '__SEPARATOR__')
  #set($linkName = $linktext)
  #set($linkTitle = $linktext) 
  #if ($linktext.contains($sep))
    #set($linkWords = $linktext.split($sep))
    #set($linkName = $linkWords.get(1))
    #set($linkTitle = "${linkWords.get(0)}: ${linkWords.get(1)}")
  #end
  &lt;li class="$!class"&gt;&lt;a href="$actionurl" #if(!$stringtool.isBlank($linkid))id="$linkid"#end title="$linkTitle" $!extraAttributes&gt;$services.icon.renderHTML($icon) $linkName&lt;/a&gt;&lt;/li&gt;
#end

###
###    Menu disabled subitem entry
###
### Generate a disabled submenu entry
###
### @param text The menu item text
###
#macro(submenuitemdisabled $text)
&lt;span class="submenuitem disable"&gt;$text&lt;/span&gt;
#end

###
###    Toplevel Menu entry separator
###
#macro(xwikitopmenuseparator)
  &lt;li class="divider" role="separator"&gt;&lt;/li&gt;
#end

###
###    Menu submenu separator
###
#macro(submenuseparator)
  &lt;li class="divider" role="separator"&gt;&lt;/li&gt;
#end

###
###    Toplevel Menu entry end
###
### End the subitem section
###
#macro(xwikitopmenuentryend)
    &lt;/ul&gt;
  &lt;/li&gt;
#end

#macro(xwikibutton $actionurl $linktext $id $class $icon)
  &lt;a href="$actionurl" class="btn $!class" role="button" #if(!$stringtool.isBlank($id))id="$id"#end&gt;#glyphicon($icon) $linktext&lt;/a&gt;
#end

#macro(xwikibuttonentrystart $actionurl $linktext $id $class $icon)
  &lt;div class="btn-group text-left" #if(!$stringtool.isBlank($id))id="$id"#end&gt;
    &lt;button type="button" class="btn $!class dropdown-toggle" data-toggle="dropdown"&gt;#glyphicon($icon) $linktext &lt;span class="caret"&gt;&lt;/span&gt;
    &lt;/button&gt;
    &lt;ul class="dropdown-menu" role="menu"&gt;
#end

#macro(xwikisplitbuttonentrystart $actionurl $linktext $id $class $icon)
  &lt;div class="btn-group text-left" #if(!$stringtool.isBlank($id))id="$id"#end&gt;
    &lt;a href="$actionurl" class="btn $!class"&gt;#glyphicon($icon) $linktext&lt;/a&gt;
    &lt;button type="button" class="btn $!class dropdown-toggle" data-toggle="dropdown"&gt;
      &lt;span class="caret"&gt;&lt;/span&gt;
      &lt;span class="sr-only"&gt;Toggle Dropdown&lt;/span&gt;
    &lt;/button&gt;
    &lt;ul class="dropdown-menu" role="menu"&gt;
#end

#macro(xwikibuttonentryend $actionurl $linktext $id $class $icon)
    &lt;/ul&gt;
  &lt;/div&gt;
#end

#**
 * Display extension points only if the author of the UIX has the admin right on the wiki.
 *
 * @param $name name of the extension points to display
 * @since 7.3RC1
 *#
#macro(displaySimpleSecureUIX $name)
  #foreach($uix in $services.uix.getExtensions($name, {'sortByParameter' : 'order'}))
    #if ($services.security.authorization.hasAccess('admin', $uix.authorReference, $services.wiki.currentWikiDescriptor.reference))
      $services.rendering.render($uix.execute(), 'html/5.0')
    #end
  #end
#end</content>
    </property>
    <property>
      <path>menus_macros.vm</path>
    </property>
  </object>
  <object>
    <name>Demarches.Code.WikiDemarchesSkin</name>
    <number>8</number>
    <className>XWiki.XWikiSkinFileOverrideClass</className>
    <guid>5d9332bb-b00e-4806-9ec7-8fa2ba599e54</guid>
    <class>
      <name>XWiki.XWikiSkinFileOverrideClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <content>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>content</name>
        <number>2</number>
        <prettyName>Content</prettyName>
        <rows>15</rows>
        <size>80</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </content>
      <path>
        <disabled>0</disabled>
        <name>path</name>
        <number>1</number>
        <prettyName>Path</prettyName>
        <size>255</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </path>
    </class>
    <property>
      <content>################################
##       COMPANY LOGO
################################
#if("$!{themeDocFullName}" == '')
  #set($themeDocFullName = "$!xwiki.getUserPreference('colorTheme')")
#end
#if($themeDocFullName == '')
  #set($themeDocFullName = 'ColorThemes.DefaultColorTheme')
#end
#set($themeDoc = $xwiki.getDocument($themeDocFullName))
#set($themeObj = $themeDoc.getObject('FlamingoThemesCode.ThemeClass'))
#if($themeObj)
  #set($logoname = $themeObj.getValue('logo'))
#else
  #set($themeObj = $themeDoc.getObject('ColorThemes.ColorThemeClass'))
  #set($logoname = $themeObj.getValue('logoImage'))
#end
#if("$!{logoname}" != '')
  #set($logourl = $themeDoc.getAttachmentURL($logoname))
#else
  #set($logoname = $xwiki.getSkinPreference('logo', 'logo.svg'))
  #set($logo = $!prefdoc.getAttachment($logoname))
  #if(!$logo)
    #set($logourl = $xwiki.getSkinFile($logoname))
  #else
    #set($logourl = $prefdoc.getAttachmentURL($logo.filename))
  #end
#end
&lt;div id="companylogo"&gt;
  &lt;a href="$!xwiki.getURL($services.wiki.currentWikiDescriptor.mainPageReference)" title="Home" rel="home" #if(!$displayPageHeader)class="navbar-brand"#end&gt;
    &lt;img src="$!logourl" alt="Wiki Logo"/&gt;
    ## Site title next to the logo
    #set($eltname = 'span')
    #if ($doc.fullName == 'Main.WebHome')
      #set($eltname = 'h1')
    #end
    &lt;span class='demarches-titlebar-sitename'&gt;
      &lt;span class='demarches-titlebar-name'&gt;
        &lt;${eltname}&gt;$services.localization.render('wikidemarches.sitename')&lt;/${eltname}&gt;
      &lt;/span&gt;
      &lt;span class='demarches-titlebar-headline'&gt;$services.localization.render('wikidemarches.siteheadline')&lt;/span&gt;
    &lt;/span&gt;
  &lt;/a&gt;
&lt;/div&gt;
</content>
    </property>
    <property>
      <path>companylogo.vm</path>
    </property>
  </object>
  <object>
    <name>Demarches.Code.WikiDemarchesSkin</name>
    <number>9</number>
    <className>XWiki.XWikiSkinFileOverrideClass</className>
    <guid>1df3bb49-06bc-4079-af67-4567fd97204a</guid>
    <class>
      <name>XWiki.XWikiSkinFileOverrideClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <content>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>content</name>
        <number>2</number>
        <prettyName>Content</prettyName>
        <rows>15</rows>
        <size>80</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </content>
      <path>
        <disabled>0</disabled>
        <name>path</name>
        <number>1</number>
        <prettyName>Path</prettyName>
        <size>255</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </path>
    </class>
    <property>
      <content>#if ($type == 'edit' || $type == 'search')
  #if ($field.getProperty('displayType').value == 'input' &amp;&amp; $field.getProperty('picker').value == 1)
    #set ($id = $escapetool.xml("${prefix}${name}"))
    #set ($disabled = $field.getProperty('disabled').value == 1)
    #set ($isMultiSelect = $field.getProperty('multiSelect').value == 1)
    ## We don't use $isMultiSelect to determine if there is one or multiple values selected because you can have multiple
    ## values selected on a single selection property if the property had multiple selection active in the past.
    #if ("$!value.size()" != '')
      #set ($values = $value)
    #else
      #set ($values = [$value])
    #end
    #set ($discard = $xwiki.linkx.use($services.webjars.url('selectize.js', 'css/selectize.bootstrap3.css'),
      {'type': 'text/css', 'rel': 'stylesheet'}))
    #set ($discard = $xwiki.ssfx.use('uicomponents/suggest/xwiki.selectize.css', true))
    #set ($discard = $xwiki.jsx.use('Demarches.Code.DemarchesSheet',
      {'forceSkinAction' : true, 'language' : $xcontext.locale}))
    &lt;select id="$!id" name="$!id" class="suggest-propertyValues"#if ($isMultiSelect) multiple="multiple"#end
        #if ($disabled)disabled="disabled" #{end}data-className="$!escapetool.xml($field.className)"
        data-propertyName="$!escapetool.xml($name)" size="1"&gt;
      #foreach ($selectedValue in $values)
        &lt;option value="$!escapetool.xml($selectedValue)" selected="selected"&gt;$!escapetool.xml($selectedValue)&lt;/option&gt;
      #end
    &lt;/select&gt;
    #if ($isMultiSelect)
      ## We need a hidden input with an empty value to be able to clear the selected values when no value is selected.
      &lt;input type="hidden" name="$!id" /&gt;
    #end
  #else
    $doc.displayEdit($field, $prefix, $object)
  #end
#elseif ($type == 'view')
$doc.displayView($field, $prefix, $object)##
#elseif ($type == 'rendered')
$doc.displayRendered($field, $prefix, $object)##
#elseif ($type == 'hidden')
  $doc.displayHidden($field, $prefix, $object)
#else
  ## In order for the custom displayer to be taken into account, the result of its evaluation with an unknown display
  ## mode must not be empty. Let's output something.
  Unknown display mode.
#end</content>
    </property>
    <property>
      <path>displayer_dblist.vm</path>
    </property>
  </object>
  <object>
    <name>Demarches.Code.WikiDemarchesSkin</name>
    <number>10</number>
    <className>XWiki.XWikiSkinFileOverrideClass</className>
    <guid>4c9c3112-c66f-4351-acb2-054054805ec2</guid>
    <class>
      <name>XWiki.XWikiSkinFileOverrideClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <content>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>content</name>
        <number>2</number>
        <prettyName>Content</prettyName>
        <rows>15</rows>
        <size>80</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </content>
      <path>
        <disabled>0</disabled>
        <name>path</name>
        <number>1</number>
        <prettyName>Path</prettyName>
        <size>255</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </path>
    </class>
    <property>
      <content>###############################################################
## Contains various standard Velocity macros automatically
## loaded and usable everywhere (in Velocity).
## 
## It actually extends the macros.vm defined in the templates
## directory by redefining or adding new macros.
## 
## Note that if you modify that file you will need to restart.
###############################################################

###
###    Message box
###
#macro(xwikimessageboxstart $title $message)
    &lt;div class="centered panel panel-default xwikimessage"&gt;
     &lt;div class="panel-heading"&gt;
      &lt;h3 class="panel-title"&gt;$title&lt;/h3&gt;
     &lt;/div&gt;
     &lt;div class="panel-body"&gt;
      &lt;p class="xwikimessage"&gt;$message&lt;/p&gt;
#end
#macro(xwikimessageboxend)
      &lt;/div&gt;
    &lt;/div&gt;
#end

#macro(xwikimessagebox $title $message $urlyes $urlno $msgyes $msgno)
#xwikimessageboxstart($title $message)
      &lt;div class="buttons"&gt;&lt;a href="$urlyes" class="buttonwrapper"&gt;&lt;input type="button" class="button" value="$msgyes" onclick="location='$urlyes'; return false;"/&gt;&lt;/a&gt; &lt;a href="$urlno" class="buttonwrapper"&gt;&lt;input type="button" class="button secondary" value="$msgno" onclick="location='$urlno'; return false;"/&gt;&lt;/a&gt;&lt;/div&gt;
#xwikimessageboxend()
#end

#**
 * Displays a submit button, i.e. an &lt;tt&gt;input&lt;/tt&gt; element with &lt;tt&gt;type=submit&lt;/tt&gt;.
 * For styling purposes, the button is wrapped in a span element.
 * @param name The value of the &lt;tt&gt;name&lt;/tt&gt; attribute
 * @param shortcut The keyboard shortcut for this button. The value will be displayed
 *        as the title of the element. The actual shortcut is attached elsewhere, in
 *        the javascript code.
 * @param value The value of the &lt;tt&gt;value&lt;/tt&gt; attribute, i.e. the text displayed on
 *        the button.
 * @param class The class to use.
 *#
#macro(submitButton $name $shortcut $value $class)
&lt;input class="btn $!class" type="submit" name="$name"#if($keyboardShortcutsEnabled) title="$shortcut"#end value="$value"/&gt;
#end
#**
 * Displays a submit button for the editor. This macro calls submitButton,
 * composing all its parameters based on the action's identifier and the
 * identifier of the corresponding localized resources.
 * @param action The identifier of the button's action.
 * @param resourceIdentifier The key used to identify the localized resources.
 * @param class The class to use.
 *#
#macro(editActionButton $action $resourceIdentifier $class)
#submitButton("action_${action}", $services.localization.render("core.shortcuts.edit.${resourceIdentifier}"), $services.localization.render($resourceIdentifier), $class)
#end

#**
 * AJAX Live table that displays XWiki data.
 *
 * Example of usage, in syntax 2.0:
 * &lt;code&gt;
 * {{velocity}}
 * #set($columns = [ "_avatar", "first_name", "last_name", "email"])
 * #set($columnsProperties = {
 *                  "first_name" : { "type" : "text" , "size" : 10, "link" : "view"},
 *                  "last_name" : { "type" : "text" , "size" : 10, "link" : "view"},
 *                  "email" : { "type" : "text" , "size" : 20, "link" : "editor"},
 *                  "_avatar" : { "type" : "none" , "size" : 20, "link" : "none", "html" : "true", "sortable":false }
 *                })
 * #set($options = {  "className":"XWiki.XWikiUsers",
 *                    "translationPrefix" : "platform.index.",
 *                    "tagCloud" : true,
 *                    "rowCount": 15,
 *                    "javascriptName" : "MyModule.myTable",
 *                    "description: "The description of this table here", })
 * #livetable("userstable" $columns $columnsProperties $options)
 * {{/velocity}}
 * &lt;/code&gt;
 *
 * @param divid the id of the table div
 * @param collist the column list
 * @param colprops the columns properties
 * @param options the livetable options.
 *#
#macro(livetable $divid $collist $colprops $options)
## Open wiki syntax wrappers.
#if("$!options.outputOnlyHtml" != 'true')
## Do not indent:
#if($xwiki.getCurrentContentSyntaxId() != "xwiki/1.0")


## We don't clean the HTML because we control the markup and because we want to preserve the whitespace characters in the
## attribute values (e.g. if the live table id contains whitespaces)
{{html clean="false"}}
#else {pre} #end
#end
  ##
  ## SX deps.
  ##
  #set($ok = $xwiki.jsfx.use('js/xwiki/table/livetable.js', true))
  #set($ok = $xwiki.ssfx.use('js/xwiki/table/livetable.css', true))
  ##
  ## Options / defaults
  ##
  #if("$!options.translationPrefix" != '') #set($transprefix = $options.translationPrefix) #else #set($transprefix = '') #end
  #if("$!options.selectedColumn" != '')  #set($selectedColumn = $options.selectedColumn) #end
  #if("$!options.defaultOrder" == 'desc') #set($defaultOrder = 'desc') #else #set($defaultOrder = 'asc') #end
  #if("$!options.rowCount" != '') #set($count = $options.rowCount) #else #set($count = 15) #end
  #if("$!options.maxPages" != '') #set($maxPages = $options.maxPages) #else #set($maxPages = 10) #end
  #if("$!options.selectedColumn" != '') #set($selectedColumn = $options.selectedColumn) #end
  #if("$!options.callback" != '') #set($callback = $options.callback) #else #set($callback = '') #end
  #if("$!options.tagCloud" == '' || $options.tagCloud == false) #set($tagcloud=false) #else #set($tagcloud = true) #end
  #if ($options.selectedTags &amp;&amp; $options.selectedTags.size() &gt; 0)
    #set ($selectedTags = $options.selectedTags)
  #else
    #set ($selectedTags = [])
  #end
  #if("$!options.javascriptName" != '') #set($jsName = $options.javascriptName) #else #set($jsName = "livetable_$divid") #end
  #if("$!options.topFilters" != '') #set($topfilters = $options.topFilters) #end
  #if("$options.pageSize" == '' || $!options.pageSize == false) #set($hasPageSize=false) #else #set($hasPageSize = true) #end
  #if("$!options.pageSizeBounds" != '') #set($pageSizeBounds = $options.pageSizeBounds) #end
  #set ($queryFilters = $options.queryFilters)
  #if (!$queryFilters)
    #set ($queryFilters = 'currentlanguage,hidden')
  #end
  #set($classname = "$!options.className")
  ##
  ## Columns informations
  ##
  #set ($dataColumns = [])
  #set ($classParams = {})
  #foreach($colname in $collist)
    ## If the live table options don't specify which column to select then select the first non-special column.
    #if("$!selectedColumn" == '' &amp;&amp; !$colname.startsWith('_'))
      #set($selectedColumn = $colname)
    #end
    #if($colname != '_actions')
      #set ($discard = $dataColumns.add($colname))
      #set($propClassName = "$!{colprops.get($colname).get('class')}")
      #if($propClassName != '')
        #set ($discard = $classParams.put("${colname}_class", $propClassName))
      #end
      #set ($propMatchType = "$!colprops.get($colname).match")
      #if ($propMatchType != '')
        #set ($discard = $classParams.put("${colname}_match", $propMatchType))
      #end
    #end
  #end
  #if("$!options.url" != '')
    #set($dataurl = $options.url)
  #else
    #set ($parameters = {
      'outputSyntax': 'plain',
      'transprefix': $transprefix,
      'classname': $classname,
      'collist': $stringtool.join($dataColumns, ','),
      'queryFilters': $queryFilters
    })
    #set ($discard = $parameters.putAll($classParams))
    #set ($resultPage = $options.resultPage)
    #if ("$!resultPage" == '')
      #set ($resultPage = 'XWiki.LiveTableResults')
    #end
    #set ($dataurl = $xwiki.getURL($resultPage, 'get', "$escapetool.url($parameters)&amp;$!options.extraParams"))
  #end
  ##
  ## HTML Table
  ##
  #set ($htmlLiveTableId = $escapetool.xml($divid))
&lt;div class="xwiki-livetable-container"&gt;
  #if("$!topfilters" !='') #set($hasTopFilters = true) #else #set($hasTopFilters = false) #end
  #if($tagcloud || $hasTopFilters)
  &lt;div class="tipfilters"&gt;
  #end
  #if($hasTopFilters)
  &lt;div id="${htmlLiveTableId}-topfilters" class="xwiki-livetable-topfilters-tip #if($tagcloud)splitted#end"&gt;
    &lt;div&gt;
      &lt;div class="xwiki-livetable-topfilters-container"&gt;
      $topfilters
      &lt;/div&gt;
      &lt;div class="tippointer"&gt;
        &lt;div&gt;&lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  #end
  #if($tagcloud)
    #set($discard = $xwiki.ssx.use('XWiki.TagCloud'))
    &lt;div id="${htmlLiveTableId}-tagcloud" class="xwiki-livetable-tagcloud-tip hidden #if($hasTopFilters)splitted#end"&gt;
      &lt;div&gt;
        &lt;div class="xwiki-livetable-tagcloud-container"&gt;
          &lt;h2&gt;$services.localization.render('platform.livetable.tagsHelp') $services.localization.render('platform.livetable.tagsHelpCancel')&lt;/h2&gt;
          &lt;div class="xwiki-livetable-tagcloud"&gt;&lt;/div&gt;
        &lt;/div&gt;
        &lt;div class="tippointer"&gt;
          &lt;div&gt;&lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  #end
  #if($tagcloud || $hasTopFilters)
  &lt;/div&gt;
  #end
  &lt;table id="${htmlLiveTableId}" class="xwiki-livetable"&gt;
    #if("$!options.description" != '')
      &lt;caption class="sr-only"&gt;$options.description&lt;/caption&gt;
    #end
    &lt;tr&gt;
      &lt;td class="xwiki-livetable-pagination"&gt;
        &lt;span id="${htmlLiveTableId}-limits" class="xwiki-livetable-limits"&gt;&lt;/span&gt;
  #if($hasPageSize)
        &lt;span id="${htmlLiveTableId}-pagesize" class="xwiki-livetable-pagesize"&gt;
            &lt;span&gt;$services.localization.render('platform.livetable.pagesizeLabel')&lt;/span&gt;
            &lt;span class="xwiki-livetable-pagesize-content" &gt;&lt;/span&gt;
        &lt;/span&gt;
  #end
        &lt;span id="${htmlLiveTableId}-ajax-loader" class="xwiki-livetable-loader hidden"&gt;
          &lt;img src="$xwiki.getSkinFile('icons/xwiki/ajax-loader-large.gif')" alt="$escapetool.xml($services.localization.render('platform.livetable.loading'))" title="" /&gt;
        &lt;/span&gt;
        &lt;span class="controlPagination"&gt;
          &lt;a title="$escapetool.xml($services.localization.render('platform.livetable.paginationPagePrevTitle'))" class="prevPagination" href="#"&gt;&lt;span class="hidden"&gt;$services.localization.render('platform.livetable.paginationPagePrevTitle')&lt;/span&gt;&lt;/a&gt;
          &lt;a title="$escapetool.xml($services.localization.render('platform.livetable.paginationPageNextTitle'))" class="nextPagination" href="#"&gt;&lt;span class="hidden"&gt;$services.localization.render('platform.livetable.paginationPageNextTitle')&lt;/span&gt;&lt;/a&gt;
        &lt;/span&gt;
        &lt;span class="pagination"&gt;
          &lt;span class="xwiki-livetable-pagination-text"&gt;$services.localization.render('platform.livetable.paginationPage')&lt;/span&gt;
          &lt;span class="xwiki-livetable-pagination-content" &gt;&lt;/span&gt;
        &lt;/span&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class="xwiki-livetable-display-container"&gt;
        &lt;table class="xwiki-livetable-display"&gt;
          &lt;thead class="xwiki-livetable-display-header"&gt;
            &lt;tr&gt;
            #set($columnCount = 0)
            #foreach($colname in $collist)
              #set($colprop = $colprops.get($colname))
              #if(("$!colprop.filterable" == '' || $colprop.filterable != false) &amp;&amp; "$!colname" != '_actions')
                #set($isFilterable = true)
              #else
                #set($isFilterable = false)
              #end
              #if(("$!colprop.sortable" == '' || $colprop.sortable != false) &amp;&amp; "$!colname" != '_actions')
                #set($isSortable = true)
              #else
                #set($isSortable = false)
              #end
              ## Get the column's display name to use in the header.
              #set($displayName = "#getLivetableColumnDisplayName($colname, $colprop, $transprefix)")
              &lt;th class="xwiki-livetable-display-header-text $!colprop.headerClass #if($!colprop.type=='hidden')hidden#end #if($isSortable)sortable #if($colname == $selectedColumn)selected $defaultOrder#else asc#end#end#if ($colname == '_avatar') avatar#end" scope="col"&gt;
                #if($isFilterable &amp;&amp; ("$!colprop.type"=="text"||"$!colprop.type"=="number"))&lt;label for="xwiki-livetable-${htmlLiveTableId}-filter-${velocityCount}"&gt;#end
                #if($isSortable)&lt;a data-rel="${colname}"&gt;#end
                $displayName
                #if($isSortable)&lt;/a&gt;#end
                #if($isFilterable &amp;&amp; ("$!colprop.type"=="text"||"$!colprop.type"=="number"))&lt;/label&gt;#end
                #set($columnCount = $mathtool.add($columnCount, 1))
              &lt;/th&gt;
            #end
            &lt;/tr&gt;
            #livetable_filters($collist $colprops $classname)
            &lt;tr class="xwiki-livetable-initial-message"&gt;
              &lt;td colspan="${columnCount}"&gt;
                &lt;div class="warningmessage"&gt;$services.localization.render('platform.livetable.environmentCannotLoadTableMessage')&lt;/div&gt;
              &lt;/td&gt;
            &lt;/tr&gt;
          &lt;/thead&gt;
          &lt;tbody id="${htmlLiveTableId}-display" class="xwiki-livetable-display-body"&gt;&lt;tr&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;
        &lt;/table&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class="xwiki-livetable-pagination"&gt;
        &lt;span class="xwiki-livetable-limits"&gt;&lt;/span&gt;
        &lt;span class="controlPagination"&gt;
          &lt;a title="$escapetool.xml($services.localization.render('platform.livetable.paginationPagePrevTitle'))" class="prevPagination" href="#"&gt;&lt;span class="hidden"&gt;$services.localization.render('platform.livetable.paginationPagePrevTitle')&lt;/span&gt;&lt;/a&gt;
          &lt;a title="$escapetool.xml($services.localization.render('platform.livetable.paginationPageNextTitle'))" class="nextPagination" href="#"&gt;&lt;span class="hidden"&gt;$services.localization.render('platform.livetable.paginationPageNextTitle')&lt;/span&gt;&lt;/a&gt;
        &lt;/span&gt;
        &lt;span class="pagination"&gt;
          &lt;span class="xwiki-livetable-pagination-text"&gt;$services.localization.render('platform.livetable.paginationPage')&lt;/span&gt;
          &lt;span class="xwiki-livetable-pagination-content" &gt;&lt;/span&gt;
        &lt;/span&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/table&gt;
  &lt;div id="${htmlLiveTableId}-inaccessible-docs" class="hidden"&gt;
    #info($services.localization.render('rightsmanager.documentrequireviewrights'))
  &lt;/div&gt;
  &lt;script type="text/javascript"&gt;
  //&lt;![CDATA[
(function() {
  function startup() {
    // Make sure the Livetable widgets exists (It does not in the WYSIWYG for example).
    if (XWiki &amp;&amp; XWiki.widgets &amp;&amp; XWiki.widgets.LiveTable) {
      #set ($jsLiveTableId = $escapetool.javascript($divid))
      #set ($liveTableParams = {
        'maxPages': $maxPages,
        'limit': $count,
        'selectedTags': $selectedTags
      })
      #if ($hasTopFilters)
        #set ($cssLiveTableId = $escapetool.css($divid))
        #set ($discard = $liveTableParams.put('filterNodes', [
          "$escapetool.h$cssLiveTableId .xwiki-livetable-display-filters",
          "${jsLiveTableId}-topfilters"
        ]))
      #end
      #if ($hasPageSize &amp;&amp; "$!pageSizeBounds" != '')
        #set ($discard = $liveTableParams.put('pageSizeBounds', $pageSizeBounds))
      #end
      #set ($callbackParam = "#livetablecallback($divid $collist $colprops $transprefix), ")
      #if ($!callback != '')
        #set ($callbackParam = "$callback, ")
      #end
      window[$jsontool.serialize($jsName)] = new XWiki.widgets.LiveTable("$dataurl", "$jsLiveTableId",
        $callbackParam$jsontool.serialize($liveTableParams));
      #if ($hasPageSize)
        document.observe("xwiki:livetable:${jsLiveTableId}:loadingEntries", function() {
          $('${jsLiveTableId}-pagesize').addClassName("hidden");
        });
        document.observe("xwiki:livetable:${jsLiveTableId}:loadingComplete", function() {
          $('${jsLiveTableId}-pagesize').removeClassName("hidden");
        });
      #end
      return true;
    }
    return false;
  }
  // Initialize liveTable
  (XWiki &amp;&amp; XWiki.isInitialized &amp;&amp; startup()) || document.observe('xwiki:livetable:loading', startup);
})();
   //]]&gt;
  &lt;/script&gt;
&lt;/div&gt;## xwiki-livetable-container
## Close wiki syntax wrappers. Do not modify the indentation below or it will generate unwanted paragraphs!
#if("$!options.outputOnlyHtml" != 'true')#if($xwiki.getCurrentContentSyntaxId() != "xwiki/1.0"){{/html}}

#else{/pre}#end##
#end## end-wrappers
#end## end-livetable-macro

#macro (livetable_filters $columns $columnsProperties $xclassName)
  &lt;tr class="xwiki-livetable-display-filters"&gt;
    #foreach ($column in $columns)
      #set ($columnProperties = $columnsProperties.get($column))
      #if ($columnProperties.type != 'hidden')
        &lt;td class="xwiki-livetable-display-header-filter"&gt;
          #if ($columnProperties.filterable != false)
            #set ($columnXClassName = $columnProperties.get('class'))
            #set ($columnXPropertyName = $column)
            #if (!$columnXClassName)
              #if ($column.startsWith('doc.'))
                #set ($columnXClassName = 'XWiki.DocumentClass')
                #set ($columnXPropertyName = $column.substring(4))
              #else
                #set ($columnXClassName = $xclassName)
              #end
            #end
            #set ($xclass = $xwiki.getDocument($columnXClassName).getxWikiClass())
            #set ($xproperty = $xclass.get($columnXPropertyName))
            #livetable_filter($column $columnProperties $xproperty)
          #end
        &lt;/td&gt;
      #end
    #end
  &lt;/tr&gt;
#end

#macro (livetable_filter $column $columnProperties $xproperty)
  #set ($filterType = $columnProperties.type)
  #if ("$!filterType" == '')
    ## Determine the filter type from the xproperty type.
    #set ($filterTypeByXPropertyType = {
      'Boolean': 'boolean',
      'DBList': 'suggest',
      'DBTreeList': 'suggest',
      'Date': 'date',
      'Email': 'text',
      'Groups': 'suggest',
      'Number': 'number',
      'Page': 'text',
      'StaticList': 'list',
      'String': 'text',
      'TextArea': 'text',
      'Users': 'suggest'
    })
    #set ($filterType = $filterTypeByXPropertyType.get($xproperty.classType))
    #if ("$!filterType" == '')
      ## If we get here then it means the column is filterable but we could not determine the filter type. Use the text
      ## filter in this case because it is the most generic.
      #set ($filterType = 'text')
    #end
  #end
  #if ($filterType == 'list' || $filterType == 'multilist')
    &lt;select id="xwiki-livetable-${htmlLiveTableId}-filter-$velocityCount" name="$column"
      #if ($filterType == 'multilist')
        #set ($discard = $xwiki.jsfx.use('js/xwiki/table/livetablemulti.js', true))
        #set ($discard = $xwiki.linkx.use($services.webjars.url('bootstrap-select', 'css/bootstrap-select.css'),
          {'type': 'text/css', 'rel': 'stylesheet'}))
        class="xwiki-livetable-multilist" multiple="multiple"&gt;
      #else
        &gt;&lt;option value=""&gt;$services.localization.render('platform.livetable.selectAll')&lt;/option&gt;
        &lt;option disabled="disabled"&gt;────&lt;/option&gt;
      #end
    #set ($storedValues = $xproperty.listValues)
    #set ($displayedValues = $xproperty.mapValues)
    #foreach ($storedValue in $storedValues)
      #set ($l10nKey = "${xproperty.className}_${column}_$storedValue")
      #set ($displayedValue = $services.localization.render($l10nKey))
      #if ($displayedValue == $l10nKey)
        #set ($displayedValue = $displayedValues.get($storedValue).value)
      #end
      &lt;option value="$storedValue"&gt;$displayedValue&lt;/option&gt;
    #end
    &lt;/select&gt;
  #elseif ($filterType == 'boolean')
    &lt;select id="xwiki-livetable-${htmlLiveTableId}-filter-$velocityCount" name="$column"&gt;
      &lt;option value=""&gt;$services.localization.render('platform.livetable.selectAll')&lt;/option&gt;
      &lt;option value="0"&gt;$services.localization.render('no')&lt;/option&gt;
      &lt;option value="1"&gt;$services.localization.render('yes')&lt;/option&gt;
    &lt;/select&gt;
  #elseif ($filterType == 'text' || $filterType == 'number')
    &lt;input id="xwiki-livetable-${htmlLiveTableId}-filter-$velocityCount" name="$column" type="text"
      #if ("$!columnProperties.size" != '')size="$!escapetool.xml($columnProperties.size)"#end
      title="$escapetool.xml($services.localization.render('platform.livetable.filtersTitle',
        [$services.localization.render("${transprefix}$column")]))" /&gt;
  #elseif ($filterType == 'date')
    #set ($discard = $xwiki.jsfx.use('js/xwiki/table/livetabledate.js', true))
    #set ($discard = $xwiki.linkx.use($services.webjars.url('bootstrap-daterangepicker',
      'css/bootstrap-daterangepicker.css'), {'type': 'text/css', 'rel': 'stylesheet'}))
    ## Hidden input for date fields allows us to send timestamps to the server while displaying pretty dates.
    &lt;input id="xwiki-livetable-${htmlLiveTableId}-filter-$velocityCount" name="$column" type="hidden" /&gt;
    #set ($dateFormat = $xproperty.getValue('dateFormat'))
    #if ("$!dateFormat" == '')
      #set ($dateFormat = $xwiki.getXWikiPreference('dateformat', 'yyyy/MM/dd HH:mm'))
    #end
    &lt;input type="text" data-type="date" data-dateformat="$escapetool.xml($dateFormat)"
      #if ("$!columnProperties.size" != '')size="$!escapetool.xml($columnProperties.size)"#end
      title="$escapetool.xml($services.localization.render('platform.livetable.filtersTitle',
      [$services.localization.render("${transprefix}$column")]))" /&gt;
  #elseif ($filterType == 'suggest' &amp;&amp; $xproperty)
    #set ($discard = $xwiki.linkx.use($services.webjars.url('selectize.js', 'css/selectize.bootstrap3.css'),
      {'type': 'text/css', 'rel': 'stylesheet'}))
    #set ($discard = $xwiki.ssfx.use('uicomponents/suggest/xwiki.selectize.css', true))
    #set ($discard = $xwiki.jsfx.use('uicomponents/suggest/suggestPropertyValues.js',
      {'forceSkinAction' : true, 'language' : $xcontext.locale}))
    &lt;select id="xwiki-livetable-${htmlLiveTableId}-filter-$velocityCount" name="$!escapetool.xml($column)"
      class="suggest-propertyValues" multiple="multiple" size="1"
      data-className="$!escapetool.xml($xproperty.className)" data-propertyName="$!escapetool.xml($xproperty.name)"&gt;
    &lt;/select&gt;
  #end
#end

#**
 * Internal macro - Determine the name to be displayed in a livetable's column header. Strategy is as follows :
 * - If defined, the 'displayName' passed as a column option wins.
 * - If not, and if a i18n prefix has been passed, we use the localization tool with the prefix + the column name.
 * - Finally, we fall back on the column name.
 *
 * @param colname the column name
 * @param colprop the column properties map
 * @param transprefix the translations prefix to use
 *
 * @internal
 *#
##
#macro(getLivetableColumnDisplayName $colname $colprop $transprefix)
  #if("$!colprop.displayName" != '')
    #set($displayName = $colprop.displayName)##
  #elseif($transprefix != '')
    #set($displayName = $services.localization.render("${transprefix}${colname}"))##
  #else
    #set($displayName = $colname)##
  #end
$displayName##
#end

#**
 * Internal macro - Used by the livetable macro to generate a JavaScript anonymous function
 * that is passed to the LiveTable object constructor. This is function is dynamically written
 * according to columns properties passed to the livetable macro.
 *
 * @param collist the list of columns
 * @param colprops the columns properties
 * @param transprefix the translation prefix
 *
 * @internal
 *#
#macro(livetablecallback $divid $collist $colprops $transprefix)
function (row, i, table) {
  // This callback method has been generated from Velocity.
  ## Translate the column descriptor.
  #foreach ($entry in $colprops.entrySet())
    #if ("$!entry.value.displayName" == '' &amp;&amp; "$!transprefix" != '')
      #set ($entry.value.displayName = $services.localization.render("${transprefix}$entry.key"))
    #end
  #end
  #set ($actionsDescriptor = $colprops.get('_actions'))
  #if ($actionsDescriptor)
    #if (!$actionsDescriptor.labels)
      #set ($actionsDescriptor.labels = {})
    #end
    #foreach ($action in $actionsDescriptor.actions)
      #if (!$actionsDescriptor.labels.get($action))
        #if ("$!transprefix" != '' &amp;&amp; $services.localization.get("${transprefix}_actions.$action"))
          #set ($discard = $actionsDescriptor.labels.put($action,
            $services.localization.render("${transprefix}_actions.$action")))
        #elseif ($services.localization.get("platform.livetable._actions.$action"))
          #set ($discard = $actionsDescriptor.labels.put($action,
            $services.localization.render("platform.livetable._actions.$action")))
        #end
      #end
    #end
  #end
  var columns = $jsontool.serialize($collist);
  var columnDescriptors = $jsontool.serialize($colprops);
  var className = $jsontool.serialize($classname);
  if (!row['doc_viewable']) {
    $($jsontool.serialize("${divid}-inaccessible-docs")).removeClassName('hidden');
  }
  ## NOTE: Don't use Velocity code below this line!
  var tr = new Element('tr');
  columns.forEach(function(column) {
    var descriptor = columnDescriptors[column] || {};
    if (descriptor.type === 'hidden') {
      return;
    }
    // The column's display name to be used when displaying the reponsive version.
    var displayName = descriptor.displayName || column;
    var fieldName = column.replace(/^doc\./, 'doc_');
    if (column === '_actions') {
      var adminActions = ['admin', 'rename', 'rights'];
      var td = new Element('td', {
        'class': 'actions',
        'data-title': displayName
      });
      (descriptor.actions || []).forEach(function(action, index) {
        if (row['doc_has' + action] || action === 'view' || (row['doc_has' + action] === undefined &amp;&amp;
            (row['doc_hasadmin'] || adminActions.indexOf(action) &lt; 0))) {
          if (index &gt; 0) {
            td.insert(' ');
          }
          var link = new Element('a', {
            'href': row['doc_' + action + '_url'],
            'class': 'action action' + action
          }).update((descriptor.labels || {})[action] || action);
          if (descriptor.ajaxActions &amp;&amp; descriptor.ajaxActions[action]) {
            link.observe('click', function(event) {
              event.stop();
              new Ajax.Request(this.href, {
                onSuccess: function() {
                  eval((descriptor.actionCallbacks || {})[action]);
                }
              });
            }.bindAsEventListener(link));
          }
          td.insert(link);
        }
      });
      tr.appendChild(td);
    } else {
      var td = new Element('td', {
        'class': [
          fieldName,
          'link' + (descriptor.link || ''),
          'type' + (descriptor.type || '')
        ].join(' '),
        'data-title': displayName
      });
      var container = td;
      if (descriptor.link &amp;&amp; row['doc_viewable']) {
        var link = new Element(descriptor.link === 'editor' ? 'span' : 'a');
        // Automatic: the link URL is in JSON results, with the '_url' sufix.
        if (descriptor.link === 'auto') {
          link.href = row[fieldName + '_url'] || row['doc_url'];
        } else if (descriptor.link === 'field') {
          if (row[fieldName + '_url']) {
            link.href = row[fieldName + '_url'];
          }
        // Property editor
        } else if (descriptor.link === 'editor') {
          var propertyClassName = descriptor['class'] || className;
          td.observe('click', function(event) {
            var tag = event.element().down('span') || event.element();
            editProperty(row['doc_fullName'], propertyClassName, column, function(value) {
              tag.innerHTML = value;
            });
          });
        // Author, space or wiki link.
        } else if (row['doc_' + descriptor.link + '_url']) {
          link.href = row['doc_' + descriptor.link + '_url'];
        } else {
          link.href = row['doc_url'];
        }
        td.appendChild(link);
        container = link;
      }
      // The value can be passed as a string..
      if (descriptor.html + '' === 'true') {
        container.innerHTML = row[fieldName] || '';
      } else if (row[fieldName] !== undefined &amp;&amp; row[fieldName] !== null) {
        var text = row[fieldName] + '';
        if (fieldName === 'doc_name' &amp;&amp; !row['doc_viewable']) {
          text += '*';
        }
        container.update(text.escapeHTML());
      }
      tr.appendChild(td);
    }
  });
  return tr;
}
#end
##
##
#**
 * Generates a vertical menu item from an object (a map)
 *
 * Expected format:
 * item = map with the following fields:
 *        'id'       : mandatory
 *        'name'     : the text displayed for the corresponding menu item;
 *                     optional, defaults to
 *                     $services.localization.render("$!{translationPrefix}${item.id}")
 *        'url'      : the "action" of the menu item; optional
 *        'cssClass' : a specific css class for the menu item for custom
 *                     styling; optional, defaults to ''
 *        'children' : vector of items, allowing to recursively define submenus
 *
 * @param $item the menu item object, in the format described above
 * @param $level the current level of the item, of the form '\*+'; the number of
 *        stars indicates the depth of the item in the menu
 * @param $options a map of options, where the following entries are currently used:
 *        'translationPrefix' :  the translation prefix added to the id of each
 *                     item, in order to generate the name; ignored for items whose
 *                     name is specified
 *        'crtItemId': identifier of the current menu item (for differential styling)
 *#
#macro(verticalNavigationItem $item $level $options)
  #set ($class = "$!{item.cssClass}")
  #set ($hasChildren = ($item.children &amp;&amp; $item.children.size() &gt; 0))
  #if ($hasChildren)
    #set ($class = "$class group")
  #end
  #if ($options.crtItemId == $item.id)
    #set ($class = "$class current")
    #if ($hasChildren)
      #set ($class = "$class current-group")
    #end
  #end
  #set ($class = $class.trim())
  #set ($name = "$!{item.name}")
  #if ($name == '')
    #set ($name = $services.localization.render("$!{options.translationPrefix}${item.id}"))
  #end
  $level (% id="vertical-menu-${item.id}" class="${class}" %){{html}}&lt;a #if ("$!{item.url}" != '')href="$item.url"#{end}&gt;#if($item.glyphicon)$services.icon.renderHTML($item.glyphicon) #end$name&lt;/a&gt;{{/html}}
  #if ($hasChildren)
    #set ($children = [])
    #sortCollectionOfMapsByField($item.children, 'order', 99999, 'asc', $children)
    #foreach ($child in $children)
      #verticalNavigationItem($child $level.concat('*') $options)
    #end
  #end
#end

#**
 * Start a breadcrumb.
 *
 * Should be used in HTML.
 *#
#macro(breadcrumb_start)
  &lt;ol class="breadcrumb"&gt;
#end

#**
 * End of a breadcrumb
 *
 * Should be used in HTML.
 *#
#macro(breadcrumb_end)
  &lt;/ol&gt;
#end

#**
 * Display a line in the breadcrumb
 *
 * Should be used in HTML.
 *#
#macro(breadcrumb_line $link $title)
  &lt;li&gt;&lt;a href="$link"&gt;$title&lt;/a&gt;&lt;/li&gt;
#end

#**
 * Display the current line in the breadcrumb
 *
 * Should be used in HTML.
 *#
#macro(breadcrumb_current_line $title)
  &lt;li class="active"&gt;$title&lt;/li&gt;
#end

###
### Glyph Icon
###
### @param iconName The name of the icon to display, without the glyphicon prefix (eg: 'globe')
#macro(glyphicon $iconName)
#if("$!iconName"!='')&lt;span class="glyphicon glyphicon-${iconName}"&gt;&lt;/span&gt;#end
#end

#macro (livetable_filter $column $columnProperties $xproperty)
  #set ($filterType = $columnProperties.type)
  #if ("$!filterType" == '')
    ## Determine the filter type from the xproperty type.
    #set ($filterTypeByXPropertyType = {
      'Boolean': 'boolean',
      'DBList': 'suggest',
      'DBTreeList': 'suggest',
      'Date': 'date',
      'Email': 'text',
      'Groups': 'suggest',
      'Number': 'number',
      'Page': 'text',
      'StaticList': 'list',
      'String': 'text',
      'TextArea': 'text',
      'Users': 'suggest'
    })
    #set ($filterType = $filterTypeByXPropertyType.get($xproperty.classType))
    #if ("$!filterType" == '')
      ## If we get here then it means the column is filterable but we could not determine the filter type. Use the text
      ## filter in this case because it is the most generic.
      #set ($filterType = 'text')
    #end
  #end
  #if ($filterType == 'list' || $filterType == 'multilist')
    &lt;select id="xwiki-livetable-${htmlLiveTableId}-filter-$velocityCount" name="$column"
      #if ($filterType == 'multilist')
        class="xwiki-livetable-multilist" multiple="multiple"&gt;
      #else
        &gt;&lt;option value=""&gt;$services.localization.render('platform.livetable.selectAll')&lt;/option&gt;
        &lt;option disabled="disabled"&gt;────&lt;/option&gt;
      #end
    #set ($storedValues = $xproperty.listValues)
    #set ($displayedValues = $xproperty.mapValues)
    #foreach ($storedValue in $storedValues)
      #set ($l10nKey = "${xproperty.className}_${column}_$storedValue")
      #set ($displayedValue = $services.localization.render($l10nKey))
      #if ($displayedValue == $l10nKey)
        #set ($displayedValue = $displayedValues.get($storedValue).value)
      #end
      &lt;option value="$storedValue"&gt;$displayedValue&lt;/option&gt;
    #end
    &lt;/select&gt;
  #elseif ($filterType == 'boolean')
    &lt;select id="xwiki-livetable-${htmlLiveTableId}-filter-$velocityCount" name="$column"&gt;
      &lt;option value=""&gt;$services.localization.render('platform.livetable.selectAll')&lt;/option&gt;
      &lt;option value="0"&gt;$services.localization.render('no')&lt;/option&gt;
      &lt;option value="1"&gt;$services.localization.render('yes')&lt;/option&gt;
    &lt;/select&gt;
  #elseif ($filterType == 'text' || $filterType == 'number')
    &lt;input id="xwiki-livetable-${htmlLiveTableId}-filter-$velocityCount" name="$column" type="text"
      #if ("$!columnProperties.size" != '')size="$!escapetool.xml($columnProperties.size)"#end
      title="$escapetool.xml($services.localization.render('platform.livetable.filtersTitle',
        [$services.localization.render("${transprefix}$column")]))" /&gt;
  #elseif ($filterType == 'suggest' &amp;&amp; $xproperty)
    #set ($discard = $xwiki.linkx.use($services.webjars.url('selectize.js', 'css/selectize.css'),
      {'type': 'text/css', 'rel': 'stylesheet'}))
    #set ($discard = $xwiki.ssfx.use('uicomponents/suggest/xwiki.selectize.css', true))
    ## we replace the call to the default suggestPropertyValues.js by a JS provided by DemarchesSheet
    #set ($discard = $xwiki.jsx.use('Demarches.Code.DemarchesSheet',
      {'forceSkinAction' : true, 'language' : $xcontext.locale}))
    &lt;select id="xwiki-livetable-${htmlLiveTableId}-filter-$velocityCount" name="$!escapetool.xml($column)"
      class="suggest-propertyValues" multiple="multiple" size="1"
      data-className="$!escapetool.xml($xproperty.className)" data-propertyName="$!escapetool.xml($xproperty.name)"&gt;
    &lt;/select&gt;
  #end
#end</content>
    </property>
    <property>
      <path>macros.vm</path>
    </property>
  </object>
  <object>
    <name>Demarches.Code.WikiDemarchesSkin</name>
    <number>11</number>
    <className>XWiki.XWikiSkinFileOverrideClass</className>
    <guid>1a5a32e8-4c0d-45da-bfe9-9f3e36033d95</guid>
    <class>
      <name>XWiki.XWikiSkinFileOverrideClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <content>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>content</name>
        <number>2</number>
        <prettyName>Content</prettyName>
        <rows>15</rows>
        <size>80</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </content>
      <path>
        <disabled>0</disabled>
        <name>path</name>
        <number>1</number>
        <prettyName>Path</prettyName>
        <size>255</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </path>
    </class>
    <property>
      <content>## We handle the ability to disable the minification, by choosing the file extension to add to the script paths.
#set ($jsExtension = '.min.js')
#if (!$services.debug.minify)
  #set ($jsExtension = '.js')
#end
##
## JS Libraries.
##
&lt;script type="text/javascript" src="$services.webjars.url('requirejs', "require$jsExtension")"&gt;&lt;/script&gt;
##
$xwiki.jsfx.use('js/prototype/prototype.js', {'defer': false})##
$xwiki.jsfx.use('js/scriptaculous/effects.js', true)##
## xwiki-min.js and xwiki-min.css aggregate a couple of JavaScript and CSS files that are used on each page. In order to
## help debugging we provide/bundle the individual files also and you can load them instead of the aggregated files by
## passing 'minify=false' in the request query string or setting debug.minify property in xwiki.properties file.
#if (!$services.debug.minify)
  ## entityReferences.js should be loaded first because it is used by xwiki.js
  $xwiki.jsfx.use('uicomponents/model/entityReference.js', {'defer': false})##
  $xwiki.jsfx.use('js/xwiki/xwiki.js', {'forceSkinAction': true, 'defer': false})##
  $xwiki.jsfx.use('js/xwiki/widgets/modalPopup.js', true)##
  $xwiki.ssfx.use('js/xwiki/widgets/modalPopup.css', {'forceSkinAction' : true, 'colorTheme' : $themeDoc})##
  $xwiki.jsfx.use('js/xwiki/widgets/jumpToPage.js', true)##
  $xwiki.ssfx.use('js/xwiki/widgets/jumpToPage.css', {'forceSkinAction' : true, 'language' : $xcontext.locale})##
  $xwiki.jsfx.use('uicomponents/widgets/confirmationBox.js', true)##
  $xwiki.ssfx.use('uicomponents/widgets/confirmationBox.css', true)##
  $xwiki.jsfx.use('uicomponents/widgets/confirmedAjaxRequest.js', true)##
  $xwiki.jsfx.use('uicomponents/widgets/notification.js', true)##
  $xwiki.ssfx.use('uicomponents/widgets/notification.css', true)##
  $xwiki.jsfx.use('uicomponents/widgets/list/xlist.js')##
  $xwiki.jsfx.use('uicomponents/suggest/suggest.js', {'forceSkinAction' : true, 'language' : $xcontext.locale})##
  $xwiki.ssfx.use('uicomponents/suggest/suggest.css', true)##
#else
  $xwiki.jsfx.use('js/xwiki/xwiki-min.js', {'forceSkinAction': true, 'defer': false, 'language': $xcontext.locale})##
  $xwiki.ssfx.use('css/xwiki-min.css', {'forceSkinAction': true, 'colorTheme': $themeDoc, 'language': $xcontext.locale})##
#end
$xwiki.jsfx.use("flamingo$jsExtension", {'forceSkinAction' : true, 'language' : $xcontext.locale})##
#if($xwiki.exists('XWiki.SearchSuggestConfig'))
  ## Hook to request the search suggest script if search suggest configuration is present.
  ## We can't just have it as a always-use SSX yet since we compute a hash to be sure to refresh
  ## the file when the configuration changes.
  ## Ideally, this code should be located in a interface extension, in the search application.
  #set($searchSuggestConfigDocument = $xwiki.getDocument('XWiki.SearchSuggestConfig'))
  #set($searchSuggestConfigObject = $searchSuggestConfigDocument.getObject('XWiki.SearchSuggestConfig'))
  #if($searchSuggestConfigObject.getProperty('activated').value == 1)
    #set($searchSuggestConfigHash = '')
    #foreach($source in $searchSuggestConfigDocument.getObjects('XWiki.SearchSuggestSourceClass'))
      #if($source.getValue('activated') == 1)
        #set($sourceId = "${source.getValue('name')}:${source.getValue('url')}:${source.getValue('highlight')}:${source.getValue('icon')}}")
        #set($searchSuggestConfigHash = "${searchSuggestConfigHash}|${sourceId}")
      #end
    #end
    $xwiki.jsfx.use('uicomponents/search/searchSuggest.js', {
      'forceSkinAction' : true,
      'h' : $searchSuggestConfigHash.hashCode()
    })##
    $xwiki.ssfx.use('uicomponents/search/searchSuggest.css', true)##
  #end
#end
#set($editActions = ['edit', 'inline', 'admin'])
#if($editActions.contains($xcontext.action))
  $xwiki.jsfx.use('uicomponents/lock/lock.js')##
  $xwiki.jsfx.use('uicomponents/widgets/validation/livevalidation_prototype.js')##
  $xwiki.ssfx.use('uicomponents/widgets/validation/livevalidation.css', true)##
#end
##
## Hooks for inserting JavaScript skin extensions
##
#javaScriptExtensionHooks
##
## Compatibility "aspect" file for deprecated code.
## Placed at the very end of the stream so that skin file extensions code can be deprecated easily as well.
##
&lt;script type="text/javascript" src="$xwiki.getSkinFile("js/xwiki/compatibility.js", false)" defer="defer"&gt;&lt;/script&gt;
## Marker script that signals that all the deferred scripts have indeed been executed, guarding against a premature dom:loaded event
&lt;script type="text/javascript" src="$xwiki.getSkinFile("js/xwiki/markerScript.js", false)" defer="defer"&gt;&lt;/script&gt;
&lt;!--[if lt IE 9]&gt;
  ## HTML5Shiv enable the compatibility with IE8
  &lt;script src="$services.webjars.url('html5shiv', 'html5shiv.min.js')"&gt;&lt;/script&gt;
  ## Respond.js implements the CSS 3 media queries for IE8
  &lt;script type="text/javascript" src="$services.webjars.url('respond', 'dest/respond.min.js')" defer="defer"&gt;&lt;/script&gt;
&lt;![endif]--&gt;
&lt;script type="text/javascript"&gt;
// &lt;![CDATA[
## Requirejs will automatically add a ".js" suffix if the generated URL doesn't contain a "?". It happens that we
## don't generate a URL with "?" when we export in HTML for example. In this case we remove the ".js" suffix since
## requirejs will add one...
## Note that we cannot do this generically in the webjars module when exporting in HTML because the webjars module
## provide generic URLs and they don't all go through requirejs...
## Note that this comment and code below are not correctly indentend voluntarily in order to generate nicely formatted
## (and valid) code at runtime!
#macro(removeJsSuffix $expr)
## Note that velocity takes argument references by name (see: https://velocity.apache.org/engine/releases/velocity-1.5/user-guide.html#velocimacros).
## So we set the value of the $expr in the $url variable to not execute $expr multiple times.
#set ($url = $expr)
#if (!$url.contains('?'))$stringtool.removeEnd($url, '.js')#else$url#{end}
#end
##
## Start the requirejs config.
##
require.config({
  paths: {
    'jquery': '#removeJsSuffix($services.webjars.url("jquery", "jquery${jsExtension}"))',
    'bootstrap': '#removeJsSuffix($services.webjars.url("bootstrap", "js/bootstrap${jsExtension}"))',
    'xwiki-meta': '$stringtool.removeEnd($xwiki.getSkinFile('js/xwiki/meta.js'), '.js')',
    'xwiki-events-bridge': "$stringtool.removeEnd($xwiki.getSkinFile('js/xwiki/eventsBridge.js'), '.js')",
    'iscroll': '#removeJsSuffix($services.webjars.url('iscroll/5.1.3/build/iscroll-lite.js'))',
#if ($displayDrawer)
    'drawer': '#removeJsSuffix($services.webjars.url('drawer', "js/jquery.drawer${jsExtension}"))',
#end
    'deferred': "$stringtool.removeEnd($xwiki.getSkinFile('uicomponents/require/deferred.js'), '.js')"
  },
  shim: {
#if ($displayDrawer)
    'drawer': ['jquery', 'iscroll'],
#end
    'bootstrap' : ['jquery']
  },
  ## see: http://requirejs.org/docs/jquery.html#noconflictmap to see why this works.
  map: {
    '*': {
      'jquery': 'jQueryNoConflict'
    },
    'jQueryNoConflict': {
      'jquery': 'jquery'
    },
  }
});
define('jQueryNoConflict', ['jquery'], function ($) {
    return $.noConflict();
});
if (Prototype.BrowserFeatures.ElementExtensions) {
  require(['jquery', 'bootstrap'], function ($) {
    // Fix incompatibilities between BootStrap and Prototype
    var disablePrototypeJS = function (method, pluginsToDisable) {
      var handler = function (event) {
        event.target[method] = undefined;
        setTimeout(function () {
            delete event.target[method];
        }, 0);
      };
      pluginsToDisable.each(function (plugin) { 
          $(window).on(method + '.bs.' + plugin, handler); 
      });
    },
    pluginsToDisable = ['collapse', 'dropdown', 'modal', 'tooltip', 'tab', 'popover'];
    disablePrototypeJS('show', pluginsToDisable);
    disablePrototypeJS('hide', pluginsToDisable);
  });
}
#if ($displayDrawer)
require(['jquery', 'drawer'], function($) {
  $(document).ready(function() {
    $('body').drawer();
  });
});
#end
XWiki.webapppath = "${xwiki.webAppPath}";
XWiki.servletpath = "${xwiki.servletPath}";
XWiki.contextPath = "${request.contextPath}";
XWiki.mainWiki = "$!{escapetool.javascript(${xcontext.mainWikiName})}";
// Deprecated: replaced by meta data in the HTML element
XWiki.currentWiki = "$!{escapetool.javascript(${xcontext.database})}";
XWiki.currentSpace = "$!{escapetool.javascript($doc.space)}";
XWiki.currentPage = "$!{escapetool.javascript($doc.name)}";
XWiki.editor = "$!{escapetool.javascript($editor)}";
XWiki.viewer = "$!{escapetool.javascript($viewer)}";
XWiki.contextaction = "${xcontext.getAction()}";
XWiki.skin = '$escapetool.javascript($xwiki.skin)';
XWiki.docisnew = $!doc.isNew();
XWiki.docsyntax = "$!doc.getSyntax().toIdString()";
XWiki.docvariant = "$!{escapetool.javascript($docvariant.replace('&amp;amp;', '&amp;'))}";
XWiki.blacklistedSpaces = [ #foreach($space in $blacklistedSpaces)#if($velocityCount &gt; 1),#end"$space"#end ];
XWiki.hasEdit = $hasEdit;
XWiki.hasProgramming = $hasProgramming;
XWiki.hasBackupPackImportRights =#if ($xwiki.package) $xwiki.package.hasBackupPackImportRights()#else false#end;
XWiki.hasRenderer = $services.rendering.availableRendererSyntaxes.contains($!doc.getSyntax());
window.docviewurl = "${doc.getURL('view')}";
window.docediturl = "${doc.getURL('edit')}";
window.docsaveurl = "${doc.getURL('save')}";
window.docgeturl = "${doc.getURL('get')}";
// ]]&gt;
&lt;/script&gt;</content>
    </property>
    <property>
      <path>javascript.vm</path>
    </property>
  </object>
  <object>
    <name>Demarches.Code.WikiDemarchesSkin</name>
    <number>0</number>
    <className>XWiki.XWikiSkins</className>
    <guid>f9020886-48b3-4f1a-bd54-392f886da30a</guid>
    <class>
      <name>XWiki.XWikiSkins</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <baseskin>
        <disabled>0</disabled>
        <name>baseskin</name>
        <number>2</number>
        <prettyName>Base Skin</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </baseskin>
      <edit.vm>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>edit.vm</name>
        <number>10</number>
        <prettyName>Edit</prettyName>
        <rows>15</rows>
        <size>80</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </edit.vm>
      <footer.vm>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>footer.vm</name>
        <number>7</number>
        <prettyName>Footer</prettyName>
        <rows>15</rows>
        <size>80</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </footer.vm>
      <header.vm>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>header.vm</name>
        <number>6</number>
        <prettyName>Header</prettyName>
        <rows>15</rows>
        <size>80</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </header.vm>
      <logo>
        <disabled>0</disabled>
        <name>logo</name>
        <number>3</number>
        <prettyName>Logo</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </logo>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <outputSyntax>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>outputSyntax</name>
        <number>4</number>
        <prettyName>Output Syntax</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>html/5.0=HTML 5|xhtml/1.0=XHTML 1.0</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </outputSyntax>
      <style.css>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>style.css</name>
        <number>5</number>
        <prettyName>Style</prettyName>
        <rows>15</rows>
        <size>80</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </style.css>
      <view.vm>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>view.vm</name>
        <number>9</number>
        <prettyName>View</prettyName>
        <rows>15</rows>
        <size>80</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </view.vm>
      <viewheader.vm>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>viewheader.vm</name>
        <number>8</number>
        <prettyName>View Header</prettyName>
        <rows>15</rows>
        <size>80</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </viewheader.vm>
    </class>
    <property>
      <baseskin>flamingo</baseskin>
    </property>
    <property>
      <edit.vm/>
    </property>
    <property>
      <footer.vm/>
    </property>
    <property>
      <header.vm/>
    </property>
    <property>
      <logo>logo.svg</logo>
    </property>
    <property>
      <name>Wiki demarches skin</name>
    </property>
    <property>
      <outputSyntax>html/5.0</outputSyntax>
    </property>
    <property>
      <style.css/>
    </property>
    <property>
      <view.vm/>
    </property>
    <property>
      <viewheader.vm/>
    </property>
  </object>
</xwikidoc>
