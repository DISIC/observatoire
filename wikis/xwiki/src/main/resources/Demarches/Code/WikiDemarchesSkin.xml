<?xml version="1.1" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.3" reference="Demarches.Code.WikiDemarchesSkin" locale="">
  <web>Demarches.Code</web>
  <name>WikiDemarchesSkin</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <creationDate>1544396400000</creationDate>
  <parent>Demarches.Code.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <date>1544396400000</date>
  <contentUpdateDate>1544396400000</contentUpdateDate>
  <version>1.1</version>
  <title>Wiki Demarches Skin</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content/>
  <attachment>
    <filename>favicon.ico</filename>
    <author>xwiki:XWiki.Admin</author>
    <date>1544396400000</date>
    <version>1.1</version>
    <comment/>
    <content/>
    <filesize>0</filesize>
  </attachment>
  <object>
    <name>Demarches.Code.WikiDemarchesSkin</name>
    <number>0</number>
    <className>XWiki.XWikiSkinFileOverrideClass</className>
    <guid>0a3c6b99-b140-4c07-a856-1438061ef3e7</guid>
    <class>
      <name>XWiki.XWikiSkinFileOverrideClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <content>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>content</name>
        <number>2</number>
        <prettyName>Content</prettyName>
        <rows>15</rows>
        <size>80</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </content>
      <path>
        <disabled>0</disabled>
        <name>path</name>
        <number>1</number>
        <prettyName>Path</prettyName>
        <size>255</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </path>
    </class>
    <property>
      <content>#set ($displayContentFooter = false)
#set ($displayDocChanges = false)
#set ($displayContentMenu = $hasEdit)
## only admins can see the create menu, non-admins can only create demarches and they have a dedicated button for this
#set ($displayCreateMenu = $hasAdmin)
## Do not display the content menu on the search page, except for administators who are also advanced users
#if ($doc.fullName == 'Main.Search')
  #if (!($hasAdmin &amp;&amp; $isAdvancedUser))
    #set ($displayContentMenu = false)
  #end
#end
#set ($displayBreadcrumbs = !$isGuest)
#set ($displayDrawer = !$isGuest)
#set ($displayQuickSearch = !$isGuest &amp;&amp; $doc.fullName != 'Main.WebHome' &amp;&amp; $doc.fullName != 'Main.Search')
#set ($discard = $xwiki.ssx.use('IconThemes.FontAwesome'))
#set ($discard = $xwiki.jsx.use('IconThemes.FontAwesome'))

#* These will be handled from the pages *#
#set ($displayDocTitle = true)
#set ($displayTitleContentSeparator = true)

#* Display the comments, attachments, history tabs for members of the Ministeres group and for administrators. *#
#set ($xobj = $doc.getObject('Demarches.Code.DemarchesClass'))
#if (($hasAdmin || $xwiki.user.isUserInGroup('XWiki.Ministeres')) &amp;&amp; $xobj)
  #set ($displayDocExtra = true)
  #set ($showcomments = true)
  #set ($showattachments = true)
#else
  #set ($displayDocExtra = false)
#end
</content>
    </property>
    <property>
      <path>layoutExtraVars.vm</path>
    </property>
  </object>
  <object>
    <name>Demarches.Code.WikiDemarchesSkin</name>
    <number>1</number>
    <className>XWiki.XWikiSkinFileOverrideClass</className>
    <guid>1fdede0c-e03c-4346-b5fa-2d7b77969d0f</guid>
    <class>
      <name>XWiki.XWikiSkinFileOverrideClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <content>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>content</name>
        <number>2</number>
        <prettyName>Content</prettyName>
        <rows>15</rows>
        <size>80</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </content>
      <path>
        <disabled>0</disabled>
        <name>path</name>
        <number>1</number>
        <prettyName>Path</prettyName>
        <size>255</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </path>
    </class>
    <property>
      <content>#template('xwikivars.vm')
#if($isInServletMode &amp;&amp; $displayBreadcrumbs) ## Visible only in a page
  &lt;div class="row hierarchy-row"&gt;&lt;div class="col-xs-12"&gt;
  #template('hierarchy_macros.vm')
  #######################################################
  ##                   CONTROLLER
  ##
  ## Call the appropiate breadcrumb depending on the
  ## configuration.
  #######################################################
  #if($services.parentchild.isParentChildMechanismEnabled())
    #hierarchy_parentChild()
  #else
    ##
    ## Default mode: display the hierarchy for the current page
    ##
    #hierarchy($NULL {'id': 'hierarchy', 'limit': 5, 'treeNavigation': true})
  #end
  &lt;/div&gt;&lt;/div&gt;
#end</content>
    </property>
    <property>
      <path>hierarchy.vm</path>
    </property>
  </object>
  <object>
    <name>Demarches.Code.WikiDemarchesSkin</name>
    <number>2</number>
    <className>XWiki.XWikiSkinFileOverrideClass</className>
    <guid>c62576b9-7b7f-4c81-8854-c8ff0262daeb</guid>
    <class>
      <name>XWiki.XWikiSkinFileOverrideClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <content>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>content</name>
        <number>2</number>
        <prettyName>Content</prettyName>
        <rows>15</rows>
        <size>80</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </content>
      <path>
        <disabled>0</disabled>
        <name>path</name>
        <number>1</number>
        <prettyName>Path</prettyName>
        <size>255</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </path>
    </class>
    <property>
      <content>##
## Top Menu
##
#if ($isInServletMode)## Visible only in a page
  #template("menus_macros.vm")

  ## Top Menu
  #xwikitopmenustart()

    ## Left menu
    #xwikitopmenuleftstart()
      #displaySimpleSecureUIX('org.xwiki.platform.topmenu.left')
    #xwikitopmenuleftend()

    ## Right menu
    #xwikitopmenurightstart()
      #if ($displayDrawer)
        #displayDrawerActivator()
      #end
      #displaySimpleSecureUIX('org.xwiki.platform.topmenu.right')
    #xwikitopmenurightend()

  ## End of Top Menu
  #xwikitopmenuend()

  #if($displayDrawer)
    #template("drawer.vm")
  #end
#end
#**
 * Display the drawer activator with an humberger-style icon.
 *#
#macro(displayDrawerActivator)
  &lt;li&gt;
    &lt;a class="icon-navbar drawer-toggle" id="tmDrawerActivator" title="$services.localization.render('core.menu.drawer')"&gt;&lt;span class="sr-only"&gt;$services.localization.render('core.menu.toggleNavigation')&lt;/span&gt;$services.icon.renderHTML('menu')&lt;/a&gt;
  &lt;/li&gt;
#end
</content>
    </property>
    <property>
      <path>menus_view.vm</path>
    </property>
  </object>
  <object>
    <name>Demarches.Code.WikiDemarchesSkin</name>
    <number>3</number>
    <className>XWiki.XWikiSkinFileOverrideClass</className>
    <guid>797c2645-e2f8-427a-8a1d-530e72a29f8c</guid>
    <class>
      <name>XWiki.XWikiSkinFileOverrideClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <content>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>content</name>
        <number>2</number>
        <prettyName>Content</prettyName>
        <rows>15</rows>
        <size>80</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </content>
      <path>
        <disabled>0</disabled>
        <name>path</name>
        <number>1</number>
        <prettyName>Path</prettyName>
        <size>255</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </path>
    </class>
    <property>
      <content>#if($displayDocTitle)
&lt;div class="row document-header"&gt;
  &lt;div class="document-info col-xs-12 #if($displayContentMenu)col-md-7#end"&gt;
    ## --------------------------------------------------------
    ## Display UI Extensions before the title element
    ## --------------------------------------------------------
    #foreach ($uix in $services.uix.getExtensions('org.xwiki.platform.template.title.before'))
      $services.rendering.render($uix.execute(), 'xhtml/1.0')
    #end
    &lt;div id="document-title"&gt;&lt;h1&gt;$titleToDisplay&lt;/h1&gt;&lt;/div&gt;
    #if (!$doc.isNew() &amp;&amp; $displayDocChanges)
      &lt;div class="xdocLastModification"&gt;
        #if (!$doc.isMostRecent())
          $services.localization.render(
            'core.document.modificationWithVersion',
            ["&lt;a href='$tdoc.getURL('view', ""rev=$tdoc.version"")'&gt;$tdoc.version&lt;/a&gt;",
            $xwiki.getUserName($tdoc.author),
            $xwiki.formatDate($tdoc.date)
          ])
        #else
          $services.localization.render('core.footer.modification', [$xwiki.getUserName($tdoc.author), $xwiki.formatDate($tdoc.date)])
        #end
      &lt;/div&gt;
    #end
  &lt;/div&gt;
  #if($displayContentMenu)
    &lt;div class="document-menu col-xs-12 col-md-5"&gt;
      #template("menus_content.vm")
    &lt;/div&gt;
  #end
&lt;/div&gt;
#if($displayTitleContentSeparator)
&lt;hr/&gt;
#end
#end</content>
    </property>
    <property>
      <path>contentheader.vm</path>
    </property>
  </object>
  <object>
    <name>Demarches.Code.WikiDemarchesSkin</name>
    <number>4</number>
    <className>XWiki.XWikiSkinFileOverrideClass</className>
    <guid>d5bf9dcc-baf9-483d-8e98-bc0d665b365f</guid>
    <class>
      <name>XWiki.XWikiSkinFileOverrideClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <content>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>content</name>
        <number>2</number>
        <prettyName>Content</prettyName>
        <rows>15</rows>
        <size>80</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </content>
      <path>
        <disabled>0</disabled>
        <name>path</name>
        <number>1</number>
        <prettyName>Path</prettyName>
        <size>255</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </path>
    </class>
    <property>
      <content>#if($isInServletMode)## Visible only in a page
#if("$!extraFooterTemplate" != '')
  #template($extraFooterTemplate)
#end
&lt;footer id="footerglobal" role="contentinfo"&gt;
  &lt;div class='container'&gt;
  &lt;hr aria-hidden="true"&gt;
  &lt;div id="xwikilicence"&gt;&amp;copy; 2018 $services.localization.render('wikidemarches.sitename')&lt;span class='separator' aria-hidden='true'&gt; | &lt;/span&gt;&lt;a href="$xwiki.getURL('Main.CGU')"&gt;$services.localization.render('wd.legal-notice')&lt;/a&gt;&lt;span class='separator' aria-hidden='true'&gt; | &lt;/span&gt;&lt;a href="$xwiki.getURL('Main.Accessibilite')"&gt;$services.localization.render('wd.accessibilite')&lt;/a&gt;&lt;span class='separator' aria-hidden='true'&gt; | &lt;/span&gt;&lt;a href='mailto:nosdemarches@modernisation.gouv.fr'&gt;$services.localization.render('wd.contact')&lt;/a&gt;&lt;span class='separator'aria-hidden='true'&gt; | &lt;/span&gt;&lt;a href="$xwiki.getURL('Main.A propos')""&gt;$services.localization.render('wd.about')&lt;/a&gt;
&lt;span class='separator' aria-hidden='true'&gt; | &lt;/span&gt;
#if ($isGuest)
&lt;a href="$xwiki.getURL($doc.fullName,'login')""&gt;
$services.localization.render('wd.login')
&lt;/a&gt;
#else
&lt;a href="$xwiki.getURL($doc.fullName,'logout')""&gt;
$services.localization.render('wd.logout')
&lt;/a&gt;
#end
&lt;/div&gt;
  &lt;div id='wd-customfooterinfo'&gt;
    $services.localization.render('wikidemarches.footer.administrationlinks.intro') : &lt;a href="http://service-public.fr/" target="_blank" title="Service-public.fr ($services.localization.render('wikidemarches.footer.administrationlinks.newwindow'))"&gt;Service-public.fr&lt;/a&gt; &lt;span aria-hidden='true'&gt;&amp;ndash;&lt;/span&gt; &lt;a href="http://legifrance.gouv.fr/" target="_blank" title="Legifrance.gouv.fr ($services.localization.render('wikidemarches.footer.administrationlinks.newwindow'))"&gt;Legifrance.gouv.fr&lt;/a&gt; &lt;span aria-hidden='true'&gt;&amp;ndash;&lt;/span&gt; &lt;a href="http://data.gouv.fr/" target="_blank" title="data.gouv.fr ($services.localization.render('wikidemarches.footer.administrationlinks.newwindow'))"&gt;data.gouv.fr&lt;/a&gt; &lt;span aria-hidden='true'&gt;&amp;ndash;&lt;/span&gt; &lt;a href="http://gouvernement.fr/" target="_blank" title="Gouvernement.fr ($services.localization.render('wikidemarches.footer.administrationlinks.newwindow'))"&gt;Gouvernement.fr&lt;/a&gt;
  &lt;/div&gt;
  #set ($version = $xwiki.getSpacePreference('version'))
  #if ("$!version" == "")
    #set ($version = $xwiki.getXWikiPreference("version"))
  #end
  #if ("$!version" != "")
    ## The version information coming from preferences is usually Velocity code, so make sure to evaluate it.
    &lt;div id="xwikiplatformversion"&gt;#evaluate($version)&lt;/div&gt;
  #else
    &lt;div id="xwikiplatformversion"&gt;
      #set($productURL = $services.extension.core.repository.environmentExtension.website)
      #if ($productURL)
        &lt;a href="$services.extension.core.repository.environmentExtension.website"&gt;
      #end
          $services.extension.core.repository.environmentExtension.name $xwiki.getVersion()
      #if ($productURL)
        &lt;/a&gt;
      #end
    &lt;/div&gt;
  #end
  &lt;/div&gt;
&lt;/footer&gt;
#end
### TODO: Format the footer for pdf output</content>
    </property>
    <property>
      <path>footer.vm</path>
    </property>
  </object>
  <object>
    <name>Demarches.Code.WikiDemarchesSkin</name>
    <number>6</number>
    <className>XWiki.XWikiSkinFileOverrideClass</className>
    <guid>ab114f2c-3be8-43a0-b2b1-b744d62835bb</guid>
    <class>
      <name>XWiki.XWikiSkinFileOverrideClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <content>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>content</name>
        <number>2</number>
        <prettyName>Content</prettyName>
        <rows>15</rows>
        <size>80</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </content>
      <path>
        <disabled>0</disabled>
        <name>path</name>
        <number>1</number>
        <prettyName>Path</prettyName>
        <size>255</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </path>
    </class>
    <property>
      <content>## -------------------------------------------------------------------------------------------------------------------
## In non-Servlet mode (in Portlet mode for example) we don't display the &lt;HTML&gt;, &lt;HEAD&gt; and &lt;BODY&gt;
## elements.
## -------------------------------------------------------------------------------------------------------------------
#if($isInServletMode)
## TODO this should be more specific
#if("$!request.noDoctype" != "true")
&lt;!DOCTYPE html&gt;
#end
#macro(xwikiDataAttribute $name $value)
  data-xwiki-${name}="$escapetool.xml($value)"
#end
&lt;html xmlns="http://www.w3.org/1999/xhtml" lang="$xcontext.locale" xml:lang="$xcontext.locale" dir="ltr" 
  ## NOTE: you should not use these attributes in javascript directly, but via the 'xwiki-meta' module instead:
  ## http://platform.xwiki.org/xwiki/bin/view/DevGuide/JavaScriptAPI#HGetsomeinformationaboutthecurrentdocument
  #xwikiDataAttribute('reference', $services.model.serialize($doc.documentReference, 'default'))
  #xwikiDataAttribute('document', $doc.fullName)##deprecated, use 'reference' instead
  #xwikiDataAttribute('wiki', $doc.wiki)##deprecated, use 'reference' instead
  #xwikiDataAttribute('space', $doc.space)##deprecated, use 'reference' instead
  #xwikiDataAttribute('page', $doc.name)##deprecated, use 'reference' instead
  #xwikiDataAttribute('version', $doc.version)
  #xwikiDataAttribute('rest-url', $services.rest.url($doc.documentReference))
  #xwikiDataAttribute('form-token', "$!{services.csrf.token}")&gt;
  &lt;head&gt;
    ## ---------------------------------------------------------------------------------------------------------------
    ## Ensure that the Content-Type meta directive is the first one in the header.
    ## See http://www.w3.org/International/tutorials/tutorial-char-enc/
    ## ---------------------------------------------------------------------------------------------------------------
    &lt;meta http-equiv="Content-Type" content="text/html; charset=$xwiki.encoding" /&gt;
    ## ---------------------------------------------------------------------------------------------------------------
    ## Compute the title.
    ## ---------------------------------------------------------------------------------------------------------------
    #if(!$title)
      #set($title = $!xwiki.getSpacePreference('title'))
      #if($title != '')
        ## Evaluate the title since it can have velocity code.
        #set($title = "#evaluate($title)")
        ## Don`t forget to escape it.
        #set($title = "$escapetool.xml($title)")
      #else
        #set($title = "XWiki - $escapetool.xml($!doc.space) - $escapetool.xml($!tdoc.displayTitle)")
      #end
    #else
      #set($title = $escapetool.xml($title))
    #end
    &lt;title&gt;$title&lt;/title&gt;
    ## ---------------------------------------------------------------------------------------------------------------
    ## Force Compatibility mode for IE browsers to use the latest rendering mode. In order to work, the declaration 
    ## needs to be placed in the &lt;head&gt;, before all other elements except for the &lt;title&gt; and other &lt;meta&gt; elements
    ## See http://msdn.microsoft.com/en-us/library/jj676915(v=vs.85).aspx#SETMODE
    ## ---------------------------------------------------------------------------------------------------------------
    #set($userAgent = $request.getHeader('User-Agent'))
    #if($userAgent.contains('MSIE') || $userAgent.contains('Trident'))
      ## Add a meta-tag to disable the IE compatibility mode
      &lt;meta http-equiv="X-UA-Compatible" content="IE=edge" /&gt;
      ## Add the equivalent HTTP header to disable the compatibility mode (the meta is not enough on intranet sites)
      #set($discard = $response.addHeader('X-UA-Compatible', 'IE=edge'))
    #end
    ## ---------------------------------------------------------------------------------------------------------------
    ## Enable Responsiveness for phones
    &lt;meta name="viewport" content="width=device-width, initial-scale=1" /&gt;
    ## ---------------------------------------------------------------------------------------------------------------
    ## Favicons
    ## Legacy, for IE
    &lt;link rel="shortcut icon" href="$xwiki.getSkinFile('favicon.ico')" /&gt;
    ## Don't send the other favicons, we don't have these versions for the Marianne
    ## Present, HTML5
    ## &lt;link rel="icon" href="$xwiki.getSkinFile('icons/xwiki/favicon16.png')" type="image/png" /&gt;
    ## The future, scalable icons
    ## &lt;link rel="icon" href="$xwiki.getSkinFile('icons/xwiki/favicon.svg')" type="image/svg+xml" /&gt;
    ## For smart phones and tablets
    ## &lt;link rel="apple-touch-icon" href="$xwiki.getSkinFile('icons/xwiki/favicon144.png')" /&gt;
    ## ---------------------------------------------------------------------------------------------------------------
    ## Universal edit button. See http://universaleditbutton.org
    ## ---------------------------------------------------------------------------------------------------------------
    #if($xcontext.action=="view")
      &lt;link rel="alternate" type="application/x-wiki" title="Edit" href="$doc.getURL("edit")" /&gt;
    #end
    ## ---------------------------------------------------------------------------------------------------------------
    ## Make sure search engine spiders give the plain page instead of ?viewer=comments, ?viewer=code etc.
    ## ---------------------------------------------------------------------------------------------------------------    
    &lt;link rel="canonical" href="$doc.getURL('view')" /&gt;
    ## ---------------------------------------------------------------------------------------------------------------
    ## Add user-defined Meta directives.
    ## ---------------------------------------------------------------------------------------------------------------
    ## Note: Velocity code, so it needs to be evaluated.
    #evaluate($!xwiki.getSpacePreference("meta"))
    ## ---------------------------------------------------------------------------------------------------------------
    ## Hook for inserting Link extensions. This will be replaced with the pulled link references.
    ## ---------------------------------------------------------------------------------------------------------------
    &lt;!-- com.xpn.xwiki.plugin.skinx.LinkExtensionPlugin --&gt;
    &lt;link href="$services.webjars.url('drawer', 'css/drawer.min.css')" rel="stylesheet" type="text/css" /&gt;
    #template("stylesheets.vm")
    #template("javascript.vm")
  &lt;/head&gt;
  #set($bodyTagName = 'body')
#else ## Portlet Mode
  #template("stylesheets.vm")
  #template("javascript.vm")
  #set($bodyTagName = 'div')
#end
## TODO: fix this from css
#set($bodyAction = $xcontext.action)
#if($xcontext.action == "admin" || $xcontext.action == "import" || $xcontext.action == "export")
  #set($bodyAction = "view")
#end
## These elements will be closed in the htmlfooter.vm file
&lt;$bodyTagName id="body" class="skin-flamingo wiki-${xcontext.database} space-${escapetool.xml($doc.space.replaceAll(' ', '_'))} ${bodyAction}body #if($showLeftPanels == "0")hideleft#end#if($showRightPanels == "0")hideright#end#if($hidecolumns &amp;&amp; ($!hidecolumns == 1))hidelefthideright#end #if($showLeftPanels != "0" &amp;&amp; $showRightPanels != "0" &amp;&amp; $!hidecolumns != 1)content#end panel-left-width-${leftPanelsWidth} panel-right-width-${rightPanelsWidth} drawer drawer-right drawer-close"&gt;
&lt;div id="xwikimaincontainer"&gt;
&lt;div id="xwikimaincontainerinner"&gt;
</content>
    </property>
    <property>
      <path>htmlheader.vm</path>
    </property>
  </object>
  <object>
    <name>Demarches.Code.WikiDemarchesSkin</name>
    <number>7</number>
    <className>XWiki.XWikiSkinFileOverrideClass</className>
    <guid>df38b07b-e1ee-427d-9ba8-8eb0e3ed83bb</guid>
    <class>
      <name>XWiki.XWikiSkinFileOverrideClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <content>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>content</name>
        <number>2</number>
        <prettyName>Content</prettyName>
        <rows>15</rows>
        <size>80</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </content>
      <path>
        <disabled>0</disabled>
        <name>path</name>
        <number>1</number>
        <prettyName>Path</prettyName>
        <size>255</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </path>
    </class>
    <property>
      <content>### Ensure this template is only called once (for performance reasons), since it's called from several places
#if ($hasMenuMacrosBeenCalled)
  #break
#else
  #set ($hasMenuMacrosBeenCalled = true)
#end
###
###    GLOBALS
###
#set ($isAdminAppInstalled = $xwiki.exists($services.model.createDocumentReference('', 'XWiki', 'AdminSheet')))
###
###    Toplevel Menu
###
#macro(xwikitopmenustart)
  &lt;nav class="navbar navbar-default actionmenu"&gt;
    &lt;div class="container"&gt;
      ## Brand and toggle get grouped for better mobile display
      &lt;div class="navbar-header"&gt;
        #if (!$displayPageHeader)
          #template("companylogo.vm")
        #end
      &lt;/div&gt;
      ## Collect the nav links, forms, and other content for toggling
      &lt;div id="xwikimainmenu"&gt;
#end

###
###    Toplevel Menu
###
#macro(xwikitopmenuend)
      &lt;/div&gt;## /.navbar-collapse
    &lt;/div&gt; ## / container-fluid
  &lt;/nav&gt;
#end

###
###    Toplevel Left Menu
###
#macro(xwikitopmenuleftstart)
  &lt;ul class="nav navbar-nav navbar-left"&gt;
    #submenuseparator()
#end

###
###    Toplevel Left Menu
###
#macro(xwikitopmenuleftend)
  &lt;/ul&gt;
#end

###
###    Toplevel Right Menu
###
#macro(xwikitopmenurightstart)
  &lt;ul class="nav navbar-nav navbar-right"&gt;
#end

###
###    Toplevel Right Menu
###
#macro(xwikitopmenurightend)
  &lt;/ul&gt;
#end

###
###    Toplevel Menu entry with subitems
###
### Generate a menu entry and start the subitem section
###
### @param actionurl The URL this entry points to
### @param linktext The menu item text
###
#macro(xwikitopmenuentrystart $actionurl $linktext $id $class $icon $iconImg)
  #set($sep = '__SEPARATOR__')
  #set($linkName = $linktext)
  #set($linkTitle = $linktext) 
  #if ($linktext.contains($sep))
    #set($linkWords = $linktext.split($sep, 2))
    #set($linkName = $linkWords.get(1))
    #set($linkTitle = "${linkWords.get(0)}: ${linkWords.get(1)}")
  #end
  &lt;li class="dropdown dropdown-split text-left" #if(!$stringtool.isBlank($id))id="$id"#end&gt;
    ## The menu label. On large screens (tablet and desktop) the label is a link that triggers the default menu action
    ## (e.g. navigation) and the menu is opened using a separated caret. On extra small screens (phones) the label opens
    ## the menu and the default menu action is the first item in the menu.
    &lt;a href="$actionurl" class="dropdown-split-left dropdown-toggle $!class" data-toggle="dropdown" title="$linkTitle"&gt;
      ## This caret is displayed only on extra small screens to indicate that the label toggles the menu.
      #glyphicon($icon)$!{iconImg} $linkName &lt;b class="caret"&gt;&lt;/b&gt;
    ## Don't leave any space between the anchors because they have display:inline-block on large screens.
    &lt;/a&gt;&lt;a href="#" class="dropdown-split-right dropdown-toggle hidden-xs $!class" data-toggle="dropdown"&gt;
      ## This caret is used to toggle the menu on large screens (tablet and desktop).
      &lt;b class="caret"&gt;&lt;/b&gt;
    &lt;/a&gt;
    &lt;ul class="dropdown-menu"&gt;
#end

###
###    Toplevel Menu entry without subitems
###
### Generate a menu entry withut subitems
###
### @param actionurl The URL this entry points to
### @param linktext The menu item text
###
#macro(xwikitopmenuentry $actionurl $linktext $id $class $icon $extraAttributes)
  #submenuitem($actionurl $linktext $id $class $icon $extraAttributes)
#end

###
###    Menu subitem entry
###
### Generate a submenu entry
###
### @param actionurl The URL this entry points to
### @param linktext The menu item text
###
#macro(submenuitem $actionurl $linktext $linkid $class $icon $extraAttributes)
  #set($sep = '__SEPARATOR__')
  #set($linkName = $linktext)
  #set($linkTitle = $linktext) 
  #if ($linktext.contains($sep))
    #set($linkWords = $linktext.split($sep))
    #set($linkName = $linkWords.get(1))
    #set($linkTitle = "${linkWords.get(0)}: ${linkWords.get(1)}")
  #end
  &lt;li class="$!class"&gt;&lt;a href="$actionurl" #if(!$stringtool.isBlank($linkid))id="$linkid"#end title="$linkTitle" $!extraAttributes&gt;$services.icon.renderHTML($icon) $linkName&lt;/a&gt;&lt;/li&gt;
#end

###
###    Menu disabled subitem entry
###
### Generate a disabled submenu entry
###
### @param text The menu item text
###
#macro(submenuitemdisabled $text)
&lt;span class="submenuitem disable"&gt;$text&lt;/span&gt;
#end

###
###    Toplevel Menu entry separator
###
#macro(xwikitopmenuseparator)
  &lt;li class="divider" role="separator"&gt;&lt;/li&gt;
#end

###
###    Menu submenu separator
###
#macro(submenuseparator)
  &lt;li class="divider" role="separator"&gt;&lt;/li&gt;
#end

###
###    Toplevel Menu entry end
###
### End the subitem section
###
#macro(xwikitopmenuentryend)
    &lt;/ul&gt;
  &lt;/li&gt;
#end

#macro(xwikibutton $actionurl $linktext $id $class $icon)
  &lt;a href="$actionurl" class="btn $!class" role="button" #if(!$stringtool.isBlank($id))id="$id"#end&gt;#glyphicon($icon) $linktext&lt;/a&gt;
#end

#macro(xwikibuttonentrystart $actionurl $linktext $id $class $icon)
  &lt;div class="btn-group text-left" #if(!$stringtool.isBlank($id))id="$id"#end&gt;
    &lt;button type="button" class="btn $!class dropdown-toggle" data-toggle="dropdown"&gt;#glyphicon($icon) $linktext &lt;span class="caret"&gt;&lt;/span&gt;
    &lt;/button&gt;
    &lt;ul class="dropdown-menu" role="menu"&gt;
#end

#macro(xwikisplitbuttonentrystart $actionurl $linktext $id $class $icon)
  &lt;div class="btn-group text-left" #if(!$stringtool.isBlank($id))id="$id"#end&gt;
    &lt;a href="$actionurl" class="btn $!class"&gt;#glyphicon($icon) $linktext&lt;/a&gt;
    &lt;button type="button" class="btn $!class dropdown-toggle" data-toggle="dropdown"&gt;
      &lt;span class="caret"&gt;&lt;/span&gt;
      &lt;span class="sr-only"&gt;Toggle Dropdown&lt;/span&gt;
    &lt;/button&gt;
    &lt;ul class="dropdown-menu" role="menu"&gt;
#end

#macro(xwikibuttonentryend $actionurl $linktext $id $class $icon)
    &lt;/ul&gt;
  &lt;/div&gt;
#end

#**
 * Display extension points only if the author of the UIX has the admin right on the wiki.
 *
 * @param $name name of the extension points to display
 * @since 7.3RC1
 *#
#macro(displaySimpleSecureUIX $name)
  #foreach($uix in $services.uix.getExtensions($name, {'sortByParameter' : 'order'}))
    #if ($services.security.authorization.hasAccess('admin', $uix.authorReference, $services.wiki.currentWikiDescriptor.reference))
      $services.rendering.render($uix.execute(), 'html/5.0')
    #end
  #end
#end</content>
    </property>
    <property>
      <path>menus_macros.vm</path>
    </property>
  </object>
  <object>
    <name>Demarches.Code.WikiDemarchesSkin</name>
    <number>8</number>
    <className>XWiki.XWikiSkinFileOverrideClass</className>
    <guid>5d9332bb-b00e-4806-9ec7-8fa2ba599e54</guid>
    <class>
      <name>XWiki.XWikiSkinFileOverrideClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <content>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>content</name>
        <number>2</number>
        <prettyName>Content</prettyName>
        <rows>15</rows>
        <size>80</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </content>
      <path>
        <disabled>0</disabled>
        <name>path</name>
        <number>1</number>
        <prettyName>Path</prettyName>
        <size>255</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </path>
    </class>
    <property>
      <content>################################
##       COMPANY LOGO
################################
#if("$!{themeDocFullName}" == '')
  #set($themeDocFullName = "$!xwiki.getUserPreference('colorTheme')")
#end
#if($themeDocFullName == '')
  #set($themeDocFullName = 'ColorThemes.DefaultColorTheme')
#end
#set($themeDoc = $xwiki.getDocument($themeDocFullName))
#set($themeObj = $themeDoc.getObject('FlamingoThemesCode.ThemeClass'))
#if($themeObj)
  #set($logoname = $themeObj.getValue('logo'))
#else
  #set($themeObj = $themeDoc.getObject('ColorThemes.ColorThemeClass'))
  #set($logoname = $themeObj.getValue('logoImage'))
#end
#if("$!{logoname}" != '')
  #set($logourl = $themeDoc.getAttachmentURL($logoname))
#else
  #set($logoname = $xwiki.getSkinPreference('logo', 'logo.svg'))
  #set($logo = $!prefdoc.getAttachment($logoname))
  #if(!$logo)
    #set($logourl = $xwiki.getSkinFile($logoname))
  #else
    #set($logourl = $prefdoc.getAttachmentURL($logo.filename))
  #end
#end
&lt;div id="companylogo"&gt;
  &lt;a href="$!xwiki.getURL($services.wiki.currentWikiDescriptor.mainPageReference)" title="Home" rel="home" #if(!$displayPageHeader)class="navbar-brand"#end&gt;
    &lt;img src="$!logourl" alt="Wiki Logo"/&gt;
    ## Site title next to the logo
    #set($eltname = 'span')
    #if ($doc.fullName == 'Main.WebHome')
      #set($eltname = 'h1')
    #end
    &lt;span class='demarches-titlebar-sitename'&gt;
      &lt;span class='demarches-titlebar-name'&gt;
        &lt;${eltname}&gt;$services.localization.render('wikidemarches.sitename')&lt;/${eltname}&gt;
      &lt;/span&gt;
      &lt;span class='demarches-titlebar-headline'&gt;$services.localization.render('wikidemarches.siteheadline')&lt;/span&gt;
    &lt;/span&gt;
  &lt;/a&gt;
&lt;/div&gt;
</content>
    </property>
    <property>
      <path>companylogo.vm</path>
    </property>
  </object>
  <object>
    <name>Demarches.Code.WikiDemarchesSkin</name>
    <number>9</number>
    <className>XWiki.XWikiSkinFileOverrideClass</className>
    <guid>1df3bb49-06bc-4079-af67-4567fd97204a</guid>
    <class>
      <name>XWiki.XWikiSkinFileOverrideClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <content>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>content</name>
        <number>2</number>
        <prettyName>Content</prettyName>
        <rows>15</rows>
        <size>80</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </content>
      <path>
        <disabled>0</disabled>
        <name>path</name>
        <number>1</number>
        <prettyName>Path</prettyName>
        <size>255</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </path>
    </class>
    <property>
      <content>#if ($type == 'edit' || $type == 'search')
  #if ($field.getProperty('displayType').value == 'input' &amp;&amp; $field.getProperty('picker').value == 1)
    #set ($id = $escapetool.xml("${prefix}${name}"))
    #set ($disabled = $field.getProperty('disabled').value == 1)
    #set ($isMultiSelect = $field.getProperty('multiSelect').value == 1)
    ## We don't use $isMultiSelect to determine if there is one or multiple values selected because you can have multiple
    ## values selected on a single selection property if the property had multiple selection active in the past.
    #if ("$!value.size()" != '')
      #set ($values = $value)
    #else
      #set ($values = [$value])
    #end
    #set ($discard = $xwiki.linkx.use($services.webjars.url('selectize.js', 'css/selectize.bootstrap3.css'),
      {'type': 'text/css', 'rel': 'stylesheet'}))
    #set ($discard = $xwiki.ssfx.use('uicomponents/suggest/xwiki.selectize.css', true))
    #set ($discard = $xwiki.jsx.use('Demarches.Code.DemarchesSheet',
      {'forceSkinAction' : true, 'language' : $xcontext.locale}))
    &lt;select id="$!id" name="$!id" class="suggest-propertyValues"#if ($isMultiSelect) multiple="multiple"#end
        #if ($disabled)disabled="disabled" #{end}data-className="$!escapetool.xml($field.className)"
        data-propertyName="$!escapetool.xml($name)" size="1"&gt;
      #foreach ($selectedValue in $values)
        &lt;option value="$!escapetool.xml($selectedValue)" selected="selected"&gt;$!escapetool.xml($selectedValue)&lt;/option&gt;
      #end
    &lt;/select&gt;
    #if ($isMultiSelect)
      ## We need a hidden input with an empty value to be able to clear the selected values when no value is selected.
      &lt;input type="hidden" name="$!id" /&gt;
    #end
  #else
    $doc.displayEdit($field, $prefix, $object)
  #end
#elseif ($type == 'view')
$doc.displayView($field, $prefix, $object)##
#elseif ($type == 'rendered')
$doc.displayRendered($field, $prefix, $object)##
#elseif ($type == 'hidden')
  $doc.displayHidden($field, $prefix, $object)
#else
  ## In order for the custom displayer to be taken into account, the result of its evaluation with an unknown display
  ## mode must not be empty. Let's output something.
  Unknown display mode.
#end</content>
    </property>
    <property>
      <path>displayer_dblist.vm</path>
    </property>
  </object>
  <object>
    <name>Demarches.Code.WikiDemarchesSkin</name>
    <number>11</number>
    <className>XWiki.XWikiSkinFileOverrideClass</className>
    <guid>1a5a32e8-4c0d-45da-bfe9-9f3e36033d95</guid>
    <class>
      <name>XWiki.XWikiSkinFileOverrideClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <content>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>content</name>
        <number>2</number>
        <prettyName>Content</prettyName>
        <rows>15</rows>
        <size>80</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </content>
      <path>
        <disabled>0</disabled>
        <name>path</name>
        <number>1</number>
        <prettyName>Path</prettyName>
        <size>255</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </path>
    </class>
    <property>
      <content>## We handle the ability to disable the minification, by choosing the file extension to add to the script paths.
#set ($jsExtension = '.min.js')
#if (!$services.debug.minify)
  #set ($jsExtension = '.js')
#end
##
## JS Libraries.
##
&lt;script type="text/javascript" src="$services.webjars.url('requirejs', "require$jsExtension")"&gt;&lt;/script&gt;
##
$xwiki.jsfx.use('js/prototype/prototype.js', {'defer': false})##
$xwiki.jsfx.use('js/scriptaculous/effects.js', true)##
## xwiki-min.js and xwiki-min.css aggregate a couple of JavaScript and CSS files that are used on each page. In order to
## help debugging we provide/bundle the individual files also and you can load them instead of the aggregated files by
## passing 'minify=false' in the request query string or setting debug.minify property in xwiki.properties file.
#if (!$services.debug.minify)
  ## entityReferences.js should be loaded first because it is used by xwiki.js
  $xwiki.jsfx.use('uicomponents/model/entityReference.js', {'defer': false})##
  $xwiki.jsfx.use('js/xwiki/xwiki.js', {'forceSkinAction': true, 'defer': false})##
  $xwiki.jsfx.use('js/xwiki/widgets/modalPopup.js', true)##
  $xwiki.ssfx.use('js/xwiki/widgets/modalPopup.css', {'forceSkinAction' : true, 'colorTheme' : $themeDoc})##
  $xwiki.jsfx.use('js/xwiki/widgets/jumpToPage.js', true)##
  $xwiki.ssfx.use('js/xwiki/widgets/jumpToPage.css', {'forceSkinAction' : true, 'language' : $xcontext.locale})##
  $xwiki.jsfx.use('uicomponents/widgets/confirmationBox.js', true)##
  $xwiki.ssfx.use('uicomponents/widgets/confirmationBox.css', true)##
  $xwiki.jsfx.use('uicomponents/widgets/confirmedAjaxRequest.js', true)##
  $xwiki.jsfx.use('uicomponents/widgets/notification.js', true)##
  $xwiki.ssfx.use('uicomponents/widgets/notification.css', true)##
  $xwiki.jsfx.use('uicomponents/widgets/list/xlist.js')##
  $xwiki.jsfx.use('uicomponents/suggest/suggest.js', {'forceSkinAction' : true, 'language' : $xcontext.locale})##
  $xwiki.ssfx.use('uicomponents/suggest/suggest.css', true)##
#else
  $xwiki.jsfx.use('js/xwiki/xwiki-min.js', {'forceSkinAction': true, 'defer': false, 'language': $xcontext.locale})##
  $xwiki.ssfx.use('css/xwiki-min.css', {'forceSkinAction': true, 'colorTheme': $themeDoc, 'language': $xcontext.locale})##
#end
$xwiki.jsfx.use("flamingo$jsExtension", {'forceSkinAction' : true, 'language' : $xcontext.locale})##
#if($xwiki.exists('XWiki.SearchSuggestConfig'))
  ## Hook to request the search suggest script if search suggest configuration is present.
  ## We can't just have it as a always-use SSX yet since we compute a hash to be sure to refresh
  ## the file when the configuration changes.
  ## Ideally, this code should be located in a interface extension, in the search application.
  #set($searchSuggestConfigDocument = $xwiki.getDocument('XWiki.SearchSuggestConfig'))
  #set($searchSuggestConfigObject = $searchSuggestConfigDocument.getObject('XWiki.SearchSuggestConfig'))
  #if($searchSuggestConfigObject.getProperty('activated').value == 1)
    #set($searchSuggestConfigHash = '')
    #foreach($source in $searchSuggestConfigDocument.getObjects('XWiki.SearchSuggestSourceClass'))
      #if($source.getValue('activated') == 1)
        #set($sourceId = "${source.getValue('name')}:${source.getValue('url')}:${source.getValue('highlight')}:${source.getValue('icon')}}")
        #set($searchSuggestConfigHash = "${searchSuggestConfigHash}|${sourceId}")
      #end
    #end
    $xwiki.jsfx.use('uicomponents/search/searchSuggest.js', {
      'forceSkinAction' : true,
      'h' : $searchSuggestConfigHash.hashCode()
    })##
    $xwiki.ssfx.use('uicomponents/search/searchSuggest.css', true)##
  #end
#end
#set($editActions = ['edit', 'inline', 'admin'])
#if($editActions.contains($xcontext.action))
  $xwiki.jsfx.use('uicomponents/lock/lock.js')##
  $xwiki.jsfx.use('uicomponents/widgets/validation/livevalidation_prototype.js')##
  $xwiki.ssfx.use('uicomponents/widgets/validation/livevalidation.css', true)##
#end
##
## Hooks for inserting JavaScript skin extensions
##
#javaScriptExtensionHooks
##
## Compatibility "aspect" file for deprecated code.
## Placed at the very end of the stream so that skin file extensions code can be deprecated easily as well.
##
&lt;script type="text/javascript" src="$xwiki.getSkinFile("js/xwiki/compatibility.js", false)" defer="defer"&gt;&lt;/script&gt;
## Marker script that signals that all the deferred scripts have indeed been executed, guarding against a premature dom:loaded event
&lt;script type="text/javascript" src="$xwiki.getSkinFile("js/xwiki/markerScript.js", false)" defer="defer"&gt;&lt;/script&gt;
&lt;!--[if lt IE 9]&gt;
  ## HTML5Shiv enable the compatibility with IE8
  &lt;script src="$services.webjars.url('html5shiv', 'html5shiv.min.js')"&gt;&lt;/script&gt;
  ## Respond.js implements the CSS 3 media queries for IE8
  &lt;script type="text/javascript" src="$services.webjars.url('respond', 'dest/respond.min.js')" defer="defer"&gt;&lt;/script&gt;
&lt;![endif]--&gt;
&lt;script type="text/javascript"&gt;
// &lt;![CDATA[
## Requirejs will automatically add a ".js" suffix if the generated URL doesn't contain a "?". It happens that we
## don't generate a URL with "?" when we export in HTML for example. In this case we remove the ".js" suffix since
## requirejs will add one...
## Note that we cannot do this generically in the webjars module when exporting in HTML because the webjars module
## provide generic URLs and they don't all go through requirejs...
## Note that this comment and code below are not correctly indentend voluntarily in order to generate nicely formatted
## (and valid) code at runtime!
#macro(removeJsSuffix $expr)
## Note that velocity takes argument references by name (see: https://velocity.apache.org/engine/releases/velocity-1.5/user-guide.html#velocimacros).
## So we set the value of the $expr in the $url variable to not execute $expr multiple times.
#set ($url = $expr)
#if (!$url.contains('?'))$stringtool.removeEnd($url, '.js')#else$url#{end}
#end
##
## Start the requirejs config.
##
require.config({
  paths: {
    'jquery': '#removeJsSuffix($services.webjars.url("jquery", "jquery${jsExtension}"))',
    'bootstrap': '#removeJsSuffix($services.webjars.url("bootstrap", "js/bootstrap${jsExtension}"))',
    'xwiki-meta': '$stringtool.removeEnd($xwiki.getSkinFile('js/xwiki/meta.js'), '.js')',
    'xwiki-events-bridge': "$stringtool.removeEnd($xwiki.getSkinFile('js/xwiki/eventsBridge.js'), '.js')",
    'iscroll': '#removeJsSuffix($services.webjars.url('iscroll/5.1.3/build/iscroll-lite.js'))',
#if ($displayDrawer)
    'drawer': '#removeJsSuffix($services.webjars.url('drawer', "js/jquery.drawer${jsExtension}"))',
#end
    'deferred': "$stringtool.removeEnd($xwiki.getSkinFile('uicomponents/require/deferred.js'), '.js')"
  },
  shim: {
#if ($displayDrawer)
    'drawer': ['jquery', 'iscroll'],
#end
    'bootstrap' : ['jquery']
  },
  ## see: http://requirejs.org/docs/jquery.html#noconflictmap to see why this works.
  map: {
    '*': {
      'jquery': 'jQueryNoConflict'
    },
    'jQueryNoConflict': {
      'jquery': 'jquery'
    },
  }
});
define('jQueryNoConflict', ['jquery'], function ($) {
    return $.noConflict();
});
if (Prototype.BrowserFeatures.ElementExtensions) {
  require(['jquery', 'bootstrap'], function ($) {
    // Fix incompatibilities between BootStrap and Prototype
    var disablePrototypeJS = function (method, pluginsToDisable) {
      var handler = function (event) {
        event.target[method] = undefined;
        setTimeout(function () {
            delete event.target[method];
        }, 0);
      };
      pluginsToDisable.each(function (plugin) { 
          $(window).on(method + '.bs.' + plugin, handler); 
      });
    },
    pluginsToDisable = ['collapse', 'dropdown', 'modal', 'tooltip', 'tab', 'popover'];
    disablePrototypeJS('show', pluginsToDisable);
    disablePrototypeJS('hide', pluginsToDisable);
  });
}
#if ($displayDrawer)
require(['jquery', 'drawer'], function($) {
  $(document).ready(function() {
    $('body').drawer();
  });
});
#end
XWiki.webapppath = "${xwiki.webAppPath}";
XWiki.servletpath = "${xwiki.servletPath}";
XWiki.contextPath = "${request.contextPath}";
XWiki.mainWiki = "$!{escapetool.javascript(${xcontext.mainWikiName})}";
// Deprecated: replaced by meta data in the HTML element
XWiki.currentWiki = "$!{escapetool.javascript(${xcontext.database})}";
XWiki.currentSpace = "$!{escapetool.javascript($doc.space)}";
XWiki.currentPage = "$!{escapetool.javascript($doc.name)}";
XWiki.editor = "$!{escapetool.javascript($editor)}";
XWiki.viewer = "$!{escapetool.javascript($viewer)}";
XWiki.contextaction = "${xcontext.getAction()}";
XWiki.skin = '$escapetool.javascript($xwiki.skin)';
XWiki.docisnew = $!doc.isNew();
XWiki.docsyntax = "$!doc.getSyntax().toIdString()";
XWiki.docvariant = "$!{escapetool.javascript($docvariant.replace('&amp;amp;', '&amp;'))}";
XWiki.blacklistedSpaces = [ #foreach($space in $blacklistedSpaces)#if($velocityCount &gt; 1),#end"$space"#end ];
XWiki.hasEdit = $hasEdit;
XWiki.hasProgramming = $hasProgramming;
XWiki.hasBackupPackImportRights =#if ($xwiki.package) $xwiki.package.hasBackupPackImportRights()#else false#end;
XWiki.hasRenderer = $services.rendering.availableRendererSyntaxes.contains($!doc.getSyntax());
window.docviewurl = "${doc.getURL('view')}";
window.docediturl = "${doc.getURL('edit')}";
window.docsaveurl = "${doc.getURL('save')}";
window.docgeturl = "${doc.getURL('get')}";
// ]]&gt;
&lt;/script&gt;</content>
    </property>
    <property>
      <path>javascript.vm</path>
    </property>
  </object>
  <object>
    <name>Demarches.Code.WikiDemarchesSkin</name>
    <number>12</number>
    <className>XWiki.XWikiSkinFileOverrideClass</className>
    <guid>a68f35bf-333b-4002-b24c-1844e62d25fe</guid>
    <class>
      <name>XWiki.XWikiSkinFileOverrideClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <content>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>content</name>
        <number>2</number>
        <prettyName>Content</prettyName>
        <rows>15</rows>
        <size>80</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </content>
      <path>
        <disabled>0</disabled>
        <name>path</name>
        <number>1</number>
        <prettyName>Path</prettyName>
        <size>255</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </path>
    </class>
    <property>
      <content>#template('colorThemeInit.vm')
## The default stylesheet configuration option allows to override the default style.css CSS
#set ($defaultstyle = $xwiki.getSpacePreference('stylesheet'))
#if ($defaultstyle == '')
  #set ($defaultstyle = "style.css")
#end
#set ($urlParametersMap = {})
## Specifying the skin to avoid some problems if the base skin is not the same as the current skin
## (see: https://jira.xwiki.org/browse/XWIKI-11190)
#set ($discard = $urlParametersMap.put("skin", "$!xwiki.skin"))
#if ($themeDoc)
  #set ($discard = $urlParametersMap.put("colorTheme", $services.model.serialize($themeDoc.getDocumentReference(), "default")))
  #set ($discard = $urlParametersMap.put("colorTheme_version", $themeDoc.version))
#end
#set ($urlParameters = $escapetool.xml($escapetool.url($urlParametersMap)))
#set ($defaultStyleURL = $xwiki.getSkinFile($defaultstyle, true))
&lt;link href="${defaultStyleURL}?${urlParameters}" rel="stylesheet" type="text/css" media="all" /&gt;
&lt;link href="$xwiki.getSkinFile('print.css', true)?${urlParameters}" rel="stylesheet" type="text/css" media="#if ($printss)all#{else}print#{end}" /&gt;
#set ($a11y = "$!{request.getCookie('a11y').getValue()}")
#if ($a11y == '')
  #set ($a11y = "$!{xwiki.getUserPreference('accessibility')}")
#end
#if ($a11y == '1')
  &lt;link href="$xwiki.getSkinFile('css/accessibility.css', true)" rel="stylesheet" type="text/css" media="all" /&gt;
#end
## The stylesheets configuration option allows to override the alternate stylesheets
## style1.css, style2.css and style3.css
#set ($stylesheets = $xwiki.getSpacePreference('stylesheets'))
#if ($stylesheets != '')
  #foreach ($stylesheet in $stylesheets.split(','))
    #if (!$stylesheet.equalsIgnoreCase($defaultstyle))
      &lt;link href="$xwiki.getSkinFile($stylesheet, true)?${urlParameters}" rel="alternate stylesheet" type="text/css" title="Alternate StyleSheet ${velocityCount}" /&gt;
    #end
  #end
#end
## IE specific stylesheets
&lt;!--[if IE]&gt;
  &lt;link href="$xwiki.getSkinFile('ie-all.css', true)#if (!$urlParametersMap.isEmpty())?${urlParameters}#end" rel="stylesheet" type="text/css" /&gt;
&lt;![endif]--&gt;
## Hook for inserting CSS skin extensions
#styleSheetExtensionHooks</content>
    </property>
    <property>
      <path>stylesheets.vm</path>
    </property>
  </object>
  <object>
    <name>Demarches.Code.WikiDemarchesSkin</name>
    <number>14</number>
    <className>XWiki.XWikiSkinFileOverrideClass</className>
    <guid>8c8f794a-5fcd-44f7-84ae-8f3b5b52fd1b</guid>
    <class>
      <name>XWiki.XWikiSkinFileOverrideClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <content>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>content</name>
        <number>2</number>
        <prettyName>Content</prettyName>
        <rows>15</rows>
        <size>80</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </content>
      <path>
        <disabled>0</disabled>
        <name>path</name>
        <number>1</number>
        <prettyName>Path</prettyName>
        <size>255</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </path>
    </class>
    <property>
      <content>// Looks nicer with the .table-striped() mix-in of bootstrap
.xwiki-livetable-display {
  .table;
  .table-striped;
}

@media only screen and (max-width: @screen-xs-max) {
  .skin-flamingo { // Needed to override the rules from livetable.css
    .xwiki-livetable-container {
      width: 100%;
      overflow-x: auto;
      overflow-y: auto;
    }
    table.xwiki-livetable {
      /* fix its width to the tablet width, the next one in terms of size */
      min-width: @container-sm - @grid-gutter-width;
    }
  }
}</content>
    </property>
    <property>
      <path>less/livetable.less</path>
    </property>
  </object>
  <object>
    <name>Demarches.Code.WikiDemarchesSkin</name>
    <number>0</number>
    <className>XWiki.XWikiSkins</className>
    <guid>f9020886-48b3-4f1a-bd54-392f886da30a</guid>
    <class>
      <name>XWiki.XWikiSkins</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <baseskin>
        <disabled>0</disabled>
        <name>baseskin</name>
        <number>2</number>
        <prettyName>Base Skin</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </baseskin>
      <edit.vm>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>edit.vm</name>
        <number>10</number>
        <prettyName>Edit</prettyName>
        <rows>15</rows>
        <size>80</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </edit.vm>
      <footer.vm>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>footer.vm</name>
        <number>7</number>
        <prettyName>Footer</prettyName>
        <rows>15</rows>
        <size>80</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </footer.vm>
      <header.vm>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>header.vm</name>
        <number>6</number>
        <prettyName>Header</prettyName>
        <rows>15</rows>
        <size>80</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </header.vm>
      <logo>
        <disabled>0</disabled>
        <name>logo</name>
        <number>3</number>
        <prettyName>Logo</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </logo>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <outputSyntax>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>outputSyntax</name>
        <number>4</number>
        <prettyName>Output Syntax</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>html/5.0=HTML 5|xhtml/1.0=XHTML 1.0</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </outputSyntax>
      <style.css>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>style.css</name>
        <number>5</number>
        <prettyName>Style</prettyName>
        <rows>15</rows>
        <size>80</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </style.css>
      <view.vm>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>view.vm</name>
        <number>9</number>
        <prettyName>View</prettyName>
        <rows>15</rows>
        <size>80</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </view.vm>
      <viewheader.vm>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>viewheader.vm</name>
        <number>8</number>
        <prettyName>View Header</prettyName>
        <rows>15</rows>
        <size>80</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </viewheader.vm>
    </class>
    <property>
      <baseskin>flamingo</baseskin>
    </property>
    <property>
      <edit.vm/>
    </property>
    <property>
      <footer.vm/>
    </property>
    <property>
      <header.vm/>
    </property>
    <property>
      <logo>logo.svg</logo>
    </property>
    <property>
      <name>Wiki demarches skin</name>
    </property>
    <property>
      <outputSyntax>html/5.0</outputSyntax>
    </property>
    <property>
      <style.css/>
    </property>
    <property>
      <view.vm/>
    </property>
    <property>
      <viewheader.vm/>
    </property>
  </object>
</xwikidoc>
