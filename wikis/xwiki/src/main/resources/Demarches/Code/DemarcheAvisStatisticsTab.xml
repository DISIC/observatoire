<?xml version="1.1" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.3" reference="Demarches.Code.DemarcheAvisStatisticsTab" locale="">
  <web>Demarches.Code</web>
  <name>DemarcheAvisStatisticsTab</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <creationDate>1544396400000</creationDate>
  <parent>xwiki:Demarches.Code.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <date>1544396400000</date>
  <contentUpdateDate>1544396400000</contentUpdateDate>
  <version>1.1</version>
  <title>DemarcheAvisStatisticsTab</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{velocity output="false"}}
#*
  Gets the avis stats for the current demarche, in $avisStatsResult variable, the only global variable along with colors and constants.

  Expected format for stats:
  {
   'date_start' : java.util.Date object
   'date_end' : java.util.Date object
   'source' : 'live|pagecache|statscache',
   'moyenne' : decimal from 1 to 3
   'satisfaction' : percentage
   'occurrences' : long number
   'score' : {'1' : , '2' : , '3' : }, -&gt; long numbers, all
   'facile' : {'1' : , '2' : , '3' : }, -&gt; long numbers, all
   'comprehensible' : {'1' : , '2' : , '3' : }, -&gt; long numbers, all
   'difficultes' : {'manque-d-informations' : , 'dysfonctionnement': , 'mobile' : , 'pieces-jointes' : , 'suite' : , 'autre' : }, -&gt; long numbers, all
   'aide' : {'proche' : , 'association': , 'agent' : , 'internet' : , 'autre' : } -&gt; long numbers, all
   'scorehistory_permonth' : {
     year : {
       month : {'1' : , '2' : , '3' : } -&gt; long numbers, all
     } -&gt; one year object for each year in the period, one month object for each month in the year in the period. numeric format for both year and month, prefixed by 0 for the month
   }
  }
*#
#macro(computeAvisStats $minDate $maxDate)
  ## first log when this is happening so that we can evaluate perf issues
  #set ($discard = $services.logging.getLogger('Demarches.Code.DemarcheAvisStatisticsTab').warn("Computing stats for dates $minDate and $maxDate for demarche $doc.name"))
  ## compute results
  #set ($avisStatsResult = {'source' : 'live', 'date_start' : $minDate, 'date_end' : $maxDate, 'occurrences' : 0})
  ## count each vote of each type, this allows to both compute the average and the total votes and also the each score individually
  #set ($hql = 'select score.value, count(*) from XWikiDocument as doc, BaseObject as avis, IntegerProperty as score, StringProperty as demarche where avis.name = doc.fullName and avis.className = :className and avis.id = score.id.id and score.id.name = :scoreProperty and demarche.id.id = avis.id and demarche.id.name = :demarcheProperty and demarche.value = :demarche and score.value &gt; 0 and doc.creationDate &gt;= :minDate and doc.creationDate &lt;= :maxDate group by score.value')
  #set ($entries = $services.query.hql($hql).bindValue('className', $AVIS_CLASS_ID).bindValue('scoreProperty', 'score').bindValue('demarcheProperty', 'demarche').bindValue('demarche', $doc.fullName).bindValue('minDate', $minDate).bindValue('maxDate', $maxDate).execute())
  #if ($entries.size() &gt; 0)
    ## compute the total number of avis, and the score values map as well as the moyenne
    #set ($avisCount = 0)
    #set ($totalSatisfactionPoints = 0)
    #set ($scoreValuesMap = {})
    #foreach($countRes in $entries)
      #set ($discard = $scoreValuesMap.put("$countRes[0]", $countRes[1]))
      #set ($avisCount = $avisCount + $countRes[1])
      #set ($totalSatisfactionPoints = $totalSatisfactionPoints + $mathtool.mul($countRes[0], $countRes[1]))
    #end
  #end
  #if ($avisCount &amp;&amp; $avisCount &gt; 0)
    ## add the number of avis in the map
    #set ($discard = $avisStatsResult.put('occurrences', $avisCount))
    ## add the score values in the results
    #set($discard = $avisStatsResult.put('score', $scoreValuesMap))
    #set ($satisfactionIndex = $mathtool.div($totalSatisfactionPoints, $avisCount))
    ## add moyenne and satisfaction in the map
    #set ($discard = $avisStatsResult.put('moyenne', $satisfactionIndex))
    #set ($discard = $avisStatsResult.put('satisfaction', $mathtool.mul($mathtool.sub($satisfactionIndex, 1), 50)))
    ## Now that we know we have avis, let's go ahead and compute the rest of the elements of the map.
    ##
    ## 1. First, the integer properties
    ##
    #foreach($propName in ['facile', 'comprehensible'])
      ## query the avis for this property
      #set ($hql = "select prop.value, count(doc.fullName) from XWikiDocument as doc, BaseObject as obj, IntegerProperty as prop, StringProperty demarche where doc.fullName = obj.name and obj.className = :className and obj.id = prop.id.id and prop.id.name = :propertyName and demarche.id.id = obj.id and demarche.id.name = 'demarche' and demarche.value = :demarche  and doc.creationDate &gt;= :minDate and doc.creationDate &lt;= :maxDate and prop.value &lt;&gt; '' group by prop.value")
      #set ($query = $services.query.hql($hql).bindValue('className', $AVIS_CLASS_ID).bindValue('demarche', $doc.fullName).bindValue('propertyName', $propName).bindValue('minDate', $minDate).bindValue('maxDate', $maxDate))
      #set($results = $query.execute())
      #if ($results.size() &gt; 0)
        #set($valuesMap = {})
        #foreach($countRes in $results)
          #set($discard = $valuesMap.put("$countRes[0]", $countRes[1]))
        #end
        ## add the values map in the results
        #set($discard = $avisStatsResult.put($propName, $valuesMap))
      #end
    #end
    ##
    ## 2. Then the list properties
    ##
    #foreach($propName in ['difficultes', 'aide'])
      #set ($hql = "select list, count(doc.fullName) from XWikiDocument as doc, BaseObject as obj, DBStringListProperty as prop join prop.list list, StringProperty demarche where doc.fullName = obj.name and obj.className = :className and obj.id = prop.id.id and prop.id.name = :propertyName and demarche.id.id = obj.id and demarche.id.name = 'demarche' and demarche.value = :demarche and doc.creationDate &gt;= :minDate and doc.creationDate &lt;= :maxDate group by list")
      #set ($query = $services.query.hql($hql).bindValue('className', $AVIS_CLASS_ID).bindValue('demarche', $doc.fullName).bindValue('propertyName', $propName).bindValue('minDate', $minDate).bindValue('maxDate', $maxDate))
      #set($results = $query.execute())
      #if ($results.size() &gt; 0)
        #set($valuesMap = {})
        #foreach($countRes in $results)
          #set($discard = $valuesMap.put("$countRes[0]", $countRes[1]))
        #end
        ## add the values map in the results
        #set($discard = $avisStatsResult.put($propName, $valuesMap))
      #end
    #end
    ##
    ## 3. And the history per month
    ##
    ## count each vote of each type, this allows to both compute the average and the total votes and also the each score individually
    #set ($hql = 'select score.value, count(*), concat(year(doc.creationDate), month(doc.creationDate)) from XWikiDocument as doc, BaseObject as avis, IntegerProperty as score, StringProperty as demarche where avis.name = doc.fullName and avis.className = :className and avis.id = score.id.id and score.id.name = :scoreProperty and demarche.id.id = avis.id and demarche.id.name = :demarcheProperty and demarche.value = :demarche and score.value &gt; 0 and doc.creationDate &gt;= :minDate and doc.creationDate &lt;= :maxDate group by concat(year(doc.creationDate), month(doc.creationDate)), score.value')
    #set ($entries = $services.query.hql($hql).bindValue('className', $AVIS_CLASS_ID).bindValue('scoreProperty', 'score').bindValue('demarcheProperty', 'demarche').bindValue('demarche', $doc.fullName).bindValue('minDate', $minDate).bindValue('maxDate', $maxDate).execute())
    #set($historyPerMonthResults = $collectionstool.orderedMap)
    #foreach($countRes in $entries)
      #set($y = $countRes[2].substring(0, 4))
      #set($yearMonths = $historyPerMonthResults.get($y))
      #if ("$!yearMonths" == '')
        #set($yearMonths = $collectionstool.orderedMap)
        #set($discard = $historyPerMonthResults.put($y, $yearMonths))
      #end
      #set($M = $countRes[2].substring(4))
      #if ($M.length() &lt; 2)
        #set($M = "0${M}")
      #end
      #set($monthValues = $yearMonths.get($M))
      #if ("$!monthValues" == '')
        #set($monthValues = {})
        #set($discard = $yearMonths.put($M, $monthValues))
      #end
      #set($discard = $monthValues.put("$countRes[0]", $countRes[1]))
    #end
    #set($discard = $avisStatsResult.put('scorehistory_permonth', $historyPerMonthResults))
  #end
#end
##
## Macro to display the data source for the stats (message on the screen)
##
#macro(displayStatsSource $minDate $maxDate $externalSource $nbAvis)
  #set ($statsSourceFormatter = $xwiki.jodatime.getDateTimeFormatterForPattern("d MMMMM yyyy").withLocale($xwiki.getLocalePreference()))
  #set ($fMaxDate = $statsSourceFormatter.print($maxDate))
    #set ($fMinDate = $statsSourceFormatter.print($minDate))
  #set ($fMinDate = $fMinDate.replaceAll('^1 ', '1er '))
  #set ($fMaxDate = $fMaxDate.replaceAll('^1 ', '1er '))
  #set ($textKey = 'wikidemarches.demarche.avis.stats.recueil.between')
  ## if the source is external, change the message
  #if ($externalSource)
    ## for an external source, we may now know on how many users we got the avis
    #if ($nbAvis &amp;&amp; $nbAvis &gt; 0)
      #set ($textKey = 'wikidemarches.demarche.avis.stats.external.between')
    #else
      #set ($textKey = 'wikidemarches.demarche.avis.stats.external.unknownavis.between')
    #end
  #end
  #set ($nbAvisLabel = $numbertool.format("number", $nbAvis))
  #set ($label = $services.localization.render($textKey, [$fMinDate, $fMaxDate, $nbAvisLabel]))
  &lt;span class="lighter"&gt;$label&lt;/span&gt;
#end
##
## Macro to format a number it using a locale and with at most one decimal
##
#macro(formatNumber $value $return)
  #set ($macro.formatter = $numbertool.getNumberFormat('#.#', $xcontext.locale))
  #set ($macro.discard = $macro.formatter.setMinimumFractionDigit(0))
  #set ($macro.discard = $macro.formatter.setMaximumFractionDigit(1))
  #set ($macro.formattedValue = $macro.formatter.format($value))
  #set ($return = $NULL)
  #setVariable("$return", $macro.formattedValue)
#end
##
## Macro to display the satisfaction index, reused for dynamic computed indicator but also for static indicator
##
#macro(displaySatisfactionIndex $satisfactionIndexPercent $nbAvis $displayHelp $fullWidth)
  #set ($formattedSatisfactionIndex = '')
  #set ($macro.value = $mathtool.div($satisfactionIndexPercent, 10))
  #formatNumber($macro.value, $formattedSatisfactionIndex)
  &lt;div class="#if(!$fullWidth)col-lg-6 col-md-6#end col-xs-12" style="text-align: center; padding: 2em 0;"&gt;
    &lt;div class="lighter"&gt;Indice de satisfaction global&lt;/div&gt;
    #set($explanationDoc = $xwiki.getDocument('Main.Satisfaction'))
    #set($explanationLink = "&lt;a href='$escapetool.xml($explanationDoc.getURL())' title='$escapetool.xml($explanationDoc.title)' class='average-help'&gt;&lt;span class='fa fa-question-circle-o'&gt;&lt;/span&gt;&lt;span class='sr-only'&gt;$escapetool.xml($explanationDoc.title)&lt;/span&gt;&lt;/a&gt;")
    &lt;span style="font-size:400%"&gt;${formattedSatisfactionIndex}/10 #if($displayHelp)$explanationLink#end&lt;/span&gt;
    &lt;div&gt;#if($nbAvis &amp;&amp; $nbAvis &gt; 0)($numbertool.format("number", $nbAvis) avis)#end&lt;/div&gt;
  &lt;/div&gt;
#end
##
## Displays the piechart of scores
##
#macro(displayScoresPieChart)
  #set($scores = $avisStatsResult.score)
  ## display the table
  &lt;table id="score" class="hidden"&gt;
  &lt;caption&gt;Répartition des avis&lt;/caption&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th scope="col"&gt;Satisfaction&lt;/th&gt;
      &lt;th scope="col"&gt;Réponses&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    #set($labels =  {'1': 'avis&amp;#10;négatifs', '2':'avis&amp;#10;moyens', '3':'avis&amp;#10;positifs'})
    #foreach($v in ['1', '2', '3'])
      #set($valueToDisplay = 0)
      #if ($scores.get($v) != $NULL)
        #set($valueToDisplay = $scores.get($v))
      #end
      ## compute percentage
      #set($valueToDisplay = $mathtool.round($mathtool.div($mathtool.mul($valueToDisplay, 100), $avisStatsResult.occurrences)))
      ## display this value
      &lt;tr&gt;&lt;td&gt;$labels.get($v)&lt;/td&gt;&lt;td&gt;$valueToDisplay&lt;/td&gt;&lt;/tr&gt;
    #end
  &lt;/tbody&gt;
  &lt;/table&gt;
  ## prepare chart options and call macro to display the graph
  #set($chartOptions = {
    "backgroundColors": [$colorDanger, $colorWarning, $colorGood],
    "opacity": 1,
    "afterValue": "%",
    "skipZeros": true,
    "legend": {
      "display": false
    },
    "layout": {
      "padding": {
        "left": 50,
        "right": 50,
        "top": 50,
        "bottom": 50
      }
    },
    "plugins": {
      "datalabels": {
        "anchor": "end",
        "align": "end",
        "includeLegend": true
      }
    }
  })
  #set ($options = $jsontool.serialize($chartOptions).replaceAll("~","~~").replaceAll("'","~'"))

  {{tableToChartJS title='Répartition des avis' type='pie' table='score' options='$options'/}}

  &lt;div class="lighter"&gt;Répartition des avis&lt;/div&gt;
#end
##
## Displays a horizontal bar chart for smiley values (to be used for ease of use and comprehension)
##
#macro(displaySmileyBarChart $propName $tableCaption $dataTableLabel)
  #set($statValues = $avisStatsResult.get($propName))
  #if ($statValues &amp;&amp; $statValues.size() &gt; 0)
    ## display the table
    &lt;table id="$propName" class="hidden"&gt;
    &lt;caption&gt;$tableCaption&lt;/caption&gt;
    &lt;thead&gt;
      &lt;tr&gt;
        &lt;th scope="col"&gt;$dataTableLabel&lt;/th&gt;
        &lt;th scope="col"&gt;Réponses&lt;/th&gt;
      &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
      #set($labels =  {'1': 'Mauvais', '2':'Moyen', '3':'Bon'})
      #foreach($v in ['1', '2', '3'])
        #set($valueToDisplay = 0)
        #if ($statValues.get($v) != $NULL)
          #set($valueToDisplay = $statValues.get($v))
        #end
        ## display this value
        &lt;tr&gt;&lt;td&gt;$labels.get($v)&lt;/td&gt;&lt;td&gt;$valueToDisplay&lt;/td&gt;&lt;/tr&gt;
      #end
    &lt;/tbody&gt;
    &lt;/table&gt;
    #set($chartOptions = {
        "backgroundColors": [$colorDanger, $colorWarning, $colorGood],
        "opacity": 1,
        "labelsMap": {"Mauvais": "\uf119", "Moyen": "\uf11a", "Bon":"\uf118"},
        "scales": {
          "xAxes": [{
            "gridLines": {"display": false, "drawBorder": false},
            "ticks": { "beginAtZero": true, "display": false}
          }],
          "yAxes": [{
            "gridLines": {"display": false, "drawBorder": true},
            "ticks": {"fontFamily": "FontAwesome", "fontSize": 24}
          }]
        },
        "tooltips": {
          "titleFontFamily": "FontAwesome"
        },
        "legend": {
          "display": false
        },
        "layout": {
          "padding": {
            "right": 50
          }
        },
        "plugins": {
          "datalabels": {
            "anchor": "end",
            "align": "end"
          }
        }
    })
    #set ($options = $jsontool.serialize($chartOptions).replaceAll("~","~~").replaceAll("'","~'"))

    {{tableToChartJS title="$tableCaption" type='horizontalBar' table='$propName' options='$options'/}}

  #else
    &lt;span style="text-align:center"&gt;Aucune réponse.&lt;/span&gt;
  #end
#end
##
## Displays a horizontal bar chart for static list values (to be used for difficulties and help)
##
#macro(displayListValuesBarChart $propName $tableCaption $dataTableLabel)
  #set($statValues = $avisStatsResult.get($propName))
  #if ($statValues &amp;&amp; $statValues.size() &gt; 0)
    ## display the table
    &lt;table id="$propName" class="hidden"&gt;
    &lt;caption&gt;$tableCaption&lt;/caption&gt;
    &lt;thead&gt;
      &lt;tr&gt;
        &lt;th scope="col"&gt;$dataTableLabel&lt;/th&gt;
        &lt;th scope="col"&gt;Réponses&lt;/th&gt;
      &lt;/tr&gt;
    &lt;/thead&gt;
    ## get the possible values from the class, as they are there
    #set ($possibleValues = $xwiki.getClass($AVIS_CLASS_ID).get($propName).listValues)
    &lt;tbody&gt;
      ## iterate and display whatever is in the $avisStatsResult
      #foreach($v in $possibleValues)
        #set($valueToDisplay = 0)
        #if ($statValues.get($v) != $NULL)
          #set($valueToDisplay = $statValues.get($v))
        #end
        ## display this value
        &lt;tr&gt;&lt;td&gt;$escapetool.xml($services.localization.render("${AVIS_CLASS_ID}_${propName}_${v}"))&lt;/td&gt;&lt;td&gt;$valueToDisplay&lt;/td&gt;&lt;/tr&gt;
      #end
    &lt;/tbody&gt;
    &lt;/table&gt;
    #set($chartOptions = {
        "maintainAspectRatio": false,
        "backgroundColors": ["#6b5f96"],
        "opacity": 1,
        "skipZeros": true,
        "scales": {
          "xAxes": [{
            "gridLines": {"display": false, "drawBorder": false},
            "ticks": { "beginAtZero": true, "display": false}
          }],
          "yAxes": [{
            "gridLines": {"display": false, "drawBorder": true},
            "ticks": { "display": true, "mirror": true, "padding": -5, "labelOffset": -20},
            "barThickness": 25,
            "maxBarThickness": 25
          }]
        },
        "legend": {
          "display": false
        },
        "layout": {
          "padding": {
            "right": 50
          }
        },
        "plugins": {
          "datalabels": {
            "anchor": "end",
            "align": "end"
          }
        }
    })
    #set ($options = $jsontool.serialize($chartOptions).replaceAll("~","~~").replaceAll("'","~'"))

    {{tableToChartJS title="$tableCaption" type='horizontalBar' table='$propName' options='$options' cssClass='histo'/}}

  #else
    &lt;span style="text-align:center"&gt;Aucune réponse.&lt;/span&gt;
  #end
  ##
  ## Computes the satisfaction index for the history per month data from the $avisStatsResult
  ##
  #macro(computeSatisfactionIndexForHistory)
    #set($history = $avisStatsResult.get('scorehistory_permonth'))
    #foreach($y in $history.entrySet())
      #foreach($M in $y.value.entrySet())
        #set($monthValues = $M.value)
        #set($totalScorePointsPerMonth = 0)
        #set($avisCountPerMonth = 0)
        #set($satisfactionPerMonth = 0)
        #foreach($v in [1..3])
          #if ($monthValues.get("$v"))
            #set($totalScorePointsPerMonth = $mathtool.mul($monthValues.get("$v"), $v) + $totalScorePointsPerMonth)
            #set($avisCountPerMonth = $!monthValues.get("$v") + $avisCountPerMonth)
          #end
        #end
        #if ($avisCountPerMonth &gt; 0)
          #set($satisfactionPerMonth = $mathtool.mul($mathtool.sub($mathtool.div($totalScorePointsPerMonth, $avisCountPerMonth), 1), 50))
          #set($satisfactionPerMonth = $mathtool.div($satisfactionPerMonth, 10))
        #end
        #set($discard = $monthValues.put('satisfaction', $satisfactionPerMonth))
        #set($discard = $monthValues.put('avisCount', $avisCountPerMonth))
      #end
    #end
  #end
  ##
  ## Prepares the list of months to display the data history for, 
  ## from the min date and the max date, 
  ## with proper coordinates to be able to access data and labels, in the proper order for display.
  ##
  #macro(prepareCalendarForCharts $from $to)
    #set($chartsCalendar = [])
    #set($currentDateTime = $to)
    #set($yearFormatter = $xwiki.jodatime.getDateTimeFormatterForPattern('yyyy'))
    #set($monthFormatter = $xwiki.jodatime.getDateTimeFormatterForPattern('MM'))
    #set($chartNameFormatter = $xwiki.jodatime.getDateTimeFormatterForPattern('MMM yyyy').withLocale($services.localization.currentLocale))
    ## max 2 years between minDate and maxDate
    #foreach($i in [1..24])
      #set($discard = $chartsCalendar.add({'year' : $yearFormatter.print($currentDateTime), 'month' : $monthFormatter.print($currentDateTime), 'label' : $chartNameFormatter.print($currentDateTime)}))
      #set($currentDateTime = $currentDateTime.minusMonths(1))
      #if ($currentDateTime.isBefore($from))
        ## no more dates to display
        #break
      #end
    #end
    ## reverse the list, to make it start with the beginning
    #set($discard = $collectionstool.reverse($chartsCalendar))
  #end
  ##
  ## Prepares the variable chartOptions for the avis historybar charts, the common ones
  ##
  #macro(prepareHistoryBarChartOptions)
    #set($chartOptions = {
        "opacity": 1,
        "scales": {
          "xAxes": [{
            "gridLines": {"display": false, "drawBorder": false},
            "ticks": { "beginAtZero": true, "display": true}
          }],
          "yAxes": [{
            "gridLines": {"display": false, "drawBorder": false},
            "ticks": { "beginAtZero": true, "display": false},
            "min" : 0
          }]
        },
        "localization": {"locale": "fr-FR"},
        "plugins": {
          "datalabels": {
            "anchor": "end",
            "align": "end",
            "font": { "weight" : "bold"}
          }
        }
    })
  #end
  ##
  ## Displays the history vertical satisfaction bars
  ##
  #macro(displayHistorySatisfactionBars)
    ## display the table
    &lt;table id="satisfactionHistory" class="hidden"&gt;
    ## &lt;table id="satisfactionHistory"&gt;
    &lt;caption&gt;Historique de l'indice de satisfaction global (sur 10)&lt;/caption&gt;
    &lt;thead&gt;
      &lt;tr&gt;
        &lt;th scope="col"&gt;Période&lt;/th&gt;
        &lt;th scope="col"&gt;Indice de satisfaction&lt;/th&gt;
      &lt;/tr&gt;
    &lt;/thead&gt;
    #set($statValues = $avisStatsResult.get('scorehistory_permonth'))
    #prepareCalendarForCharts($minDateTime, $maxDateTime)
    &lt;tbody&gt;
      ## iterate and display whatever is in the $avisStatsResult
      #foreach($period in $chartsCalendar)
        #set($valueToDisplay = 0)
        #set($statValue = $statValues.get($period.year).get($period.month).satisfaction)
        #if ($statValue)
          ## Keep only one decimal at most
          #set($valueToDisplay = $mathtool.mul($statValue, 10))
          #set($valueToDisplay = $mathtool.round($valueToDisplay))
          #set($valueToDisplay = $mathtool.div($valueToDisplay, 10))
        #end
        ## display this value
        &lt;tr&gt;&lt;td&gt;$period.label&lt;/td&gt;&lt;td&gt;$valueToDisplay&lt;/td&gt;&lt;/tr&gt;
      #end
    &lt;/tbody&gt;
    &lt;/table&gt;
    #prepareHistoryBarChartOptions()
    #set ($extraChartOptions = {
        "backgroundColors": ["$colorObservatoireBlue"],
        "afterValue": "",
        "layout": {
          "padding": {
            "top": 55
          }
        },
        "legend": {
          "display": false
        }
    })
    #set ($discard = $chartOptions.putAll($extraChartOptions))
    ##
    #set ($options = $jsontool.serialize($chartOptions).replaceAll("~","~~").replaceAll("'","~'"))

    {{tableToChartJS title="Historique de l'indice de satisfaction global (sur 10)" type='bar' table='satisfactionHistory' options='$options'/}}

  #end
  ##
  ## Displays the history vertical stacked avis bars
  ##
  #macro(displayHistoryScoreStackBars)
    ## display the table
    &lt;table id="scoreHistory" class="hidden"&gt;
    ## &lt;table id="scoreHistory"&gt;
    &lt;caption&gt;Historique du nombre d'avis&lt;/caption&gt;
    &lt;thead&gt;
      &lt;tr&gt;
        &lt;th scope="col"&gt;Période&lt;/th&gt;
        &lt;th scope="col"&gt;Type d'avis&lt;/th&gt;
        &lt;th scope="col"&gt;Nombre d'avis&lt;/th&gt;
      &lt;/tr&gt;
    &lt;/thead&gt;
    #set($avisLabels = {'1' : 'Avis négatifs', '2' : 'Avis moyens', '3' : 'Avis positifs'})
    #set($statValues = $avisStatsResult.get('scorehistory_permonth'))
    #prepareCalendarForCharts($minDateTime, $maxDateTime)
    &lt;tbody&gt;
      ## iterate and display whatever is in the $avisStatsResult
      #foreach($period in $chartsCalendar)
        #set($monthResults = $statValues.get($period.year).get($period.month))
        ## display this value
        #foreach($v in ['1', '2', '3'])
          &lt;tr&gt;
            &lt;td&gt;$period.label&lt;/td&gt;
            &lt;td&gt;$avisLabels.get($v)&lt;/td&gt;
            &lt;td&gt;#if($monthResults.get($v))$monthResults.get($v)#{else}0#{end}&lt;/td&gt;
          &lt;/tr&gt;
        #end
      #end
    &lt;/tbody&gt;
    &lt;/table&gt;
    #prepareHistoryBarChartOptions()
    #set ($extraChartOptions = {
        "backgroundColors": [$colorDanger, $colorWarning, $colorGood],
        "borderColors" : ["#FFFFFF", "#FFFFFF", "#FFFFFF"],
        "borderWidths" : {'top' : 2, 'bottom' : 0, 'left' : 0, 'right' : 0},
        "layout": {
          "padding": {
            "top": 0
          }
        },
        "legend": {
          "display": true,
          "position" : "top",
          "x_padding" : 25
        }
    })
    #set ($discard = $chartOptions.putAll($extraChartOptions))
    #set ($discard = $chartOptions.plugins.datalabels.put('computeTotals', true))
    #set ($discard = $chartOptions.scales.get("xAxes").get(0).put("stacked", true))
    #set ($discard = $chartOptions.scales.get("yAxes").get(0).put("stacked", true))
    ##
    #set ($options = $jsontool.serialize($chartOptions).replaceAll("~","~~").replaceAll("'","~'"))

    {{tableToChartJS title="Historique du nombre d'avis" type='bar' table='scoreHistory' multipleDataSets="true" dataSetLabel="1" options='$options'/}}

  #end
#end
{{/velocity}}

{{velocity}}
#set ($AVIS_CLASS_ID = 'Avis.Code.AvisClass')
#set ($INDICATEURS_CLASS_ID = 'Demarches.Indicateurs.Code.IndicateursClass')
##
## Retrieve colors from theme
#set ($colorThemeId = $xwiki.getUserPreference('colorTheme'))
#set ($colorThemePage = $xwiki.getDocument($services.model.resolveDocument($colorThemeId)))
#set ($colorThemeObject = $colorThemePage.getObject('FlamingoThemesCode.ThemeClass'))
#set ($colorDanger = $colorThemeObject.getValue('brand-danger'))
#set ($colorWarning = $colorThemeObject.getValue('brand-warning'))
#set ($colorGood = $colorThemeObject.getValue('brand-success'))
#set ($colorObservatoireBlue = $colorThemeObject.getValue('link-color'))
##
## Identification of the period for which avis need to be counted, this script needs to serve the following cases:
## 1/ no date parameters -&gt; the avis up to today will be counted and results for one year will be displayed (the previous year)
## 2/ only one date parameter, the end date, specified as "date" or "date-fin" -&gt; the period used is 15/06/2018 to the passed date
## 3/ two date parameters, date-debut and date-fin -&gt; the period used is the one defined by these parameters
#set ($minDateString = $request.get('date-debut'))
#set ($maxDateString = $request.get('date-fin'))
## The line below is to make sure the previous URLs generated for JSON schema version &lt; 1.2 with parameter "date" keep working
#if ($maxDateString == $NULL)#set ($maxDateString = $request.get('date'))#end
#set ($minDateTime = $NULL)
#set($maxDateTime = $NULL)
#set ($formatter = $xwiki.jodatime.getDateTimeFormatterForPattern('yyyy-MM-dd'))
#if ($maxDateString != $NULL)
  ## case 2 or 3
  #set ($maxDateTime = $formatter.parseDateTime($maxDateString).withHourOfDay(23).withMinuteOfHour(59).withSecondOfMinute(59))
#else
  ## case 1
  #set ($maxDateTime = $xwiki.jodatime.getDateTime())
#end
#if ($minDateString != $NULL)
  ## case 3
  #set ($minDateTime = $formatter.parseDateTime($minDateString).withHourOfDay(0).withMinuteOfHour(0).withSecondOfMinute(0))
#else
  ## if we received a max date, but no min date, we use the "beginning of time" date, otherwise we use the one year window
  #if ($maxDateString != $NULL)
    ## Date where getting opinions started, case 2 above
    #set ($minDateTime = $xwiki.jodatime.getDateTime(2018, 6, 15, 0, 0, 0, 0))
  #else
    ## Slippery year, case 1 above
    #set ($minDateTime = $maxDateTime.minusYears(1).plusDays(1).withHourOfDay(0).withMinuteOfHour(0).withSecondOfMinute(0))
  #end
#end
#set($cacheId = "${doc.name}-${formatter.print($minDateTime)}-${formatter.print($maxDateTime)}")
#set ($discard = $services.logging.getLogger('Demarches.Code.DemarcheAvisStatisticsTab').warn("Working with cache $cacheId"))
## explicitly inclyde the jsx / ssx of the chartjs macro if using cache
#set ($discard = $xwiki.ssx.use('XWiki.ChartJS.WebHome'))
#set ($discard = $xwiki.jsx.use('XWiki.ChartJS.WebHome'))
{{/velocity}}

{{cache id="~{~{velocity~}~}$cacheId~{~{/velocity~}~}" timeToLive="86400"}}
{{velocity}}
#set ($discard = $services.logging.getLogger('Demarches.Code.DemarcheAvisStatisticsTab').warn("Generating cache $cacheId"))
## "clean" is set to false because the cleaning wipes out the canvas elements which are generated by ChartJS
{{html wiki="true" clean="false"}}
&lt;div class="tab-pane fade #if($selectedTab == 'statistics-tab')active in#end" role="tabpanel" id="statistics-tab" aria-labelledby="statistics-tab"&gt;
## Compute the demarche stats
#set($avisStatsResult = $NULL)
#computeAvisStats($minDateTime.toDate(), $maxDateTime.toDate())
## Start rendering these avis, computed in $avisStatsResult
#if ($avisStatsResult.occurrences &gt; 0)
  ##
  ## There are avis to display. Start displaying.
  ##
  #displayStatsSource($minDateTime, $maxDateTime, false, $avisStatsResult.occurrences)
  &lt;div class="row vertical-align"&gt;
    #displaySatisfactionIndex($avisStatsResult.satisfaction, $avisStatsResult.occurrences, true, false)
    &lt;div class="col-lg-6 col-md-6 col-xs-12" style="text-align: center;"&gt;
      #if ($avisStatsResult.score != $NULL)
        #displayScoresPieChart()
      #end
    &lt;/div&gt;
  &lt;/div&gt;
  ##
  ## Display the history of avis
  ##
  #computeSatisfactionIndexForHistory()
  &lt;h2&gt;Historique des avis&lt;/h2&gt;
  &lt;div class="row"&gt;
    &lt;div class="col-lg-6 col-md-6 col-sm-12"&gt;
      &lt;h3&gt;Indice de satisfaction global (sur 10)&lt;/h3&gt;
      #displayHistorySatisfactionBars()
    &lt;/div&gt;
    &lt;div class="col-lg-6 col-md-6 col-sm-12"&gt;
      &lt;h3&gt;Nombre d'avis&lt;/h3&gt;
      #displayHistoryScoreStackBars()
    &lt;/div&gt;
  &lt;/div&gt;
  ##
  ## Détails des avis
  ##
  &lt;h2&gt;Détail des avis&lt;/h2&gt;
  &lt;div class="row"&gt;
    &lt;div class="col-lg-6 col-md-6 col-sm-12"&gt;
      &lt;h3&gt;Facilité d'usage&lt;/h3&gt;
      #displaySmileyBarChart('facile', "Répartition des réponses sur la facilité d'usage", "Facilité")
    &lt;/div&gt;
    &lt;div class="col-lg-6 col-md-6 col-sm-12"&gt;
      &lt;h3&gt;Compréhension&lt;/h3&gt;
      #displaySmileyBarChart('comprehensible', "Répartition des réponse sur la compréhension", "Facilité de compréhension")
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="row"&gt;
    &lt;div class="col-lg-6 col-md-6 col-sm-12"&gt;
      &lt;h3&gt;Difficultés rencontrées&lt;/h3&gt;
      #displayListValuesBarChart('difficultes', "Difficultés rencontrées", "Difficulté")
    &lt;/div&gt;
    &lt;div class="col-lg-6 col-md-6 col-sm-12"&gt;
      &lt;h3&gt;Aides sollicitées&lt;/h3&gt;
      #displayListValuesBarChart('aide', "Besoins d'aide", "Aide")
    &lt;/div&gt;
  &lt;/div&gt;
#else
  ##
  ## No avis for this démarche, check if there is any static indicator, only for the case when the stats are dated. When the stats are 'live', display avis.
  ##
  #set ($displayedStaticIndicator = false)
  #if ($maxDateTime)
    #set ($indicatorHql = ", BaseObject indicateurObj, StringProperty demarche, DateProperty finPeriode where doc.fullName = indicateurObj.name and indicateurObj.className = :indicateurClass and demarche.id.id = indicateurObj.id and demarche.id.name = 'demarche' and demarche.value = :demarche and finPeriode.id.id = indicateurObj.id and finPeriode.id.name='finPeriode' and finPeriode.value &lt;= :dateEnd order by finPeriode.value desc")
    #set ($indicatorQuery = $services.query.hql($indicatorHql).bindValue('indicateurClass', $INDICATEURS_CLASS_ID).bindValue('demarche', $doc.fullName).bindValue('dateEnd', $maxDateTime.toDate()))
    #set ($indicatorStats = $indicatorQuery.execute())
    #if ($indicatorStats.size() &gt; 0)
      ## get the document of the indicator, to get data from it
      #set ($indicatorDocName = $indicatorStats.get(0))
      #set ($indicatorObj = $xwiki.getDocument($indicatorDocName).getObject($INDICATEURS_CLASS_ID))
      #if ($indicatorObj &amp;&amp; $indicatorObj.getProperty('indiceSatisfaction').value != $NULL)
        #set ($displayedStaticIndicator = true)
        #set ($minDate = $indicatorObj.getProperty('debutPeriode').value)
        #set ($maxDate = $indicatorObj.getProperty('finPeriode').value)
        #set ($nbAvis = $indicatorObj.getProperty('nbAvis').value)
        #displayStatsSource($minDate, $maxDate, true, $nbAvis)
        &lt;div class="row vertical-align"&gt;
          #displaySatisfactionIndex($indicatorObj.getProperty('indiceSatisfaction').value, $nbAvis, false, true)
        &lt;/div&gt;
        &lt;div class="row indicator-comments"&gt;
          &lt;div class="col-xs-12"&gt;
            $indicatorObj.display('commentaire', 'view')
          &lt;/div&gt;
        &lt;/div&gt;
      #end
    #end
  #end
  ##
  ## if no static indicator is displayed, display a message that there are no avis
  ##
  #if (!$displayedStaticIndicator)
    #set ($noAvisYet = $services.localization.render('wikidemarches.demarche.avis.stats.noAvisYet'))
    &lt;div class="lighter" style="font-size: 1.3em; text-align: center; margin: 5em 0;"&gt;$noAvisYet&lt;/div&gt;
  #end
#end
&lt;/div&gt;
{{/html}}
{{/velocity}}
{{/cache}}
</content>
</xwikidoc>
