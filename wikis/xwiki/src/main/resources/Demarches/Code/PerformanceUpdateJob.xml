<?xml version="1.1" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.3" reference="Demarches.Code.PerformanceUpdateJob" locale="">
  <web>Demarches.Code</web>
  <name>PerformanceUpdateJob</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <creationDate>1544396400000</creationDate>
  <parent>xwiki:Demarches.Code.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <date>1544396400000</date>
  <contentUpdateDate>1544396400000</contentUpdateDate>
  <version>1.1</version>
  <title>Récuperation des données Pingdom</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{groovy}}
def configSource = services.component.getInstance(org.xwiki.configuration.ConfigurationSource.class)
def pingdomAPI = configSource.getProperty('pingdom.apitoken');
if(request.confirm &amp;&amp; request.confirm.equals("true") &amp;&amp; pingdomAPI != null) {
  def PINGDOM_AUTH = "Bearer " + pingdomAPI;
  def PINGDOM_ENDPOINT = "https://api.pingdom.com/api/3.1/";
  def LIST_OP = "checks";
  def DETAILS_OP = "summary.average";
  def DETAILS_PARAMS = "includeuptime=true"
  def START_DATE = "01/07/2019 00:00:00";
  def END_DATE = "30/09/2019 23:59:59";

  def WITH_DATE_INTERVAL = true;

  def LOGGER = services.logging.getLogger(doc.fullName);
  def NOW = new java.util.Date();
  def RESULTS_LOCATION = "Demarches.Performance";
  def DATE_FORMAT = new java.text.SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
  def jsonSlurper = new groovy.json.JsonSlurper();

  services.logging.setLevel(doc.fullName, org.xwiki.logging.LogLevel.DEBUG);

  String resultsDocumentName = NOW.getTime().toString();
  StringBuffer resultsAsString = new StringBuffer();
  LOGGER.debug("Starting to produce results set " + resultsDocumentName);

  LOGGER.debug('Getting the list of checks');

  def checksJson = new URL(PINGDOM_ENDPOINT + LIST_OP).getText(connectTimeout: 5000, readTimeout: 10000, useCaches: true, allowUserInteraction: false, requestProperties: ['Authorization': PINGDOM_AUTH]);

  LOGGER.debug('Got the checks');

  def checks = jsonSlurper.parseText(checksJson).checks;

  if (checks != null &amp;&amp; checks instanceof java.util.Collection) {
    LOGGER.debug("Starting to get the information for " + checks.size() + " elements");
    // prepare date parameters for the summary.average check
    def startDate = DATE_FORMAT.parse(START_DATE);
    def endDate = DATE_FORMAT.parse(END_DATE);
    long startDateUnix = startDate.getTime() / 1000;
    long endDateUnix = endDate.getTime() / 1000;
    def datesParams = "&amp;from=" + startDateUnix + "&amp;to=" + endDateUnix;
    // prepare an empty object of type Demarche to be able to compute the url score without copy-pasting the formula
    def fakeDemarche = xwiki.getDocument('Sandbox.62cs542dsp').newObject('Demarches.Code.DemarchesClass')
    // table header
    resultsAsString.append("|=Démarche|=Id|=Hostname|=De|=À|=Temps total disponible|=Temps total indisponible|=Uptime|=Temps de réponse|=Score|=URL\n");
    for (check in checks) {
      LOGGER.debug("Getting information for " + check.name + "(" + check.id + ", " + check.hostname + ")...");

      // check that the document exists, that it's a demarche check
      if (!xwiki.exists("Demarches." + check.name)) {
        LOGGER.debug("... Not a demarche check: " + check.name + "(" + check.id + ", " + check.hostname + ")...");      
        continue;
      }
      // fetch the data for the current check
      def checkURL = PINGDOM_ENDPOINT + DETAILS_OP + "/" + check.id + "?" + DETAILS_PARAMS;
      if (WITH_DATE_INTERVAL) {
        checkURL += datesParams;
      }
      def checkJson = new URL(checkURL).getText(connectTimeout: 5000, readTimeout: 10000, useCaches: true, allowUserInteraction: false, requestProperties: ['Authorization': PINGDOM_AUTH]);
      def checkInfo = jsonSlurper.parseText(checkJson).summary;
      LOGGER.debug("... Fetched information for " + check.name + "(" + check.id + ", " + check.hostname + ")");

      if (checkInfo != null &amp;&amp; checkInfo instanceof java.util.Map) {
        def uptimeRatio = 0;
        try {
          uptimeRatio = 100 * checkInfo.status.totalup / (checkInfo.status.totalup + checkInfo.status.totaldown);
        } catch (Exception e) {
          LOGGER.warn("Exception computing the uptime ratio for demarche " + check.name + ", " + check.id + " total up " + checkInfo.status.totalup + " total down " + checkInfo.status.totaldown);
        }
        def from = checkInfo.responsetime.from != 0 ? DATE_FORMAT.format(new java.util.Date(Long.valueOf(checkInfo.responsetime.from) * 1000)) : "-";
        def to = checkInfo.responsetime.to != 0 ? DATE_FORMAT.format(new java.util.Date(Long.valueOf(checkInfo.responsetime.to) * 1000)) : "-";
        fakeDemarche.set('urlAvailability', uptimeRatio);
        fakeDemarche.set('urlResponseTime', checkInfo.responsetime.avgresponse);
        resultsAsString.append("|" + check.name + "|" + check.id + "|" + check.hostname + "|" + from + "|" + to + "|" + checkInfo.status.totalup + "|" + checkInfo.status.totaldown + "|" + uptimeRatio + "|" + checkInfo.responsetime.avgresponse + "|" + fakeDemarche.get('urlScore'));
      }
      // get detailed information about the check, to log them in the document
      LOGGER.debug("Getting detailed information for " + check.name + "(" + check.id + ", " + check.hostname + ")...");
      def checkDetailsJson = new URL(PINGDOM_ENDPOINT + LIST_OP + "/" + check.id).getText(connectTimeout: 5000, readTimeout: 10000, useCaches: true, allowUserInteraction: false, requestProperties: ['Authorization': PINGDOM_AUTH]);
      def checkDetailsInfo = jsonSlurper.parseText(checkDetailsJson).check;
      LOGGER.debug("... Fetched detailed information for " + check.name + "(" + check.id + ", " + check.hostname + ")");

      if (checkDetailsInfo != null &amp;&amp; checkDetailsInfo instanceof java.util.Map) {
        def checkCompleteURL = '';
        if (checkDetailsInfo.type.http != null) {
          checkCompleteURL += 'http';
          if (checkDetailsInfo.type.http.encryption) {
            checkCompleteURL += 's';
          }
          // escape the // of the URL so that it's not rendered as link.
          // in the URL, escape lots of special characters: the tildes that don't get rendered otherwise, the | and !! which can break the tables.
          // suprisingly enough, !! is table syntax :) .
          checkCompleteURL += ":~/~/" + checkDetailsInfo.hostname + checkDetailsInfo.type.http.url.replaceAll("~", "~~").replaceAll("\\|", "~|").replaceAll("!!", "~!!");
        }
        resultsAsString.append("|" + checkCompleteURL);
      }
      // finally, append the end of line for this table line
      resultsAsString.append("\n");
    }
  }

  def resultsDocument = xwiki.getDocument(RESULTS_LOCATION + "." + resultsDocumentName);
  resultsDocument.setHidden(true);
  resultsDocument.setTitle("Résultats récupérés le " + DATE_FORMAT.format(NOW));
  resultsDocument.setContent(resultsAsString.toString());
  resultsDocument.save();

  println "[[Résultats&gt;&gt;" + resultsDocument.getFullName() + "]]";
} else {
  if (pingdomAPI == null) {
    println "The Pingdom API token was not defined, add it in xwiki.properties with the key ##pingdom.apitoken## .";
  } else {
    println "[[Récupérer les résultats&gt;&gt;"+ doc.fullName + "||queryString='confirm=true' class='btn btn-default']]";
  }
}

{{/groovy}}</content>
</xwikidoc>
