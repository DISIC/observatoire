<?xml version="1.1" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.3" reference="Demarches.Code.DemarchesImport" locale="">
  <web>Demarches.Code</web>
  <name>DemarchesImport</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <creationDate>1544396400000</creationDate>
  <parent>wikidemat:Demarches.Code.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <date>1544396400000</date>
  <contentUpdateDate>1544396400000</contentUpdateDate>
  <version>1.1</version>
  <title>DemarchesImport</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.0</syntaxId>
  <hidden>false</hidden>
  <content/>
  <attachment>
    <filename>CDS-DFAE - DÃ©marches.csv</filename>
    <mimetype>text/csv</mimetype>
    <author>xwiki:XWiki.Admin</author>
    <date>1544396400000</date>
    <version>1.1</version>
    <comment/>
    <content></content>
    <filesize>8663</filesize>
  </attachment>
  <attachment>
    <filename>MASS-MTEFP-20181005.csv</filename>
    <mimetype>text/csv</mimetype>
    <author>xwiki:XWiki.Admin</author>
    <date>1544396400000</date>
    <version>1.1</version>
    <comment/>
    <content></content>
    <filesize>24006</filesize>
  </attachment>
  <attachment>
    <filename>justice.csv</filename>
    <mimetype>text/csv</mimetype>
    <author>xwiki:XWiki.Admin</author>
    <date>1544396400000</date>
    <version>1.1</version>
    <comment/>
    <content></content>
    <filesize>71542</filesize>
  </attachment>
  <object>
    <name>Demarches.Code.DemarchesImport</name>
    <number>0</number>
    <className>BatchImport.BatchImportClass</className>
    <guid>6f3c2754-c647-4b1e-ab40-d6af541ec02c</guid>
    <class>
      <name>BatchImport.BatchImportClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <classname>
        <disabled>0</disabled>
        <name>classname</name>
        <number>5</number>
        <picker>0</picker>
        <prettyName>classname</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <validationMessage/>
        <validationRegExp/>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </classname>
      <clearname>
        <customDisplay/>
        <defaultValue/>
        <disabled>0</disabled>
        <displayFormType>radio</displayFormType>
        <displayType>yesno</displayType>
        <name>clearname</name>
        <number>12</number>
        <prettyName>Clear name</prettyName>
        <unmodifiable>0</unmodifiable>
        <validationMessage/>
        <validationRegExp/>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </clearname>
      <datafilename>
        <disabled>0</disabled>
        <name>datafilename</name>
        <number>3</number>
        <picker>0</picker>
        <prettyName>datafilename</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <validationMessage/>
        <validationRegExp/>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </datafilename>
      <datafileprefix>
        <disabled>0</disabled>
        <name>datafileprefix</name>
        <number>7</number>
        <picker>0</picker>
        <prettyName>datafileprefix</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <validationMessage/>
        <validationRegExp/>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </datafileprefix>
      <defaultdateformat>
        <customDisplay/>
        <disabled>0</disabled>
        <name>defaultdateformat</name>
        <number>11</number>
        <picker>0</picker>
        <prettyName>Default date format</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <validationMessage/>
        <validationRegExp/>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </defaultdateformat>
      <fieldsfortags>
        <disabled>0</disabled>
        <name>fieldsfortags</name>
        <number>9</number>
        <picker>0</picker>
        <prettyName>fieldsfortags</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <validationMessage/>
        <validationRegExp/>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </fieldsfortags>
      <fileimport>
        <defaultValue/>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType/>
        <name>fileimport</name>
        <number>13</number>
        <prettyName>fileimport</prettyName>
        <unmodifiable>0</unmodifiable>
        <validationMessage/>
        <validationRegExp/>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </fileimport>
      <fileupload>
        <defaultValue/>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType/>
        <name>fileupload</name>
        <number>12</number>
        <prettyName>fileupload</prettyName>
        <unmodifiable>0</unmodifiable>
        <validationMessage/>
        <validationRegExp/>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </fileupload>
      <listseparator>
        <disabled>0</disabled>
        <name>listseparator</name>
        <number>10</number>
        <picker>0</picker>
        <prettyName>List Separator</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <validationMessage/>
        <validationRegExp/>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </listseparator>
      <mapping>
        <disabled>0</disabled>
        <editor>Text</editor>
        <name>mapping</name>
        <number>1</number>
        <picker>0</picker>
        <prettyName>mapping</prettyName>
        <rows>15</rows>
        <size>80</size>
        <unmodifiable>0</unmodifiable>
        <validationMessage/>
        <validationRegExp/>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </mapping>
      <metadatafilename>
        <disabled>0</disabled>
        <name>metadatafilename</name>
        <number>2</number>
        <picker>0</picker>
        <prettyName>metadatafilename</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <validationMessage/>
        <validationRegExp/>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </metadatafilename>
      <pageprefix>
        <disabled>0</disabled>
        <name>pageprefix</name>
        <number>8</number>
        <picker>0</picker>
        <prettyName>pageprefix</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <validationMessage/>
        <validationRegExp/>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </pageprefix>
      <space>
        <disabled>0</disabled>
        <name>space</name>
        <number>6</number>
        <picker>0</picker>
        <prettyName>space</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <validationMessage/>
        <validationRegExp/>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </space>
    </class>
    <property>
      <classname>Demarches.Code.DemarchesClass</classname>
    </property>
    <property>
      <clearname/>
    </property>
    <property>
      <datafilename/>
    </property>
    <property>
      <datafileprefix/>
    </property>
    <property>
      <defaultdateformat>MM/yyyy</defaultdateformat>
    </property>
    <property>
      <fieldsfortags/>
    </property>
    <property>
      <fileimport/>
    </property>
    <property>
      <fileupload/>
    </property>
    <property>
      <listseparator>,</listseparator>
    </property>
    <property>
      <mapping>Remarques=remarques
Sigle ministÃ¨res=ministeres
Fiche signalÃ©tique=urlFiche
Identifiants ELI=identifiantsEli
RÃ©fÃ©rence Service Public=referenceServicePublic
Groupe=groupes
DÃ©matÃ©rialisation obligatoire=dematObligatoire
RÃ©fÃ©rence BDD Form=referenceBddForm
Publics=publics
Statut du projet de dÃ©matÃ©rialisation=statutProjetDemat
Niveau de dÃ©matÃ©rialisation=niveauDemat
DÃ©marche exclue du SVE=exclusionSve
Adresse web dÃ©marche=urlDemarche
Nom raccourci de la dÃ©marche=doc.title
Organismes de traitement=organismesTraitement
CatÃ©gories de publics concernÃ©s=categoriesPublics
Direction ou Ã©tablissement=direction
Formulaires (CERFA)=formulaires
Textes de rÃ©fÃ©rence=textes
Niveau de dÃ©matÃ©rialisation prÃ©vu=niveauPrevu
CaractÃ©ristiques=caracteristiquesDemat
Adresse web infos=urlInfos
Date de mise en ligne=dateMiseEnLigne
Objet=objet
VolumÃ©trie de la dÃ©marche=volumetrie
Identifiant de la dÃ©marche=doc.name
VolumÃ©trie de la dÃ©matÃ©rialisation=volumetrieDemat
Nom de projet=nomProjet
ÃvÃ©nements de vie=evenements
CaractÃ©ristiques prÃ©vues=caracteristiquesDematPrevues
Nom complet de la dÃ©marche=nomComplet
Statut de la dÃ©marche=statut</mapping>
    </property>
    <property>
      <metadatafilename>CDS-DFAE - DÃ©marches.csv</metadatafilename>
    </property>
    <property>
      <pageprefix/>
    </property>
    <property>
      <space>Demarches</space>
    </property>
  </object>
</xwikidoc>
